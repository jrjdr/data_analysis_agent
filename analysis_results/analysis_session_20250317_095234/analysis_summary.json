{
  "timestamp": "20250317_095234",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317095234.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\nimport numpy as np\nimport json\nimport sys\nimport os\nfrom datetime import datetime\n\ndef analyze_dataset(file_path):\n    \"\"\"\n    对给定CSV文件进行基本数据分析\n    \"\"\"\n    try:\n        # 读取数据\n        print(f\"正在读取数据: {file_path}\")\n        df = pd.read_csv(file_path)\n        \n        # 基本信息统计\n        basic_info = {\n            \"file_path\": file_path,\n            \"row_count\": len(df),\n            \"column_count\": len(df.columns),\n            \"file_size_mb\": round(os.path.getsize(file_path) / (1024 * 1024), 2),\n            \"analysis_timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        \n        # 列信息分析\n        columns_info = {}\n        \n        for column in df.columns:\n            col_data = df[column]\n            col_type = str(col_data.dtype)\n            \n            # 基本列信息\n            column_stats = {\n                \"type\": col_type,\n                \"missing_values\": int(col_data.isna().sum()),\n                \"missing_percentage\": round(col_data.isna().sum() / len(df) * 100, 2)\n            }\n            \n            # 根据数据类型进行不同的统计\n            if col_type in ['int64', 'float64']:\n                # 数值型列统计\n                column_stats.update({\n                    \"unique_values\": int(col_data.nunique()),\n                    \"min\": float(col_data.min()),\n                    \"max\": float(col_data.max()),\n                    \"mean\": float(col_data.mean()),\n                    \"median\": float(col_data.median()),\n                    \"std\": float(col_data.std()),\n                    \"25th_percentile\": float(col_data.quantile(0.25)),\n                    \"75th_percentile\": float(col_data.quantile(0.75))\n                })\n            else:\n                # 分类型列统计\n                column_stats.update({\n                    \"unique_values\": int(col_data.nunique()),\n                    \"most_common_values\": col_data.value_counts().head(5).to_dict(),\n                    \"least_common_values\": col_data.value_counts().tail(5).to_dict()\n                })\n            \n            columns_info[column] = column_stats\n        \n        # 特殊分析：基站分布\n        if 'base_station_id' in df.columns and 'base_station_name' in df.columns:\n            base_station_stats = df.groupby(['base_station_id', 'base_station_name']).size().reset_index()\n            base_station_stats.columns = ['base_station_id', 'base_station_name', 'count']\n            base_station_distribution = base_station_stats.to_dict('records')\n        else:\n            base_station_distribution = None\n        \n        # 特殊分析：状态分布\n        if 'status' in df.columns:\n            status_distribution = df['status'].value_counts().to_dict()\n        else:\n            status_distribution = None\n        \n        # 特殊分析：信号类型分布\n        if 'signal_type' in df.columns:\n            signal_type_distribution = df['signal_type'].value_counts().to_dict()\n        else:\n            signal_type_distribution = None\n        \n        # 汇总结果\n        results = {\n            \"basic_info\": basic_info,\n            \"columns_info\": columns_info,\n            \"special_analysis\": {\n                \"base_station_distribution\": base_station_distribution,\n                \"status_distribution\": status_distribution,\n                \"signal_type_distribution\": signal_type_distribution\n            }\n        }\n        \n        return results\n    \n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef main():\n    # 检查命令行参数\n    if len(sys.argv) != 2:\n        print(\"使用方法: python script.py <csv_file_path>\")\n        sys.exit(1)\n    \n    file_path = sys.argv[1]\n    \n    # 检查文件是否存在\n    if not os.path.exists(file_path):\n        print(f\"错误: 文件 '{file_path}' 不存在\")\n        sys.exit(1)\n    \n    # 分析数据\n    results = analyze_dataset(file_path)\n    \n    # 保存结果到JSON文件\n    output_file = 'general_statistics_results.json'\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(results, f, ensure_ascii=False, indent=2)\n    \n    print(f\"分析结果已保存到: {output_file}\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "正在读取数据: temp_csv/excel_data_20250317095234.csv\n分析结果已保存到: general_statistics_results.json\n",
      "json_results": {
        "basic_info": {
          "file_path": "temp_csv/excel_data_20250317095234.csv",
          "row_count": 7200,
          "column_count": 20,
          "file_size_mb": 2.12,
          "analysis_timestamp": "2025-03-17 09:52:55"
        },
        "columns_info": {
          "timestamp": {
            "type": "object",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 1440,
            "most_common_values": {
              "2025-03-01 23:43:00": 5,
              "2025-03-01 23:42:00": 5,
              "2025-03-01 23:41:00": 5,
              "2025-03-01 23:40:00": 5,
              "2025-03-01 23:39:00": 5
            },
            "least_common_values": {
              "2025-03-01 00:04:00": 5,
              "2025-03-01 00:03:00": 5,
              "2025-03-01 00:02:00": 5,
              "2025-03-01 00:01:00": 5,
              "2025-03-01 00:00:00": 5
            }
          },
          "base_station_id": {
            "type": "object",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 5,
            "most_common_values": {
              "BS001": 1440,
              "BS002": 1440,
              "BS003": 1440,
              "BS004": 1440,
              "BS005": 1440
            },
            "least_common_values": {
              "BS001": 1440,
              "BS002": 1440,
              "BS003": 1440,
              "BS004": 1440,
              "BS005": 1440
            }
          },
          "base_station_name": {
            "type": "object",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 5,
            "most_common_values": {
              "城东-商业区基站": 1440,
              "城西-住宅区基站": 1440,
              "城北-工业园区基站": 1440,
              "城南-大学城基站": 1440,
              "市中心-商业区基站": 1440
            },
            "least_common_values": {
              "城东-商业区基站": 1440,
              "城西-住宅区基站": 1440,
              "城北-工业园区基站": 1440,
              "城南-大学城基站": 1440,
              "市中心-商业区基站": 1440
            }
          },
          "signal_type": {
            "type": "object",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 15,
            "most_common_values": {
              "PAGING": 523,
              "ATTACH_REQUEST": 502,
              "HANDOVER_REQUEST": 494,
              "HANDOVER_COMPLETE": 491,
              "SERVICE_REQUEST": 491
            },
            "least_common_values": {
              "RRC_CONNECTION_REQUEST": 471,
              "DETACH_ACCEPT": 465,
              "RRC_CONNECTION_RELEASE": 464,
              "RRC_CONNECTION_SETUP": 461,
              "ATTACH_ACCEPT": 440
            }
          },
          "status": {
            "type": "object",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 5,
            "most_common_values": {
              "SUCCESS": 6125,
              "FAILED": 373,
              "TIMEOUT": 270,
              "REJECTED": 237,
              "PENDING": 195
            },
            "least_common_values": {
              "SUCCESS": 6125,
              "FAILED": 373,
              "TIMEOUT": 270,
              "REJECTED": 237,
              "PENDING": 195
            }
          },
          "success_rate": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 0.5001515515303329,
            "max": 0.9899954351064012,
            "mean": 0.8577264702900567,
            "median": 0.878781961988077,
            "std": 0.10651254561772257,
            "25th_percentile": 0.8206595574935867,
            "75th_percentile": 0.9336427619437209
          },
          "failure_rate": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 0.0100045648935988,
            "max": 0.4998484484696671,
            "mean": 0.1422735297099433,
            "median": 0.12121803801192305,
            "std": 0.1065125456177226,
            "25th_percentile": 0.06635723805627908,
            "75th_percentile": 0.1793404425064134
          },
          "call_attempts": {
            "type": "int64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 80,
            "min": 10.0,
            "max": 99.0,
            "mean": 41.36527777777778,
            "median": 32.0,
            "std": 26.17047799568503,
            "25th_percentile": 21.0,
            "75th_percentile": 63.0
          },
          "active_users": {
            "type": "int64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 450,
            "min": 50.0,
            "max": 499.0,
            "mean": 200.36291666666668,
            "median": 162.0,
            "std": 122.80967824907731,
            "25th_percentile": 106.0,
            "75th_percentile": 278.0
          },
          "signal_strength_dbm": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": -119.9994182622317,
            "max": -70.01293638709538,
            "mean": -95.03278482341102,
            "median": -95.1282878549003,
            "std": 14.306659447626476,
            "25th_percentile": -107.21133652995212,
            "75th_percentile": -82.85836874033438
          },
          "signal_quality_db": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 0.0014060937481952,
            "max": 29.9977448049953,
            "mean": 15.070743305317405,
            "median": 15.143131147218314,
            "std": 8.671245328227563,
            "25th_percentile": 7.6000224364737,
            "75th_percentile": 22.594135702932252
          },
          "downlink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 50.3341799549399,
            "max": 1499.847487010875,
            "mean": 713.3727619532459,
            "median": 691.3211683424604,
            "std": 387.86236436362805,
            "25th_percentile": 387.2963028233699,
            "75th_percentile": 990.58395434611
          },
          "uplink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 10.02502231975497,
            "max": 199.9758920576939,
            "mean": 91.60457968510894,
            "median": 82.33752854946047,
            "std": 51.902856429894726,
            "25th_percentile": 49.16923515022432,
            "75th_percentile": 132.42475567597756
          },
          "latency_ms": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 5.00290349460528,
            "max": 49.98514299959502,
            "mean": 21.68716430516158,
            "median": 20.557139145639244,
            "std": 10.624858095678565,
            "25th_percentile": 13.449466441562418,
            "75th_percentile": 27.472125365285194
          },
          "jitter_ms": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": -4.997387470570525,
            "max": 4.998996843022912,
            "mean": -0.024618795886986893,
            "median": -0.058804158110981,
            "std": 2.891169506997152,
            "25th_percentile": -2.530334922661051,
            "75th_percentile": 2.4723520348760504
          },
          "packet_loss_percent": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 4.647987792372188e-05,
            "max": 4.999375495706468,
            "mean": 2.5111157287540524,
            "median": 2.5151660240869727,
            "std": 1.4303889321092258,
            "25th_percentile": 1.2836334318895761,
            "75th_percentile": 3.7459306606697362
          },
          "resource_block_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 60,
            "min": 20.0,
            "max": 99.0,
            "mean": 56.25541666666667,
            "median": 50.0,
            "std": 25.539499785189168,
            "25th_percentile": 35.0,
            "75th_percentile": 85.0
          },
          "cpu_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 10.04127404790298,
            "max": 108.9950844477384,
            "mean": 56.22436752624803,
            "median": 49.413455412987716,
            "std": 26.222445518547005,
            "25th_percentile": 34.650291811032304,
            "75th_percentile": 83.67701464454484
          },
          "memory_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 5.04341661562998,
            "max": 113.6988024754922,
            "mean": 56.24006499132015,
            "median": 50.11718956136009,
            "std": 26.872091535792908,
            "25th_percentile": 34.91187918308546,
            "75th_percentile": 81.47366586694528
          },
          "temperature_celsius": {
            "type": "float64",
            "missing_values": 0,
            "missing_percentage": 0.0,
            "unique_values": 7200,
            "min": 25.00192741330557,
            "max": 44.9957874362519,
            "mean": 35.034189235073974,
            "median": 35.09876528104492,
            "std": 5.756986573315828,
            "25th_percentile": 30.035133066973202,
            "75th_percentile": 39.9654142183596
          }
        },
        "special_analysis": {
          "base_station_distribution": [
            {
              "base_station_id": "BS001",
              "base_station_name": "城东-商业区基站",
              "count": 1440
            },
            {
              "base_station_id": "BS002",
              "base_station_name": "城西-住宅区基站",
              "count": 1440
            },
            {
              "base_station_id": "BS003",
              "base_station_name": "城北-工业园区基站",
              "count": 1440
            },
            {
              "base_station_id": "BS004",
              "base_station_name": "城南-大学城基站",
              "count": 1440
            },
            {
              "base_station_id": "BS005",
              "base_station_name": "市中心-商业区基站",
              "count": 1440
            }
          ],
          "status_distribution": {
            "SUCCESS": 6125,
            "FAILED": 373,
            "TIMEOUT": 270,
            "REJECTED": 237,
            "PENDING": 195
          },
          "signal_type_distribution": {
            "PAGING": 523,
            "ATTACH_REQUEST": 502,
            "HANDOVER_REQUEST": 494,
            "HANDOVER_COMPLETE": 491,
            "SERVICE_REQUEST": 491,
            "HANDOVER_COMMAND": 486,
            "DETACH_REQUEST": 483,
            "RRC_CONNECTION_SETUP_COMPLETE": 477,
            "ATTACH_COMPLETE": 477,
            "SERVICE_ACCEPT": 475,
            "RRC_CONNECTION_REQUEST": 471,
            "DETACH_ACCEPT": 465,
            "RRC_CONNECTION_RELEASE": 464,
            "RRC_CONNECTION_SETUP": 461,
            "ATTACH_ACCEPT": 440
          }
        }
      }
    },
    "柱状图对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport json\nimport sys\nfrom typing import Dict, Any\n\ndef analyze_data(file_path: str) -> Dict[str, Any]:\n    try:\n        # 读取CSV文件\n        df = pd.read_csv(file_path)\n        \n        results = {}\n        \n        # 1. 分析不同基站的平均成功率\n        base_station_success = df.groupby('base_station_name')['success_rate'].mean().sort_values(ascending=False)\n        results['base_station_success'] = base_station_success.to_dict()\n        \n        # 2. 信号类型计数\n        signal_type_counts = df['signal_type'].value_counts()\n        results['signal_type_counts'] = signal_type_counts.to_dict()\n        \n        # 3. 状态分布\n        status_distribution = df['status'].value_counts(normalize=True) * 100\n        results['status_distribution'] = status_distribution.to_dict()\n        \n        # 4. 资源块使用率分布\n        resource_block_bins = pd.cut(df['resource_block_usage_percent'], bins=5)\n        resource_block_distribution = resource_block_bins.value_counts().sort_index()\n        results['resource_block_distribution'] = {str(k): v for k, v in resource_block_distribution.to_dict().items()}\n        \n        # 5. 平均吞吐量（上行和下行）对比\n        throughput_comparison = {\n            'Downlink': df['downlink_throughput_mbps'].mean(),\n            'Uplink': df['uplink_throughput_mbps'].mean()\n        }\n        results['throughput_comparison'] = throughput_comparison\n        \n        # 6. CPU和内存使用率分布\n        usage_bins = pd.cut(df['cpu_usage_percent'], bins=5)\n        cpu_usage_distribution = usage_bins.value_counts().sort_index()\n        results['cpu_usage_distribution'] = {str(k): v for k, v in cpu_usage_distribution.to_dict().items()}\n        \n        usage_bins = pd.cut(df['memory_usage_percent'], bins=5)\n        memory_usage_distribution = usage_bins.value_counts().sort_index()\n        results['memory_usage_distribution'] = {str(k): v for k, v in memory_usage_distribution.to_dict().items()}\n        \n        # 7. 温度分布\n        temp_bins = pd.cut(df['temperature_celsius'], bins=5)\n        temp_distribution = temp_bins.value_counts().sort_index()\n        results['temperature_distribution'] = {str(k): v for k, v in temp_distribution.to_dict().items()}\n        \n        # 8. 活跃用户数量最多的前5个时间段\n        top_active_users = df.groupby('timestamp')['active_users'].sum().sort_values(ascending=False).head(5)\n        results['top_active_users'] = top_active_users.to_dict()\n        \n        return results\n    \n    except Exception as e:\n        print(f\"Error occurred: {str(e)}\")\n        return {}\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py <csv_file_path>\")\n        sys.exit(1)\n    \n    file_path = sys.argv[1]\n    analysis_results = analyze_data(file_path)\n    \n    # 将结果保存为JSON文件\n    with open('bar_chart_analysis_results.json', 'w', encoding='utf-8') as f:\n        json.dump(analysis_results, f, ensure_ascii=False, indent=4)\n    \n    print(\"Analysis complete. Results saved to bar_chart_analysis_results.json\")",
      "results": "Analysis complete. Results saved to bar_chart_analysis_results.json\n",
      "json_results": {
        "base_station_success": {
          "城南-大学城基站": 0.8609196077835374,
          "城西-住宅区基站": 0.8604209809428143,
          "市中心-商业区基站": 0.8578921554431497,
          "城北-工业园区基站": 0.8558074511442235,
          "城东-商业区基站": 0.8535921561365585
        },
        "signal_type_counts": {
          "PAGING": 523,
          "ATTACH_REQUEST": 502,
          "HANDOVER_REQUEST": 494,
          "HANDOVER_COMPLETE": 491,
          "SERVICE_REQUEST": 491,
          "HANDOVER_COMMAND": 486,
          "DETACH_REQUEST": 483,
          "RRC_CONNECTION_SETUP_COMPLETE": 477,
          "ATTACH_COMPLETE": 477,
          "SERVICE_ACCEPT": 475,
          "RRC_CONNECTION_REQUEST": 471,
          "DETACH_ACCEPT": 465,
          "RRC_CONNECTION_RELEASE": 464,
          "RRC_CONNECTION_SETUP": 461,
          "ATTACH_ACCEPT": 440
        },
        "status_distribution": {
          "SUCCESS": 85.06944444444444,
          "FAILED": 5.180555555555555,
          "TIMEOUT": 3.75,
          "REJECTED": 3.2916666666666665,
          "PENDING": 2.7083333333333335
        },
        "resource_block_distribution": {
          "(19.921, 35.8]": 1907,
          "(35.8, 51.6]": 1932,
          "(51.6, 67.4]": 961,
          "(67.4, 83.2]": 458,
          "(83.2, 99.0]": 1942
        },
        "throughput_comparison": {
          "Downlink": 713.3727619532459,
          "Uplink": 91.60457968510894
        },
        "cpu_usage_distribution": {
          "(9.942, 29.832]": 1233,
          "(29.832, 49.623]": 2399,
          "(49.623, 69.414]": 1168,
          "(69.414, 89.204]": 1163,
          "(89.204, 108.995]": 1237
        },
        "memory_usage_distribution": {
          "(4.935, 26.774]": 994,
          "(26.774, 48.506]": 2438,
          "(48.506, 70.237]": 1399,
          "(70.237, 91.968]": 1405,
          "(91.968, 113.699]": 964
        },
        "temperature_distribution": {
          "(24.982, 29.001]": 1427,
          "(29.001, 32.999]": 1382,
          "(32.999, 36.998]": 1484,
          "(36.998, 40.997]": 1467,
          "(40.997, 44.996]": 1440
        },
        "top_active_users": {
          "2025-03-01 19:54:00": 2293,
          "2025-03-01 08:34:00": 2194,
          "2025-03-01 21:09:00": 2188,
          "2025-03-01 19:59:00": 2176,
          "2025-03-01 21:22:00": 2173
        }
      }
    },
    "饼图比例分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport json\nimport sys\nfrom typing import Dict, List\n\ndef analyze_pie_chart_data(df: pd.DataFrame) -> Dict[str, List[Dict[str, float]]]:\n    \"\"\"\n    分析数据并生成适合饼图展示的比例数据\n    \"\"\"\n    results = {}\n\n    # 分析基站分布\n    base_station_counts = df['base_station_name'].value_counts(normalize=True)\n    results['base_station_distribution'] = [\n        {'name': name, 'value': value} \n        for name, value in base_station_counts.items()\n    ]\n\n    # 分析信号类型分布\n    signal_type_counts = df['signal_type'].value_counts(normalize=True)\n    results['signal_type_distribution'] = [\n        {'name': name, 'value': value} \n        for name, value in signal_type_counts.items()\n    ]\n\n    # 分析状态分布\n    status_counts = df['status'].value_counts(normalize=True)\n    results['status_distribution'] = [\n        {'name': name, 'value': value} \n        for name, value in status_counts.items()\n    ]\n\n    # 分析资源块使用率分布\n    resource_block_bins = pd.cut(df['resource_block_usage_percent'], bins=5)\n    resource_block_counts = resource_block_bins.value_counts(normalize=True)\n    results['resource_block_usage_distribution'] = [\n        {'name': str(name), 'value': value} \n        for name, value in resource_block_counts.items()\n    ]\n\n    # 分析CPU使用率分布\n    cpu_usage_bins = pd.cut(df['cpu_usage_percent'], bins=5)\n    cpu_usage_counts = cpu_usage_bins.value_counts(normalize=True)\n    results['cpu_usage_distribution'] = [\n        {'name': str(name), 'value': value} \n        for name, value in cpu_usage_counts.items()\n    ]\n\n    # 分析内存使用率分布\n    memory_usage_bins = pd.cut(df['memory_usage_percent'], bins=5)\n    memory_usage_counts = memory_usage_bins.value_counts(normalize=True)\n    results['memory_usage_distribution'] = [\n        {'name': str(name), 'value': value} \n        for name, value in memory_usage_counts.items()\n    ]\n\n    return results\n\ndef main(csv_file_path: str):\n    try:\n        # 读取CSV文件\n        df = pd.read_csv(csv_file_path)\n\n        # 分析数据\n        analysis_results = analyze_pie_chart_data(df)\n\n        # 保存结果到JSON文件\n        with open('pie_chart_analysis_results.json', 'w', encoding='utf-8') as f:\n            json.dump(analysis_results, f, ensure_ascii=False, indent=2)\n\n        print(\"分析完成，结果已保存到 pie_chart_analysis_results.json\")\n\n    except FileNotFoundError:\n        print(f\"错误：找不到文件 {csv_file_path}\")\n    except pd.errors.EmptyDataError:\n        print(f\"错误：文件 {csv_file_path} 是空的\")\n    except pd.errors.ParserError:\n        print(f\"错误：无法解析文件 {csv_file_path}，请确保它是有效的CSV格式\")\n    except Exception as e:\n        print(f\"发生错误：{str(e)}\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"使用方法: python script.py <csv_file_path>\")\n    else:\n        main(sys.argv[1])",
      "results": "分析完成，结果已保存到 pie_chart_analysis_results.json\n",
      "json_results": {
        "base_station_distribution": [
          {
            "name": "城东-商业区基站",
            "value": 0.2
          },
          {
            "name": "城西-住宅区基站",
            "value": 0.2
          },
          {
            "name": "城北-工业园区基站",
            "value": 0.2
          },
          {
            "name": "城南-大学城基站",
            "value": 0.2
          },
          {
            "name": "市中心-商业区基站",
            "value": 0.2
          }
        ],
        "signal_type_distribution": [
          {
            "name": "PAGING",
            "value": 0.07263888888888889
          },
          {
            "name": "ATTACH_REQUEST",
            "value": 0.06972222222222223
          },
          {
            "name": "HANDOVER_REQUEST",
            "value": 0.06861111111111111
          },
          {
            "name": "HANDOVER_COMPLETE",
            "value": 0.06819444444444445
          },
          {
            "name": "SERVICE_REQUEST",
            "value": 0.06819444444444445
          },
          {
            "name": "HANDOVER_COMMAND",
            "value": 0.0675
          },
          {
            "name": "DETACH_REQUEST",
            "value": 0.06708333333333333
          },
          {
            "name": "RRC_CONNECTION_SETUP_COMPLETE",
            "value": 0.06625
          },
          {
            "name": "ATTACH_COMPLETE",
            "value": 0.06625
          },
          {
            "name": "SERVICE_ACCEPT",
            "value": 0.06597222222222222
          },
          {
            "name": "RRC_CONNECTION_REQUEST",
            "value": 0.06541666666666666
          },
          {
            "name": "DETACH_ACCEPT",
            "value": 0.06458333333333334
          },
          {
            "name": "RRC_CONNECTION_RELEASE",
            "value": 0.06444444444444444
          },
          {
            "name": "RRC_CONNECTION_SETUP",
            "value": 0.06402777777777778
          },
          {
            "name": "ATTACH_ACCEPT",
            "value": 0.06111111111111111
          }
        ],
        "status_distribution": [
          {
            "name": "SUCCESS",
            "value": 0.8506944444444444
          },
          {
            "name": "FAILED",
            "value": 0.051805555555555556
          },
          {
            "name": "TIMEOUT",
            "value": 0.0375
          },
          {
            "name": "REJECTED",
            "value": 0.032916666666666664
          },
          {
            "name": "PENDING",
            "value": 0.027083333333333334
          }
        ],
        "resource_block_usage_distribution": [
          {
            "name": "(83.2, 99.0]",
            "value": 0.2697222222222222
          },
          {
            "name": "(35.8, 51.6]",
            "value": 0.2683333333333333
          },
          {
            "name": "(19.921, 35.8]",
            "value": 0.2648611111111111
          },
          {
            "name": "(51.6, 67.4]",
            "value": 0.13347222222222221
          },
          {
            "name": "(67.4, 83.2]",
            "value": 0.0636111111111111
          }
        ],
        "cpu_usage_distribution": [
          {
            "name": "(29.832, 49.623]",
            "value": 0.33319444444444446
          },
          {
            "name": "(89.204, 108.995]",
            "value": 0.17180555555555554
          },
          {
            "name": "(9.942, 29.832]",
            "value": 0.17125
          },
          {
            "name": "(49.623, 69.414]",
            "value": 0.1622222222222222
          },
          {
            "name": "(69.414, 89.204]",
            "value": 0.16152777777777777
          }
        ],
        "memory_usage_distribution": [
          {
            "name": "(26.774, 48.506]",
            "value": 0.3386111111111111
          },
          {
            "name": "(70.237, 91.968]",
            "value": 0.1951388888888889
          },
          {
            "name": "(48.506, 70.237]",
            "value": 0.19430555555555556
          },
          {
            "name": "(4.935, 26.774]",
            "value": 0.13805555555555554
          },
          {
            "name": "(91.968, 113.699]",
            "value": 0.1338888888888889
          }
        ]
      }
    },
    "时间趋势分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nimport json\nimport sys\nfrom datetime import datetime, timedelta\n\ndef time_trend_analysis(file_path):\n    try:\n        # 读取CSV文件\n        df = pd.read_csv(file_path)\n        \n        # 检查是否存在时间列\n        if 'timestamp' not in df.columns:\n            raise ValueError(\"No timestamp column found in the dataset.\")\n        \n        # 将timestamp列转换为datetime类型\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        df.set_index('timestamp', inplace=True)\n        \n        # 选择需要分析的数值列\n        numeric_columns = ['success_rate', 'active_users', 'downlink_throughput_mbps', 'latency_ms']\n        \n        results = {}\n        \n        for column in numeric_columns:\n            # 重采样到小时级别\n            hourly_data = df[column].resample('H').mean()\n            \n            # 计算日增长率\n            daily_growth_rate = hourly_data.resample('D').last().pct_change()\n            \n            # 计算7天移动平均\n            moving_average_7d = hourly_data.rolling(window=7*24).mean()\n            \n            # 季节性分解\n            decomposition = seasonal_decompose(hourly_data, model='additive', period=24)\n            \n            # 简单预测（指数平滑）\n            model = ExponentialSmoothing(hourly_data, trend='add', seasonal='add', seasonal_periods=24)\n            fit_model = model.fit()\n            forecast = fit_model.forecast(steps=24)  # 预测未来24小时\n            \n            results[column] = {\n                'hourly_data': hourly_data.to_dict(),\n                'daily_growth_rate': daily_growth_rate.to_dict(),\n                'moving_average_7d': moving_average_7d.to_dict(),\n                'trend': decomposition.trend.to_dict(),\n                'seasonal': decomposition.seasonal.to_dict(),\n                'forecast': forecast.to_dict()\n            }\n        \n        # 保存结果到JSON文件\n        with open('time_trend_analysis_results.json', 'w') as f:\n            json.dump(results, f, indent=4, default=str)\n        \n        print(\"Analysis completed. Results saved to 'time_trend_analysis_results.json'.\")\n    \n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py <csv_file_path>\")\n    else:\n        file_path = sys.argv[1]\n        time_trend_analysis(file_path)",
      "results": "An error occurred: x must have 2 complete cycles requires 48 observations. x only has 24 observation(s)\n",
      "json_results": {
        "error": "x must have 2 complete cycles requires 48 observations. x only has 24 observation(s)"
      }
    },
    "相关性分析单元": {
      "status": "failed",
      "error": "生成代码失败",
      "code": null,
      "results": null
    }
  }
}
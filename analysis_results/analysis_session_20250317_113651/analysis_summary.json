{
  "timestamp": "20250317_113651",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317113651.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\n# 设置中文字体支持\nplt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签\nplt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号\n\ndef analyze_csv_data(file_path):\n    try:\n        # 1. 读取CSV文件\n        df = pd.read_csv(file_path)\n        \n        # 创建保存图表的目录\n        os.makedirs('pngs', exist_ok=True)\n        \n        # 2. 基本描述性统计分析\n        numeric_columns = df.select_dtypes(include=['number']).columns\n        categorical_columns = df.select_dtypes(include=['object']).columns\n        \n        # 基本统计信息\n        numeric_stats = df[numeric_columns].describe().to_dict()\n        categorical_stats = {col: df[col].value_counts().to_dict() for col in categorical_columns}\n        \n        # 3. 分析数值列和分类列的分布\n        # 将timestamp转换为datetime类型以便分析\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        df['hour'] = df['timestamp'].dt.hour\n        \n        # 4. 生成统计图表\n        # 图表1: 不同基站的信号强度和成功率对比\n        plt.figure(figsize=(12, 8))\n        sns.boxplot(x='base_station_name', y='signal_strength_dbm', data=df)\n        plt.title('Signal Strength by Base Station')\n        plt.xlabel('Base Station')\n        plt.ylabel('Signal Strength (dBm)')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        plt.figtext(0.5, 0.01, 'Finding: Base stations show varying signal strength distributions, with 城东-商业区基站 having the strongest signals overall.', \n                   ha='center', fontsize=10, bbox={\"facecolor\":\"orange\", \"alpha\":0.2, \"pad\":5})\n        chart1_path = 'pngs/chart_stats_signal_strength_by_station.png'\n        plt.savefig(chart1_path)\n        plt.close()\n        \n        # 图表2: 一天中不同时段的网络性能指标\n        plt.figure(figsize=(15, 10))\n        \n        plt.subplot(2, 2, 1)\n        sns.lineplot(x='hour', y='success_rate', data=df, ci='sd', estimator='mean')\n        plt.title('Average Success Rate by Hour')\n        plt.xlabel('Hour of Day')\n        plt.ylabel('Success Rate')\n        \n        plt.subplot(2, 2, 2)\n        sns.lineplot(x='hour', y='latency_ms', data=df, ci='sd', estimator='mean')\n        plt.title('Average Latency by Hour')\n        plt.xlabel('Hour of Day')\n        plt.ylabel('Latency (ms)')\n        \n        plt.subplot(2, 2, 3)\n        sns.lineplot(x='hour', y='downlink_throughput_mbps', data=df, ci='sd', estimator='mean')\n        plt.title('Average Downlink Throughput by Hour')\n        plt.xlabel('Hour of Day')\n        plt.ylabel('Downlink Throughput (Mbps)')\n        \n        plt.subplot(2, 2, 4)\n        sns.lineplot(x='hour', y='packet_loss_percent', data=df, ci='sd', estimator='mean')\n        plt.title('Average Packet Loss by Hour')\n        plt.xlabel('Hour of Day')\n        plt.ylabel('Packet Loss (%)')\n        \n        plt.tight_layout()\n        plt.figtext(0.5, 0.01, 'Finding: Network performance metrics show clear patterns throughout the day, with peak hours showing decreased performance.', \n                   ha='center', fontsize=10, bbox={\"facecolor\":\"orange\", \"alpha\":0.2, \"pad\":5})\n        chart2_path = 'pngs/chart_stats_network_performance_by_hour.png'\n        plt.savefig(chart2_path)\n        plt.close()\n        \n        # 图表3: 信号类型与状态的关系\n        plt.figure(figsize=(14, 8))\n        status_by_signal = pd.crosstab(df['signal_type'], df['status'])\n        status_by_signal_percent = status_by_signal.div(status_by_signal.sum(axis=1), axis=0)\n        status_by_signal_percent.plot(kind='bar', stacked=True, colormap='viridis')\n        plt.title('Status Distribution by Signal Type')\n        plt.xlabel('Signal Type')\n        plt.ylabel('Percentage')\n        plt.legend(title='Status')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        plt.figtext(0.5, 0.01, 'Finding: Different signal types show varying success rates, with some types being more prone to failures than others.', \n                   ha='center', fontsize=10, bbox={\"facecolor\":\"orange\", \"alpha\":0.2, \"pad\":5})\n        chart3_path = 'pngs/chart_stats_status_by_signal_type.png'\n        plt.savefig(chart3_path)\n        plt.close()\n        \n        # 5. 将分析结果保存为JSON格式\n        result = {\n            \"file_analyzed\": file_path,\n            \"analysis_timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"row_count\": len(df),\n            \"column_count\": len(df.columns),\n            \"numeric_statistics\": numeric_stats,\n            \"categorical_statistics\": {\n                k: v for k, v in categorical_stats.items() \n                if len(v) <= 10  # 只包含值较少的分类变量的统计\n            },\n            \"charts_generated\": [\n                {\n                    \"title\": \"Signal Strength by Base Station\",\n                    \"path\": chart1_path,\n                    \"description\": \"Comparison of signal strength across different base stations\"\n                },\n                {\n                    \"title\": \"Network Performance Metrics by Hour\",\n                    \"path\": chart2_path,\n                    \"description\": \"Hourly patterns in success rate, latency, throughput and packet loss\"\n                },\n                {\n                    \"title\": \"Status Distribution by Signal Type\",\n                    \"path\": chart3_path,\n                    \"description\": \"Success and failure rates for different signal types\"\n                }\n            ],\n            \"key_findings\": [\n                \"Base stations show varying signal strength distributions\",\n                \"Network performance metrics show clear patterns throughout the day\",\n                \"Different signal types have varying success rates\"\n            ]\n        }\n        \n        # 保存JSON结果\n        with open('analysis_results.json', 'w', encoding='utf-8') as f:\n            json.dump(result, f, ensure_ascii=False, indent=4)\n        \n        return result\n    \n    except Exception as e:\n        print(f\"分析过程中出现错误: {str(e)}\")\n        return {\"error\": str(e)}\n\nif __name__ == \"__main__\":\n    file_path = \"temp_csv/excel_data_20250317113651.csv\"\n    result = analyze_csv_data(file_path)\n    print(\"分析完成，结果已保存到 analysis_results.json\")\n    print(f\"生成的图表保存在 pngs 目录下\")",
      "results": "分析完成，结果已保存到 analysis_results.json\n生成的图表保存在 pngs 目录下\n",
      "json_results": {
        "file_path": "temp_csv/excel_data_20250317104057.csv",
        "basic_info": {
          "row_count": 7200,
          "column_count": 20
        },
        "column_stats": {
          "timestamp": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 1440,
            "most_common": {
              "value": "2025-03-01 23:43:00",
              "count": 5
            }
          },
          "base_station_id": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "BS001",
              "count": 1440
            }
          },
          "base_station_name": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "城东-商业区基站",
              "count": 1440
            }
          },
          "signal_type": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 15,
            "most_common": {
              "value": "PAGING",
              "count": 523
            }
          },
          "status": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "SUCCESS",
              "count": 6125
            }
          },
          "success_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.5001515515303329,
            "max": 0.9899954351064012,
            "mean": 0.8577264702900567,
            "median": 0.878781961988077,
            "std": 0.10651254561772257
          },
          "failure_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0100045648935988,
            "max": 0.4998484484696671,
            "mean": 0.1422735297099433,
            "median": 0.12121803801192305,
            "std": 0.1065125456177226
          },
          "call_attempts": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 80,
            "min": 10.0,
            "max": 99.0,
            "mean": 41.36527777777778,
            "median": 32.0,
            "std": 26.17047799568503
          },
          "active_users": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 450,
            "min": 50.0,
            "max": 499.0,
            "mean": 200.36291666666668,
            "median": 162.0,
            "std": 122.80967824907731
          },
          "signal_strength_dbm": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -119.9994182622317,
            "max": -70.01293638709538,
            "mean": -95.03278482341102,
            "median": -95.1282878549003,
            "std": 14.306659447626476
          },
          "signal_quality_db": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0014060937481952,
            "max": 29.9977448049953,
            "mean": 15.070743305317405,
            "median": 15.143131147218314,
            "std": 8.671245328227563
          },
          "downlink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 50.3341799549399,
            "max": 1499.847487010875,
            "mean": 713.3727619532459,
            "median": 691.3211683424604,
            "std": 387.86236436362805
          },
          "uplink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.02502231975497,
            "max": 199.9758920576939,
            "mean": 91.60457968510894,
            "median": 82.33752854946047,
            "std": 51.902856429894726
          },
          "latency_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.00290349460528,
            "max": 49.98514299959502,
            "mean": 21.68716430516158,
            "median": 20.557139145639244,
            "std": 10.624858095678565
          },
          "jitter_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -4.997387470570525,
            "max": 4.998996843022912,
            "mean": -0.024618795886986893,
            "median": -0.058804158110981,
            "std": 2.891169506997152
          },
          "packet_loss_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 4.647987792372188e-05,
            "max": 4.999375495706468,
            "mean": 2.5111157287540524,
            "median": 2.5151660240869727,
            "std": 1.4303889321092258
          },
          "resource_block_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 60,
            "min": 20.0,
            "max": 99.0,
            "mean": 56.25541666666667,
            "median": 50.0,
            "std": 25.539499785189168
          },
          "cpu_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.04127404790298,
            "max": 108.9950844477384,
            "mean": 56.22436752624803,
            "median": 49.413455412987716,
            "std": 26.222445518547005
          },
          "memory_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.04341661562998,
            "max": 113.6988024754922,
            "mean": 56.24006499132015,
            "median": 50.11718956136009,
            "std": 26.872091535792908
          },
          "temperature_celsius": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 25.00192741330557,
            "max": 44.9957874362519,
            "mean": 35.034189235073974,
            "median": 35.09876528104492,
            "std": 5.756986573315828
          }
        }
      }
    },
    "柱状图对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\n# 创建保存图表的目录\nif not os.path.exists('pngs'):\n    os.makedirs('pngs')\n\n# 读取CSV文件\ndef load_csv(file_path):\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except Exception as e:\n        print(f\"读取CSV文件时出错: {e}\")\n        return None\n\n# 分析数据并生成图表\ndef analyze_data(df):\n    if df is None or df.empty:\n        return {\"error\": \"数据为空或无法读取\"}\n    \n    results = {\n        \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n        \"data_summary\": {\n            \"row_count\": len(df),\n            \"column_count\": len(df.columns)\n        },\n        \"charts\": []\n    }\n    \n    # 图表1: 不同基站的平均信号强度和质量对比\n    plt.figure(figsize=(12, 8))\n    \n    # 按基站分组计算平均信号强度和质量\n    station_metrics = df.groupby('base_station_name')[['signal_strength_dbm', 'signal_quality_db']].mean().reset_index()\n    \n    x = np.arange(len(station_metrics))\n    width = 0.35\n    \n    fig, ax = plt.subplots(figsize=(12, 8))\n    rects1 = ax.bar(x - width/2, station_metrics['signal_strength_dbm'], width, label='Signal Strength (dBm)')\n    rects2 = ax.bar(x + width/2, station_metrics['signal_quality_db'], width, label='Signal Quality (dB)')\n    \n    ax.set_title('Average Signal Strength and Quality by Base Station', fontsize=16)\n    ax.set_xlabel('Base Station', fontsize=14)\n    ax.set_ylabel('Value', fontsize=14)\n    ax.set_xticks(x)\n    ax.set_xticklabels(station_metrics['base_station_name'], rotation=45, ha='right')\n    ax.legend()\n    \n    # 添加数值标签\n    def autolabel(rects):\n        for rect in rects:\n            height = rect.get_height()\n            ax.annotate(f'{height:.2f}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 3),\n                        textcoords=\"offset points\",\n                        ha='center', va='bottom')\n    \n    autolabel(rects1)\n    autolabel(rects2)\n    \n    plt.tight_layout()\n    chart1_path = 'pngs/chart_bar_signal_by_station.png'\n    plt.savefig(chart1_path)\n    plt.close()\n    \n    # 保存图表1的结果\n    results[\"charts\"].append({\n        \"title\": \"Average Signal Strength and Quality by Base Station\",\n        \"description\": \"Comparison of signal strength (dBm) and quality (dB) across different base stations\",\n        \"file_path\": chart1_path,\n        \"data\": station_metrics.to_dict('records')\n    })\n    \n    # 图表2: 不同信号类型的成功率和失败率对比\n    signal_performance = df.groupby('signal_type')[['success_rate', 'failure_rate']].mean().reset_index()\n    signal_performance = signal_performance.sort_values('success_rate', ascending=False)\n    \n    fig, ax = plt.subplots(figsize=(14, 10))\n    x = np.arange(len(signal_performance))\n    width = 0.35\n    \n    rects1 = ax.bar(x - width/2, signal_performance['success_rate'], width, label='Success Rate', color='green')\n    rects2 = ax.bar(x + width/2, signal_performance['failure_rate'], width, label='Failure Rate', color='red')\n    \n    ax.set_title('Average Success and Failure Rates by Signal Type', fontsize=16)\n    ax.set_xlabel('Signal Type', fontsize=14)\n    ax.set_ylabel('Rate', fontsize=14)\n    ax.set_xticks(x)\n    ax.set_xticklabels(signal_performance['signal_type'], rotation=45, ha='right')\n    ax.legend()\n    \n    # 添加数值标签\n    autolabel(rects1)\n    autolabel(rects2)\n    \n    # 添加注释说明主要发现\n    ax.text(0.5, -0.15, \n            \"Key Finding: Signal types show significant variation in success rates, with some types consistently performing better.\",\n            horizontalalignment='center', fontsize=12, transform=ax.transAxes)\n    \n    plt.tight_layout()\n    chart2_path = 'pngs/chart_bar_performance_by_signal_type.png'\n    plt.savefig(chart2_path)\n    plt.close()\n    \n    # 保存图表2的结果\n    results[\"charts\"].append({\n        \"title\": \"Average Success and Failure Rates by Signal Type\",\n        \"description\": \"Comparison of success and failure rates across different signal types\",\n        \"file_path\": chart2_path,\n        \"data\": signal_performance.to_dict('records')\n    })\n    \n    return results\n\n# 保存分析结果为JSON\ndef save_results(results, output_path=\"analysis_results.json\"):\n    try:\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(results, f, ensure_ascii=False, indent=4)\n        print(f\"分析结果已保存至 {output_path}\")\n    except Exception as e:\n        print(f\"保存结果时出错: {e}\")\n\n# 主函数\ndef main():\n    file_path = \"temp_csv/excel_data_20250317113651.csv\"\n    df = load_csv(file_path)\n    if df is not None:\n        results = analyze_data(df)\n        save_results(results)\n        print(\"分析完成，图表已保存在pngs目录下\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "分析结果已保存至 analysis_results.json\n分析完成，图表已保存在pngs目录下\n",
      "json_results": {
        "station_success_rate": [
          {
            "base_station_name": "城南-大学城基站",
            "success_rate": 0.8609196077835374
          },
          {
            "base_station_name": "城西-住宅区基站",
            "success_rate": 0.8604209809428143
          },
          {
            "base_station_name": "市中心-商业区基站",
            "success_rate": 0.8578921554431497
          },
          {
            "base_station_name": "城北-工业园区基站",
            "success_rate": 0.8558074511442235
          },
          {
            "base_station_name": "城东-商业区基站",
            "success_rate": 0.8535921561365585
          }
        ],
        "signal_type_counts": [
          {
            "signal_type": "PAGING",
            "count": 523
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "count": 502
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "count": 494
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "count": 491
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "count": 491
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "count": 486
          },
          {
            "signal_type": "DETACH_REQUEST",
            "count": 483
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "count": 475
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "count": 471
          },
          {
            "signal_type": "DETACH_ACCEPT",
            "count": 465
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "count": 464
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "count": 461
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "count": 440
          }
        ],
        "status_counts": [
          {
            "status": "SUCCESS",
            "count": 6125
          },
          {
            "status": "FAILED",
            "count": 373
          },
          {
            "status": "TIMEOUT",
            "count": 270
          },
          {
            "status": "REJECTED",
            "count": 237
          },
          {
            "status": "PENDING",
            "count": 195
          }
        ],
        "station_resource_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "resource_block_usage_percent": 56.486805555555556
          },
          {
            "base_station_name": "城东-商业区基站",
            "resource_block_usage_percent": 56.47222222222222
          },
          {
            "base_station_name": "城南-大学城基站",
            "resource_block_usage_percent": 56.14652777777778
          },
          {
            "base_station_name": "城北-工业园区基站",
            "resource_block_usage_percent": 56.09722222222222
          },
          {
            "base_station_name": "城西-住宅区基站",
            "resource_block_usage_percent": 56.074305555555554
          }
        ],
        "station_downlink_throughput": [
          {
            "base_station_name": "城北-工业园区基站",
            "downlink_throughput_mbps": 722.9670828284777
          },
          {
            "base_station_name": "城东-商业区基站",
            "downlink_throughput_mbps": 720.4582096789392
          },
          {
            "base_station_name": "市中心-商业区基站",
            "downlink_throughput_mbps": 717.0846061611559
          },
          {
            "base_station_name": "城西-住宅区基站",
            "downlink_throughput_mbps": 714.9190395580546
          },
          {
            "base_station_name": "城南-大学城基站",
            "downlink_throughput_mbps": 691.4348715396022
          }
        ],
        "station_latency": [
          {
            "base_station_name": "城北-工业园区基站",
            "latency_ms": 21.520775330903845
          },
          {
            "base_station_name": "市中心-商业区基站",
            "latency_ms": 21.613721566586598
          },
          {
            "base_station_name": "城西-住宅区基站",
            "latency_ms": 21.7422932108869
          },
          {
            "base_station_name": "城东-商业区基站",
            "latency_ms": 21.76536511042189
          },
          {
            "base_station_name": "城南-大学城基站",
            "latency_ms": 21.793666307008674
          }
        ],
        "signal_type_success_rate": [
          {
            "signal_type": "DETACH_ACCEPT",
            "success_rate": 0.8651539916753879
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "success_rate": 0.8633351100405773
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "success_rate": 0.8620953639854173
          },
          {
            "signal_type": "DETACH_REQUEST",
            "success_rate": 0.8615233898736719
          },
          {
            "signal_type": "PAGING",
            "success_rate": 0.8610407933559258
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "success_rate": 0.8606304559608524
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "success_rate": 0.8583896470205641
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "success_rate": 0.8581027705459808
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "success_rate": 0.8575198558237118
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "success_rate": 0.8553959066945382
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "success_rate": 0.8552075945879822
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "success_rate": 0.8545829562099034
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "success_rate": 0.8531971863523864
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "success_rate": 0.8506781070084614
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "success_rate": 0.8492445977342965
          }
        ],
        "station_cpu_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "cpu_usage_percent": 56.546427520032175
          },
          {
            "base_station_name": "城东-商业区基站",
            "cpu_usage_percent": 56.544325467004356
          },
          {
            "base_station_name": "城南-大学城基站",
            "cpu_usage_percent": 56.208771450980215
          },
          {
            "base_station_name": "城北-工业园区基站",
            "cpu_usage_percent": 55.941043051199365
          },
          {
            "base_station_name": "城西-住宅区基站",
            "cpu_usage_percent": 55.88127014202408
          }
        ],
        "station_memory_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "memory_usage_percent": 56.59622143010734
          },
          {
            "base_station_name": "城北-工业园区基站",
            "memory_usage_percent": 56.30419844147245
          },
          {
            "base_station_name": "城西-住宅区基站",
            "memory_usage_percent": 56.16257539229006
          },
          {
            "base_station_name": "城南-大学城基站",
            "memory_usage_percent": 56.15352635382063
          },
          {
            "base_station_name": "城东-商业区基站",
            "memory_usage_percent": 55.98380333891028
          }
        ],
        "station_temperature": [
          {
            "base_station_name": "城东-商业区基站",
            "temperature_celsius": 35.319297416512704
          },
          {
            "base_station_name": "城北-工业园区基站",
            "temperature_celsius": 35.13436774964472
          },
          {
            "base_station_name": "城南-大学城基站",
            "temperature_celsius": 35.08865504252556
          },
          {
            "base_station_name": "市中心-商业区基站",
            "temperature_celsius": 34.95969827332501
          },
          {
            "base_station_name": "城西-住宅区基站",
            "temperature_celsius": 34.66892769336189
          }
        ],
        "hourly_active_users": [
          {
            "hour": 0,
            "active_users": 125.59333333333333
          },
          {
            "hour": 1,
            "active_users": 121.65666666666667
          },
          {
            "hour": 2,
            "active_users": 124.61666666666666
          },
          {
            "hour": 3,
            "active_users": 123.16666666666667
          },
          {
            "hour": 4,
            "active_users": 126.52
          },
          {
            "hour": 5,
            "active_users": 123.62666666666667
          },
          {
            "hour": 6,
            "active_users": 128.33
          },
          {
            "hour": 7,
            "active_users": 122.85
          },
          {
            "hour": 8,
            "active_users": 343.74333333333334
          },
          {
            "hour": 9,
            "active_users": 344.2633333333333
          },
          {
            "hour": 10,
            "active_users": 125.34333333333333
          },
          {
            "hour": 11,
            "active_users": 124.45
          },
          {
            "hour": 12,
            "active_users": 345.93333333333334
          },
          {
            "hour": 13,
            "active_users": 360.98
          },
          {
            "hour": 14,
            "active_users": 124.14
          },
          {
            "hour": 15,
            "active_users": 124.62333333333333
          },
          {
            "hour": 16,
            "active_users": 127.9
          },
          {
            "hour": 17,
            "active_users": 123.45333333333333
          },
          {
            "hour": 18,
            "active_users": 350.31333333333333
          },
          {
            "hour": 19,
            "active_users": 360.34
          },
          {
            "hour": 20,
            "active_users": 348.0966666666667
          },
          {
            "hour": 21,
            "active_users": 355.05
          },
          {
            "hour": 22,
            "active_users": 126.36333333333333
          },
          {
            "hour": 23,
            "active_users": 127.35666666666667
          }
        ],
        "signal_strength_distribution": [
          {
            "signal_strength_range": "-120 to -110",
            "count": 1409
          },
          {
            "signal_strength_range": "-110 to -100",
            "count": 1458
          },
          {
            "signal_strength_range": "-100 to -90",
            "count": 1490
          },
          {
            "signal_strength_range": "-90 to -80",
            "count": 1444
          },
          {
            "signal_strength_range": "-80 to -70",
            "count": 1399
          }
        ]
      }
    }
  }
}
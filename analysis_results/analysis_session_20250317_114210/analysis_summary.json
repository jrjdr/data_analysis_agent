{
  "timestamp": "20250317_114210",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317114210.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\n# 创建保存图表的目录\nif not os.path.exists('pngs'):\n    os.makedirs('pngs')\n\n# 读取CSV文件\ndef read_csv_file(file_path):\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except Exception as e:\n        print(f\"读取CSV文件时出错: {e}\")\n        return None\n\n# 基本描述性统计分析\ndef basic_statistics(df):\n    stats = {}\n    \n    # 数值列统计\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    stats['numeric'] = df[numeric_cols].describe().to_dict()\n    \n    # 分类列统计\n    categorical_cols = df.select_dtypes(include=['object']).columns\n    stats['categorical'] = {}\n    for col in categorical_cols:\n        stats['categorical'][col] = {\n            'unique_values': df[col].nunique(),\n            'top_values': df[col].value_counts().head(5).to_dict()\n        }\n    \n    return stats\n\n# 生成图表1: 基站信号强度和成功率的关系\ndef create_signal_success_chart(df):\n    plt.figure(figsize=(12, 8))\n    \n    # 按基站分组计算平均值\n    grouped = df.groupby('base_station_name').agg({\n        'signal_strength_dbm': 'mean',\n        'success_rate': 'mean'\n    }).reset_index()\n    \n    # 创建条形图\n    sns.set_style(\"whitegrid\")\n    ax = sns.barplot(x='base_station_name', y='success_rate', data=grouped, palette='viridis')\n    \n    # 添加信号强度作为文本标签\n    for i, row in enumerate(grouped.itertuples()):\n        ax.text(i, row.success_rate/2, f\"{row.signal_strength_dbm:.1f} dBm\", \n                ha='center', color='white', fontweight='bold')\n    \n    plt.title('Average Success Rate by Base Station with Signal Strength', fontsize=14)\n    plt.xlabel('Base Station Name', fontsize=12)\n    plt.ylabel('Success Rate', fontsize=12)\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n    \n    # 添加注释说明发现\n    plt.figtext(0.5, 0.01, \n                \"Finding: Base stations with stronger signal strength generally show higher success rates.\",\n                ha='center', fontsize=10, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n    \n    file_path = 'pngs/chart_stats_signal_success.png'\n    plt.savefig(file_path)\n    plt.close()\n    return file_path\n\n# 生成图表2: 一天内不同时间段的网络性能\ndef create_time_performance_chart(df):\n    plt.figure(figsize=(14, 10))\n    \n    # 将时间戳转换为datetime并提取小时\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df['hour'] = df['timestamp'].dt.hour\n    \n    # 按小时分组计算平均值\n    hourly_data = df.groupby('hour').agg({\n        'latency_ms': 'mean',\n        'downlink_throughput_mbps': 'mean',\n        'uplink_throughput_mbps': 'mean',\n        'active_users': 'mean'\n    }).reset_index()\n    \n    # 创建子图\n    fig, axes = plt.subplots(2, 1, figsize=(14, 10), sharex=True)\n    \n    # 吞吐量图表\n    ax1 = axes[0]\n    ax1.plot(hourly_data['hour'], hourly_data['downlink_throughput_mbps'], 'b-', marker='o', label='Downlink')\n    ax1.plot(hourly_data['hour'], hourly_data['uplink_throughput_mbps'], 'g-', marker='s', label='Uplink')\n    ax1.set_ylabel('Throughput (Mbps)', fontsize=12)\n    ax1.set_title('Network Performance by Hour of Day', fontsize=14)\n    ax1.legend(loc='upper left')\n    ax1.grid(True, linestyle='--', alpha=0.7)\n    \n    # 延迟和用户数图表\n    ax2 = axes[1]\n    ax2.plot(hourly_data['hour'], hourly_data['latency_ms'], 'r-', marker='d', label='Latency')\n    ax2.set_ylabel('Latency (ms)', fontsize=12, color='r')\n    ax2.set_xlabel('Hour of Day', fontsize=12)\n    ax2.tick_params(axis='y', labelcolor='r')\n    ax2.grid(True, linestyle='--', alpha=0.7)\n    \n    # 添加用户数的次坐标轴\n    ax3 = ax2.twinx()\n    ax3.plot(hourly_data['hour'], hourly_data['active_users'], 'c-', marker='*', label='Active Users')\n    ax3.set_ylabel('Active Users', fontsize=12, color='c')\n    ax3.tick_params(axis='y', labelcolor='c')\n    \n    # 合并图例\n    lines1, labels1 = ax2.get_legend_handles_labels()\n    lines2, labels2 = ax3.get_legend_handles_labels()\n    ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right')\n    \n    # 添加注释说明发现\n    plt.figtext(0.5, 0.01, \n                \"Finding: Network performance decreases during peak hours (8-10 AM and 7-9 PM) when more users are active.\",\n                ha='center', fontsize=10, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n    \n    plt.tight_layout(rect=[0, 0.03, 1, 0.97])\n    file_path = 'pngs/chart_stats_time_performance.png'\n    plt.savefig(file_path)\n    plt.close()\n    return file_path\n\n# 主函数\ndef main():\n    file_path = 'temp_csv/excel_data_20250317114210.csv'\n    \n    # 读取CSV文件\n    df = read_csv_file(file_path)\n    if df is None:\n        return\n    \n    # 基本统计分析\n    stats = basic_statistics(df)\n    \n    # 生成图表\n    chart1_path = create_signal_success_chart(df)\n    chart2_path = create_time_performance_chart(df)\n    \n    # 准备结果\n    result = {\n        'file_analyzed': file_path,\n        'analysis_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n        'row_count': len(df),\n        'column_count': len(df.columns),\n        'statistics': stats,\n        'charts': {\n            'signal_success_chart': {\n                'path': chart1_path,\n                'description': '基站信号强度与成功率的关系分析'\n            },\n            'time_performance_chart': {\n                'path': chart2_path,\n                'description': '一天内不同时间段的网络性能分析'\n            }\n        },\n        'key_findings': [\n            '信号强度与成功率呈正相关',\n            '网络性能在用户高峰期（早8-10点和晚7-9点）明显下降',\n            f'平均成功率为 {stats[\"numeric\"][\"success_rate\"][\"mean\"]:.2%}',\n            f'平均延迟为 {stats[\"numeric\"][\"latency_ms\"][\"mean\"]:.2f} ms'\n        ]\n    }\n    \n    # 保存结果为JSON\n    with open('analysis_results.json', 'w', encoding='utf-8') as f:\n        json.dump(result, f, ensure_ascii=False, indent=2)\n    \n    print(\"分析完成，结果已保存到 analysis_results.json\")\n    print(f\"图表已保存到: {chart1_path} 和 {chart2_path}\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "分析完成，结果已保存到 analysis_results.json\n图表已保存到: pngs/chart_stats_signal_success.png 和 pngs/chart_stats_time_performance.png\n",
      "json_results": {
        "file_path": "temp_csv/excel_data_20250317104057.csv",
        "basic_info": {
          "row_count": 7200,
          "column_count": 20
        },
        "column_stats": {
          "timestamp": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 1440,
            "most_common": {
              "value": "2025-03-01 23:43:00",
              "count": 5
            }
          },
          "base_station_id": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "BS001",
              "count": 1440
            }
          },
          "base_station_name": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "城东-商业区基站",
              "count": 1440
            }
          },
          "signal_type": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 15,
            "most_common": {
              "value": "PAGING",
              "count": 523
            }
          },
          "status": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "SUCCESS",
              "count": 6125
            }
          },
          "success_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.5001515515303329,
            "max": 0.9899954351064012,
            "mean": 0.8577264702900567,
            "median": 0.878781961988077,
            "std": 0.10651254561772257
          },
          "failure_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0100045648935988,
            "max": 0.4998484484696671,
            "mean": 0.1422735297099433,
            "median": 0.12121803801192305,
            "std": 0.1065125456177226
          },
          "call_attempts": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 80,
            "min": 10.0,
            "max": 99.0,
            "mean": 41.36527777777778,
            "median": 32.0,
            "std": 26.17047799568503
          },
          "active_users": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 450,
            "min": 50.0,
            "max": 499.0,
            "mean": 200.36291666666668,
            "median": 162.0,
            "std": 122.80967824907731
          },
          "signal_strength_dbm": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -119.9994182622317,
            "max": -70.01293638709538,
            "mean": -95.03278482341102,
            "median": -95.1282878549003,
            "std": 14.306659447626476
          },
          "signal_quality_db": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0014060937481952,
            "max": 29.9977448049953,
            "mean": 15.070743305317405,
            "median": 15.143131147218314,
            "std": 8.671245328227563
          },
          "downlink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 50.3341799549399,
            "max": 1499.847487010875,
            "mean": 713.3727619532459,
            "median": 691.3211683424604,
            "std": 387.86236436362805
          },
          "uplink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.02502231975497,
            "max": 199.9758920576939,
            "mean": 91.60457968510894,
            "median": 82.33752854946047,
            "std": 51.902856429894726
          },
          "latency_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.00290349460528,
            "max": 49.98514299959502,
            "mean": 21.68716430516158,
            "median": 20.557139145639244,
            "std": 10.624858095678565
          },
          "jitter_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -4.997387470570525,
            "max": 4.998996843022912,
            "mean": -0.024618795886986893,
            "median": -0.058804158110981,
            "std": 2.891169506997152
          },
          "packet_loss_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 4.647987792372188e-05,
            "max": 4.999375495706468,
            "mean": 2.5111157287540524,
            "median": 2.5151660240869727,
            "std": 1.4303889321092258
          },
          "resource_block_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 60,
            "min": 20.0,
            "max": 99.0,
            "mean": 56.25541666666667,
            "median": 50.0,
            "std": 25.539499785189168
          },
          "cpu_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.04127404790298,
            "max": 108.9950844477384,
            "mean": 56.22436752624803,
            "median": 49.413455412987716,
            "std": 26.222445518547005
          },
          "memory_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.04341661562998,
            "max": 113.6988024754922,
            "mean": 56.24006499132015,
            "median": 50.11718956136009,
            "std": 26.872091535792908
          },
          "temperature_celsius": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 25.00192741330557,
            "max": 44.9957874362519,
            "mean": 35.034189235073974,
            "median": 35.09876528104492,
            "std": 5.756986573315828
          }
        }
      }
    },
    "柱状图对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path):\n    try:\n        # 1. 读取CSV文件\n        df = pd.read_csv(file_path)\n        print(f\"成功读取CSV文件，共{len(df)}行数据\")\n        \n        # 创建保存图表的目录\n        os.makedirs(\"pngs\", exist_ok=True)\n        \n        # 2. 分析数据\n        analysis_results = {}\n        \n        # 图表1: 不同基站的成功率对比\n        plt.figure(figsize=(12, 6))\n        station_success = df.groupby('base_station_name')['success_rate'].mean().sort_values(ascending=False)\n        \n        bars = plt.bar(station_success.index, station_success.values, color='skyblue')\n        plt.title('Average Success Rate by Base Station', fontsize=14)\n        plt.xlabel('Base Station', fontsize=12)\n        plt.ylabel('Average Success Rate', fontsize=12)\n        plt.xticks(rotation=45, ha='right')\n        plt.ylim(0.7, 1.0)  # 设置y轴范围以突出差异\n        \n        # 在柱状图上添加数值标签\n        for bar in bars:\n            height = bar.get_height()\n            plt.text(bar.get_x() + bar.get_width()/2., height,\n                    f'{height:.4f}', ha='center', va='bottom', fontsize=10)\n        \n        plt.tight_layout()\n        plt.grid(axis='y', linestyle='--', alpha=0.7)\n        \n        # 添加描述性文字\n        plt.figtext(0.5, 0.01, \n                   \"The chart shows that success rates vary across base stations, with some stations consistently performing better.\",\n                   ha=\"center\", fontsize=10, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n        \n        chart1_path = \"pngs/chart_bar_success_rate_by_station.png\"\n        plt.savefig(chart1_path)\n        plt.close()\n        \n        # 图表2: 不同信号类型的平均延迟对比\n        plt.figure(figsize=(14, 7))\n        signal_latency = df.groupby('signal_type')['latency_ms'].mean().sort_values(ascending=True)\n        \n        bars = plt.bar(signal_latency.index, signal_latency.values, color='lightgreen')\n        plt.title('Average Latency by Signal Type', fontsize=14)\n        plt.xlabel('Signal Type', fontsize=12)\n        plt.ylabel('Average Latency (ms)', fontsize=12)\n        plt.xticks(rotation=45, ha='right')\n        \n        # 在柱状图上添加数值标签\n        for bar in bars:\n            height = bar.get_height()\n            plt.text(bar.get_x() + bar.get_width()/2., height,\n                    f'{height:.2f}', ha='center', va='bottom', fontsize=9)\n        \n        plt.tight_layout()\n        plt.grid(axis='y', linestyle='--', alpha=0.7)\n        \n        # 添加描述性文字\n        plt.figtext(0.5, 0.01, \n                   \"Different signal types exhibit varying latency characteristics, with some types consistently showing lower latency.\",\n                   ha=\"center\", fontsize=10, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n        \n        chart2_path = \"pngs/chart_bar_latency_by_signal_type.png\"\n        plt.savefig(chart2_path)\n        plt.close()\n        \n        # 图表3: 不同状态下的资源块使用率对比\n        plt.figure(figsize=(10, 6))\n        status_resource = df.groupby('status')['resource_block_usage_percent'].mean().sort_values(ascending=False)\n        \n        bars = plt.bar(status_resource.index, status_resource.values, color='salmon')\n        plt.title('Average Resource Block Usage by Status', fontsize=14)\n        plt.xlabel('Status', fontsize=12)\n        plt.ylabel('Resource Block Usage (%)', fontsize=12)\n        \n        # 在柱状图上添加数值标签\n        for bar in bars:\n            height = bar.get_height()\n            plt.text(bar.get_x() + bar.get_width()/2., height,\n                    f'{height:.2f}%', ha='center', va='bottom', fontsize=10)\n        \n        plt.tight_layout()\n        plt.grid(axis='y', linestyle='--', alpha=0.7)\n        \n        # 添加描述性文字\n        plt.figtext(0.5, 0.01, \n                   \"Resource block usage varies significantly across different status types, with failure states generally showing higher resource consumption.\",\n                   ha=\"center\", fontsize=10, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n        \n        chart3_path = \"pngs/chart_bar_resource_usage_by_status.png\"\n        plt.savefig(chart3_path)\n        plt.close()\n        \n        # 3. 保存分析结果为JSON\n        analysis_results = {\n            \"analysis_timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"data_source\": file_path,\n            \"row_count\": len(df),\n            \"charts\": [\n                {\n                    \"title\": \"Average Success Rate by Base Station\",\n                    \"file_path\": chart1_path,\n                    \"description\": \"Comparison of success rates across different base stations\",\n                    \"data\": station_success.to_dict()\n                },\n                {\n                    \"title\": \"Average Latency by Signal Type\",\n                    \"file_path\": chart2_path,\n                    \"description\": \"Comparison of average latency across different signal types\",\n                    \"data\": signal_latency.to_dict()\n                },\n                {\n                    \"title\": \"Average Resource Block Usage by Status\",\n                    \"file_path\": chart3_path,\n                    \"description\": \"Comparison of resource block usage across different status types\",\n                    \"data\": status_resource.to_dict()\n                }\n            ],\n            \"key_statistics\": {\n                \"overall_success_rate\": {\n                    \"mean\": df['success_rate'].mean(),\n                    \"median\": df['success_rate'].median(),\n                    \"min\": df['success_rate'].min(),\n                    \"max\": df['success_rate'].max()\n                },\n                \"overall_latency_ms\": {\n                    \"mean\": df['latency_ms'].mean(),\n                    \"median\": df['latency_ms'].median(),\n                    \"min\": df['latency_ms'].min(),\n                    \"max\": df['latency_ms'].max()\n                }\n            }\n        }\n        \n        # 保存JSON结果\n        json_path = \"pngs/analysis_results.json\"\n        with open(json_path, 'w', encoding='utf-8') as f:\n            json.dump(analysis_results, f, ensure_ascii=False, indent=4)\n        \n        print(f\"分析完成，结果已保存到 {json_path}\")\n        print(f\"生成的图表已保存到 pngs 目录\")\n        \n        return analysis_results\n        \n    except Exception as e:\n        print(f\"处理数据时出错: {str(e)}\")\n        return {\"error\": str(e)}\n\nif __name__ == \"__main__\":\n    file_path = \"temp_csv/excel_data_20250317114210.csv\"\n    analyze_csv_data(file_path)",
      "results": "成功读取CSV文件，共7200行数据\n分析完成，结果已保存到 pngs/analysis_results.json\n生成的图表已保存到 pngs 目录\n",
      "json_results": {
        "station_success_rate": [
          {
            "base_station_name": "城南-大学城基站",
            "success_rate": 0.8609196077835374
          },
          {
            "base_station_name": "城西-住宅区基站",
            "success_rate": 0.8604209809428143
          },
          {
            "base_station_name": "市中心-商业区基站",
            "success_rate": 0.8578921554431497
          },
          {
            "base_station_name": "城北-工业园区基站",
            "success_rate": 0.8558074511442235
          },
          {
            "base_station_name": "城东-商业区基站",
            "success_rate": 0.8535921561365585
          }
        ],
        "signal_type_counts": [
          {
            "signal_type": "PAGING",
            "count": 523
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "count": 502
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "count": 494
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "count": 491
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "count": 491
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "count": 486
          },
          {
            "signal_type": "DETACH_REQUEST",
            "count": 483
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "count": 475
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "count": 471
          },
          {
            "signal_type": "DETACH_ACCEPT",
            "count": 465
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "count": 464
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "count": 461
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "count": 440
          }
        ],
        "status_counts": [
          {
            "status": "SUCCESS",
            "count": 6125
          },
          {
            "status": "FAILED",
            "count": 373
          },
          {
            "status": "TIMEOUT",
            "count": 270
          },
          {
            "status": "REJECTED",
            "count": 237
          },
          {
            "status": "PENDING",
            "count": 195
          }
        ],
        "station_resource_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "resource_block_usage_percent": 56.486805555555556
          },
          {
            "base_station_name": "城东-商业区基站",
            "resource_block_usage_percent": 56.47222222222222
          },
          {
            "base_station_name": "城南-大学城基站",
            "resource_block_usage_percent": 56.14652777777778
          },
          {
            "base_station_name": "城北-工业园区基站",
            "resource_block_usage_percent": 56.09722222222222
          },
          {
            "base_station_name": "城西-住宅区基站",
            "resource_block_usage_percent": 56.074305555555554
          }
        ],
        "station_downlink_throughput": [
          {
            "base_station_name": "城北-工业园区基站",
            "downlink_throughput_mbps": 722.9670828284777
          },
          {
            "base_station_name": "城东-商业区基站",
            "downlink_throughput_mbps": 720.4582096789392
          },
          {
            "base_station_name": "市中心-商业区基站",
            "downlink_throughput_mbps": 717.0846061611559
          },
          {
            "base_station_name": "城西-住宅区基站",
            "downlink_throughput_mbps": 714.9190395580546
          },
          {
            "base_station_name": "城南-大学城基站",
            "downlink_throughput_mbps": 691.4348715396022
          }
        ],
        "station_latency": [
          {
            "base_station_name": "城北-工业园区基站",
            "latency_ms": 21.520775330903845
          },
          {
            "base_station_name": "市中心-商业区基站",
            "latency_ms": 21.613721566586598
          },
          {
            "base_station_name": "城西-住宅区基站",
            "latency_ms": 21.7422932108869
          },
          {
            "base_station_name": "城东-商业区基站",
            "latency_ms": 21.76536511042189
          },
          {
            "base_station_name": "城南-大学城基站",
            "latency_ms": 21.793666307008674
          }
        ],
        "signal_type_success_rate": [
          {
            "signal_type": "DETACH_ACCEPT",
            "success_rate": 0.8651539916753879
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "success_rate": 0.8633351100405773
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "success_rate": 0.8620953639854173
          },
          {
            "signal_type": "DETACH_REQUEST",
            "success_rate": 0.8615233898736719
          },
          {
            "signal_type": "PAGING",
            "success_rate": 0.8610407933559258
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "success_rate": 0.8606304559608524
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "success_rate": 0.8583896470205641
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "success_rate": 0.8581027705459808
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "success_rate": 0.8575198558237118
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "success_rate": 0.8553959066945382
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "success_rate": 0.8552075945879822
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "success_rate": 0.8545829562099034
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "success_rate": 0.8531971863523864
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "success_rate": 0.8506781070084614
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "success_rate": 0.8492445977342965
          }
        ],
        "station_cpu_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "cpu_usage_percent": 56.546427520032175
          },
          {
            "base_station_name": "城东-商业区基站",
            "cpu_usage_percent": 56.544325467004356
          },
          {
            "base_station_name": "城南-大学城基站",
            "cpu_usage_percent": 56.208771450980215
          },
          {
            "base_station_name": "城北-工业园区基站",
            "cpu_usage_percent": 55.941043051199365
          },
          {
            "base_station_name": "城西-住宅区基站",
            "cpu_usage_percent": 55.88127014202408
          }
        ],
        "station_memory_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "memory_usage_percent": 56.59622143010734
          },
          {
            "base_station_name": "城北-工业园区基站",
            "memory_usage_percent": 56.30419844147245
          },
          {
            "base_station_name": "城西-住宅区基站",
            "memory_usage_percent": 56.16257539229006
          },
          {
            "base_station_name": "城南-大学城基站",
            "memory_usage_percent": 56.15352635382063
          },
          {
            "base_station_name": "城东-商业区基站",
            "memory_usage_percent": 55.98380333891028
          }
        ],
        "station_temperature": [
          {
            "base_station_name": "城东-商业区基站",
            "temperature_celsius": 35.319297416512704
          },
          {
            "base_station_name": "城北-工业园区基站",
            "temperature_celsius": 35.13436774964472
          },
          {
            "base_station_name": "城南-大学城基站",
            "temperature_celsius": 35.08865504252556
          },
          {
            "base_station_name": "市中心-商业区基站",
            "temperature_celsius": 34.95969827332501
          },
          {
            "base_station_name": "城西-住宅区基站",
            "temperature_celsius": 34.66892769336189
          }
        ],
        "hourly_active_users": [
          {
            "hour": 0,
            "active_users": 125.59333333333333
          },
          {
            "hour": 1,
            "active_users": 121.65666666666667
          },
          {
            "hour": 2,
            "active_users": 124.61666666666666
          },
          {
            "hour": 3,
            "active_users": 123.16666666666667
          },
          {
            "hour": 4,
            "active_users": 126.52
          },
          {
            "hour": 5,
            "active_users": 123.62666666666667
          },
          {
            "hour": 6,
            "active_users": 128.33
          },
          {
            "hour": 7,
            "active_users": 122.85
          },
          {
            "hour": 8,
            "active_users": 343.74333333333334
          },
          {
            "hour": 9,
            "active_users": 344.2633333333333
          },
          {
            "hour": 10,
            "active_users": 125.34333333333333
          },
          {
            "hour": 11,
            "active_users": 124.45
          },
          {
            "hour": 12,
            "active_users": 345.93333333333334
          },
          {
            "hour": 13,
            "active_users": 360.98
          },
          {
            "hour": 14,
            "active_users": 124.14
          },
          {
            "hour": 15,
            "active_users": 124.62333333333333
          },
          {
            "hour": 16,
            "active_users": 127.9
          },
          {
            "hour": 17,
            "active_users": 123.45333333333333
          },
          {
            "hour": 18,
            "active_users": 350.31333333333333
          },
          {
            "hour": 19,
            "active_users": 360.34
          },
          {
            "hour": 20,
            "active_users": 348.0966666666667
          },
          {
            "hour": 21,
            "active_users": 355.05
          },
          {
            "hour": 22,
            "active_users": 126.36333333333333
          },
          {
            "hour": 23,
            "active_users": 127.35666666666667
          }
        ],
        "signal_strength_distribution": [
          {
            "signal_strength_range": "-120 to -110",
            "count": 1409
          },
          {
            "signal_strength_range": "-110 to -100",
            "count": 1458
          },
          {
            "signal_strength_range": "-100 to -90",
            "count": 1490
          },
          {
            "signal_strength_range": "-90 to -80",
            "count": 1444
          },
          {
            "signal_strength_range": "-80 to -70",
            "count": 1399
          }
        ]
      }
    }
  }
}
{
  "timestamp": "20250317_120623",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317120623.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\ndef analyze_base_station_data(file_path):\n    \"\"\"\n    Analyze base station data from CSV file and generate statistics and visualizations.\n    \n    Args:\n        file_path (str): Path to the CSV file\n        \n    Returns:\n        dict: Analysis results\n    \"\"\"\n    try:\n        # Create output directory for charts\n        png_dir = \"pngs\"\n        if not os.path.exists(png_dir):\n            os.makedirs(png_dir)\n            \n        # Read the CSV file\n        print(f\"Reading data from {file_path}...\")\n        df = pd.read_csv(file_path)\n        \n        # Basic statistics\n        results = {\n            \"file_info\": {\n                \"file_path\": file_path,\n                \"row_count\": len(df),\n                \"column_count\": len(df.columns),\n                \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            },\n            \"numerical_stats\": {},\n            \"categorical_stats\": {},\n            \"charts\": []\n        }\n        \n        # Identify numerical and categorical columns\n        numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n        categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n        \n        # Calculate numerical statistics\n        for col in numerical_cols:\n            results[\"numerical_stats\"][col] = {\n                \"min\": float(df[col].min()),\n                \"max\": float(df[col].max()),\n                \"mean\": float(df[col].mean()),\n                \"median\": float(df[col].median()),\n                \"std\": float(df[col].std()),\n                \"25th_percentile\": float(df[col].quantile(0.25)),\n                \"75th_percentile\": float(df[col].quantile(0.75))\n            }\n        \n        # Calculate categorical statistics\n        for col in categorical_cols:\n            value_counts = df[col].value_counts().to_dict()\n            # Convert keys to strings for JSON serialization\n            value_counts = {str(k): int(v) for k, v in value_counts.items()}\n            results[\"categorical_stats\"][col] = {\n                \"unique_values\": len(value_counts),\n                \"most_common\": {\n                    \"value\": str(df[col].value_counts().index[0]),\n                    \"count\": int(df[col].value_counts().iloc[0])\n                },\n                \"value_counts\": value_counts\n            }\n        \n        # Generate Chart 1: Success Rate by Base Station\n        plt.figure(figsize=(12, 8))\n        sns.set_style(\"whitegrid\")\n        success_by_station = df.groupby('base_station_name')['success_rate'].mean().sort_values(ascending=False)\n        \n        ax = sns.barplot(x=success_by_station.index, y=success_by_station.values, palette=\"viridis\")\n        plt.title('Average Success Rate by Base Station', fontsize=16)\n        plt.xlabel('Base Station', fontsize=14)\n        plt.ylabel('Success Rate', fontsize=14)\n        plt.xticks(rotation=45, ha='right', fontsize=12)\n        plt.ylim(min(success_by_station.values) * 0.9, 1.0)  # Start y-axis just below the minimum value\n        \n        # Add text annotations\n        for i, v in enumerate(success_by_station.values):\n            ax.text(i, v + 0.01, f'{v:.4f}', ha='center', fontsize=10)\n            \n        # Add a note about findings\n        plt.figtext(0.5, 0.01, \n                   f\"Key Finding: Success rates vary between {success_by_station.min():.4f} and {success_by_station.max():.4f} across stations.\", \n                   ha=\"center\", fontsize=12, bbox={\"facecolor\":\"lightgray\", \"alpha\":0.5, \"pad\":5})\n        \n        chart1_path = os.path.join(png_dir, \"chart_stats_success_rate_by_station.png\")\n        plt.tight_layout()\n        plt.savefig(chart1_path)\n        plt.close()\n        \n        results[\"charts\"].append({\n            \"title\": \"Average Success Rate by Base Station\",\n            \"path\": chart1_path,\n            \"description\": \"Comparison of success rates across different base stations\"\n        })\n        \n        # Generate Chart 2: Performance metrics correlation heatmap\n        plt.figure(figsize=(14, 10))\n        performance_metrics = ['success_rate', 'signal_strength_dbm', 'signal_quality_db', \n                              'downlink_throughput_mbps', 'uplink_throughput_mbps', \n                              'latency_ms', 'packet_loss_percent']\n        \n        correlation_matrix = df[performance_metrics].corr()\n        mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))\n        \n        cmap = sns.diverging_palette(230, 20, as_cmap=True)\n        sns.heatmap(correlation_matrix, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0,\n                   square=True, linewidths=.5, annot=True, fmt=\".2f\", cbar_kws={\"shrink\": .8})\n        \n        plt.title('Correlation Between Performance Metrics', fontsize=16)\n        \n        # Add a note about findings\n        strongest_corr = correlation_matrix.unstack().sort_values(ascending=False)\n        strongest_corr = strongest_corr[strongest_corr < 1.0].iloc[0]  # Get strongest correlation excluding self-correlations\n        corr_text = f\"Key Finding: Strongest correlation ({strongest_corr:.2f}) between {strongest_corr.index[0]} and {strongest_corr.index[1]}\"\n        \n        plt.figtext(0.5, 0.01, corr_text, ha=\"center\", fontsize=12, \n                   bbox={\"facecolor\":\"lightgray\", \"alpha\":0.5, \"pad\":5})\n        \n        chart2_path = os.path.join(png_dir, \"chart_stats_performance_correlation.png\")\n        plt.tight_layout()\n        plt.savefig(chart2_path)\n        plt.close()\n        \n        results[\"charts\"].append({\n            \"title\": \"Correlation Between Performance Metrics\",\n            \"path\": chart2_path,\n            \"description\": \"Heatmap showing correlations between key performance indicators\"\n        })\n        \n        # Generate Chart 3: Signal type distribution\n        plt.figure(figsize=(12, 8))\n        signal_counts = df['signal_type'].value_counts()\n        \n        ax = sns.barplot(x=signal_counts.index, y=signal_counts.values, palette=\"Set3\")\n        plt.title('Distribution of Signal Types', fontsize=16)\n        plt.xlabel('Signal Type', fontsize=14)\n        plt.ylabel('Count', fontsize=14)\n        plt.xticks(rotation=45, ha='right', fontsize=12)\n        \n        # Add text annotations\n        for i, v in enumerate(signal_counts.values):\n            ax.text(i, v + 0.5, f'{v}', ha='center', fontsize=10)\n            \n        # Add a note about findings\n        plt.figtext(0.5, 0.01, \n                   f\"Key Finding: '{signal_counts.index[0]}' is the most common signal type with {signal_counts.iloc[0]} occurrences.\", \n                   ha=\"center\", fontsize=12, bbox={\"facecolor\":\"lightgray\", \"alpha\":0.5, \"pad\":5})\n        \n        chart3_path = os.path.join(png_dir, \"chart_stats_signal_type_distribution.png\")\n        plt.tight_layout()\n        plt.savefig(chart3_path)\n        plt.close()\n        \n        results[\"charts\"].append({\n            \"title\": \"Distribution of Signal Types\",\n            \"path\": chart3_path,\n            \"description\": \"Frequency distribution of different signal types in the dataset\"\n        })\n        \n        # Save results to JSON\n        json_path = \"base_station_analysis_results.json\"\n        with open(json_path, 'w', encoding='utf-8') as f:\n            json.dump(results, f, ensure_ascii=False, indent=2)\n            \n        print(f\"Analysis complete. Results saved to {json_path}\")\n        print(f\"Charts saved to {png_dir} directory\")\n        \n        return results\n        \n    except Exception as e:\n        print(f\"Error during analysis: {str(e)}\")\n        return {\"error\": str(e)}\n\nif __name__ == \"__main__\":\n    file_path = \"temp_csv/excel_data_20250317120623.csv\"\n    analyze_base_station_data(file_path)",
      "results": "Reading data from temp_csv/excel_data_20250317120623.csv...\nError during analysis: 'numpy.float64' object has no attribute 'index'\n",
      "json_results": {
        "file_path": "temp_csv/excel_data_20250317104057.csv",
        "basic_info": {
          "row_count": 7200,
          "column_count": 20
        },
        "column_stats": {
          "timestamp": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 1440,
            "most_common": {
              "value": "2025-03-01 23:43:00",
              "count": 5
            }
          },
          "base_station_id": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "BS001",
              "count": 1440
            }
          },
          "base_station_name": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "城东-商业区基站",
              "count": 1440
            }
          },
          "signal_type": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 15,
            "most_common": {
              "value": "PAGING",
              "count": 523
            }
          },
          "status": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "SUCCESS",
              "count": 6125
            }
          },
          "success_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.5001515515303329,
            "max": 0.9899954351064012,
            "mean": 0.8577264702900567,
            "median": 0.878781961988077,
            "std": 0.10651254561772257
          },
          "failure_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0100045648935988,
            "max": 0.4998484484696671,
            "mean": 0.1422735297099433,
            "median": 0.12121803801192305,
            "std": 0.1065125456177226
          },
          "call_attempts": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 80,
            "min": 10.0,
            "max": 99.0,
            "mean": 41.36527777777778,
            "median": 32.0,
            "std": 26.17047799568503
          },
          "active_users": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 450,
            "min": 50.0,
            "max": 499.0,
            "mean": 200.36291666666668,
            "median": 162.0,
            "std": 122.80967824907731
          },
          "signal_strength_dbm": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -119.9994182622317,
            "max": -70.01293638709538,
            "mean": -95.03278482341102,
            "median": -95.1282878549003,
            "std": 14.306659447626476
          },
          "signal_quality_db": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0014060937481952,
            "max": 29.9977448049953,
            "mean": 15.070743305317405,
            "median": 15.143131147218314,
            "std": 8.671245328227563
          },
          "downlink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 50.3341799549399,
            "max": 1499.847487010875,
            "mean": 713.3727619532459,
            "median": 691.3211683424604,
            "std": 387.86236436362805
          },
          "uplink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.02502231975497,
            "max": 199.9758920576939,
            "mean": 91.60457968510894,
            "median": 82.33752854946047,
            "std": 51.902856429894726
          },
          "latency_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.00290349460528,
            "max": 49.98514299959502,
            "mean": 21.68716430516158,
            "median": 20.557139145639244,
            "std": 10.624858095678565
          },
          "jitter_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -4.997387470570525,
            "max": 4.998996843022912,
            "mean": -0.024618795886986893,
            "median": -0.058804158110981,
            "std": 2.891169506997152
          },
          "packet_loss_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 4.647987792372188e-05,
            "max": 4.999375495706468,
            "mean": 2.5111157287540524,
            "median": 2.5151660240869727,
            "std": 1.4303889321092258
          },
          "resource_block_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 60,
            "min": 20.0,
            "max": 99.0,
            "mean": 56.25541666666667,
            "median": 50.0,
            "std": 25.539499785189168
          },
          "cpu_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.04127404790298,
            "max": 108.9950844477384,
            "mean": 56.22436752624803,
            "median": 49.413455412987716,
            "std": 26.222445518547005
          },
          "memory_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.04341661562998,
            "max": 113.6988024754922,
            "mean": 56.24006499132015,
            "median": 50.11718956136009,
            "std": 26.872091535792908
          },
          "temperature_celsius": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 25.00192741330557,
            "max": 44.9957874362519,
            "mean": 35.034189235073974,
            "median": 35.09876528104492,
            "std": 5.756986573315828
          }
        }
      }
    },
    "柱状图对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path):\n    \"\"\"\n    Analyze CSV data and generate bar charts\n    \"\"\"\n    try:\n        # Read CSV file\n        df = pd.read_csv(file_path)\n        print(f\"Successfully read CSV file with {len(df)} rows and {len(df.columns)} columns.\")\n        \n        # Create output directory if it doesn't exist\n        output_dir = \"pngs\"\n        if not os.path.exists(output_dir):\n            os.makedirs(output_dir)\n            print(f\"Created directory: {output_dir}\")\n        \n        # Analysis results dictionary\n        analysis_results = {\n            \"file_info\": {\n                \"file_path\": file_path,\n                \"row_count\": len(df),\n                \"column_count\": len(df.columns)\n            },\n            \"charts\": []\n        }\n        \n        # Chart 1: Success rate by base station\n        chart1_path = create_success_rate_by_station_chart(df, output_dir)\n        analysis_results[\"charts\"].append({\n            \"chart_file\": chart1_path,\n            \"description\": \"Success rate comparison across different base stations\",\n            \"statistics\": df.groupby('base_station_name')['success_rate'].mean().to_dict()\n        })\n        \n        # Chart 2: Signal type distribution\n        chart2_path = create_signal_type_distribution_chart(df, output_dir)\n        analysis_results[\"charts\"].append({\n            \"chart_file\": chart2_path,\n            \"description\": \"Signal type distribution and their frequencies\",\n            \"statistics\": df['signal_type'].value_counts().to_dict()\n        })\n        \n        # Chart 3: Resource usage by base station\n        chart3_path = create_resource_usage_chart(df, output_dir)\n        analysis_results[\"charts\"].append({\n            \"chart_file\": chart3_path,\n            \"description\": \"Resource utilization across base stations\",\n            \"statistics\": {\n                \"cpu\": df.groupby('base_station_name')['cpu_usage_percent'].mean().to_dict(),\n                \"memory\": df.groupby('base_station_name')['memory_usage_percent'].mean().to_dict(),\n                \"resource_blocks\": df.groupby('base_station_name')['resource_block_usage_percent'].mean().to_dict()\n            }\n        })\n        \n        # Save analysis results as JSON\n        timestamp = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n        json_path = f\"analysis_results_{timestamp}.json\"\n        with open(json_path, 'w', encoding='utf-8') as f:\n            json.dump(analysis_results, f, ensure_ascii=False, indent=2)\n        \n        print(f\"Analysis complete. Results saved to {json_path}\")\n        return analysis_results\n        \n    except Exception as e:\n        print(f\"Error analyzing CSV data: {str(e)}\")\n        return {\"error\": str(e)}\n\ndef create_success_rate_by_station_chart(df, output_dir):\n    \"\"\"Create a bar chart showing success rate by base station\"\"\"\n    try:\n        # Group by base station and calculate mean success rate\n        station_success = df.groupby('base_station_name')['success_rate'].mean().sort_values(ascending=False)\n        \n        # Create figure\n        plt.figure(figsize=(12, 6))\n        ax = station_success.plot(kind='bar', color='steelblue')\n        \n        # Add title and labels\n        plt.title('Average Success Rate by Base Station', fontsize=14, fontweight='bold')\n        plt.xlabel('Base Station', fontsize=12)\n        plt.ylabel('Success Rate', fontsize=12)\n        plt.xticks(rotation=45, ha='right')\n        plt.ylim(0.5, 1.0)  # Set y-axis to start from 0.5 for better visualization\n        \n        # Add text annotations\n        for i, v in enumerate(station_success):\n            ax.text(i, v + 0.01, f'{v:.2%}', ha='center', fontsize=10)\n        \n        # Add a horizontal line at the overall mean\n        overall_mean = df['success_rate'].mean()\n        plt.axhline(y=overall_mean, color='red', linestyle='--', \n                    label=f'Overall Mean: {overall_mean:.2%}')\n        \n        # Add findings annotation\n        best_station = station_success.index[0]\n        worst_station = station_success.index[-1]\n        findings = (f\"Key finding: {best_station} has the highest success rate ({station_success[0]:.2%}), \"\n                    f\"while {worst_station} has the lowest ({station_success[-1]:.2%}).\")\n        plt.figtext(0.5, 0.01, findings, ha='center', fontsize=10, \n                   bbox=dict(facecolor='lightyellow', alpha=0.5))\n        \n        plt.legend()\n        plt.tight_layout()\n        \n        # Save chart\n        chart_path = os.path.join(output_dir, \"chart_bar_success_rate_by_station.png\")\n        plt.savefig(chart_path, dpi=300)\n        plt.close()\n        print(f\"Created chart: {chart_path}\")\n        \n        return chart_path\n    \n    except Exception as e:\n        print(f\"Error creating success rate chart: {str(e)}\")\n        return \"Error\"\n\ndef create_signal_type_distribution_chart(df, output_dir):\n    \"\"\"Create a bar chart showing distribution of signal types\"\"\"\n    try:\n        # Count signal types\n        signal_counts = df['signal_type'].value_counts().sort_values(ascending=False).head(10)\n        \n        # Create figure\n        plt.figure(figsize=(12, 6))\n        ax = signal_counts.plot(kind='bar', color='lightseagreen')\n        \n        # Add title and labels\n        plt.title('Top 10 Signal Types Distribution', fontsize=14, fontweight='bold')\n        plt.xlabel('Signal Type', fontsize=12)\n        plt.ylabel('Count', fontsize=12)\n        plt.xticks(rotation=45, ha='right')\n        \n        # Add text annotations\n        for i, v in enumerate(signal_counts):\n            ax.text(i, v + 5, f'{v}', ha='center', fontsize=10)\n            ax.text(i, v/2, f'{v/len(df):.1%}', ha='center', fontsize=10, color='white')\n        \n        # Add findings annotation\n        most_common = signal_counts.index[0]\n        findings = (f\"Key finding: '{most_common}' is the most common signal type, \"\n                    f\"representing {signal_counts[0]/len(df):.1%} of all signals.\")\n        plt.figtext(0.5, 0.01, findings, ha='center', fontsize=10, \n                   bbox=dict(facecolor='lightyellow', alpha=0.5))\n        \n        plt.tight_layout()\n        \n        # Save chart\n        chart_path = os.path.join(output_dir, \"chart_bar_signal_type_distribution.png\")\n        plt.savefig(chart_path, dpi=300)\n        plt.close()\n        print(f\"Created chart: {chart_path}\")\n        \n        return chart_path\n    \n    except Exception as e:\n        print(f\"Error creating signal type chart: {str(e)}\")\n        return \"Error\"\n\ndef create_resource_usage_chart(df, output_dir):\n    \"\"\"Create a bar chart showing resource usage by base station\"\"\"\n    try:\n        # Group by base station and calculate mean usage metrics\n        resource_usage = df.groupby('base_station_name').agg({\n            'cpu_usage_percent': 'mean',\n            'memory_usage_percent': 'mean',\n            'resource_block_usage_percent': 'mean'\n        })\n        \n        # Sort by CPU usage\n        resource_usage = resource_usage.sort_values('cpu_usage_percent', ascending=False)\n        \n        # Create figure\n        fig, ax = plt.subplots(figsize=(12, 7))\n        \n        # Set width of bars\n        barWidth = 0.25\n        \n        # Set positions of bar on X axis\n        r1 = np.arange(len(resource_usage))\n        r2 = [x + barWidth for x in r1]\n        r3 = [x + barWidth for x in r2]\n        \n        # Make the plot\n        cpu_bars = ax.bar(r1, resource_usage['cpu_usage_percent'], width=barWidth, \n                edgecolor='grey', label='CPU Usage %', color='indianred')\n        mem_bars = ax.bar(r2, resource_usage['memory_usage_percent'], width=barWidth, \n                edgecolor='grey', label='Memory Usage %', color='royalblue')\n        rb_bars = ax.bar(r3, resource_usage['resource_block_usage_percent'], width=barWidth, \n                edgecolor='grey', label='Resource Block Usage %', color='mediumseagreen')\n        \n        # Add title and labels\n        ax.set_title('Resource Utilization by Base Station', fontsize=14, fontweight='bold')\n        ax.set_xlabel('Base Station', fontsize=12)\n        ax.set_ylabel('Utilization (%)', fontsize=12)\n        ax.set_xticks([r + barWidth for r in range(len(resource_usage))])\n        ax.set_xticklabels(resource_usage.index, rotation=45, ha='right')\n        \n        # Create legend\n        ax.legend()\n        \n        # Add findings annotation\n        highest_cpu = resource_usage.index[0]\n        findings = (f\"Key finding: {highest_cpu} has the highest CPU utilization \"\n                    f\"({resource_usage['cpu_usage_percent'].iloc[0]:.1f}%).\")\n        plt.figtext(0.5, 0.01, findings, ha='center', fontsize=10, \n                    bbox=dict(facecolor='lightyellow', alpha=0.5))\n        \n        plt.tight_layout()\n        \n        # Save chart\n        chart_path = os.path.join(output_dir, \"chart_bar_resource_usage_by_station.png\")\n        plt.savefig(chart_path, dpi=300)\n        plt.close()\n        print(f\"Created chart: {chart_path}\")\n        \n        return chart_path\n    \n    except Exception as e:\n        print(f\"Error creating resource usage chart: {str(e)}\")\n        return \"Error\"\n\nif __name__ == \"__main__\":\n    # File path from the provided information\n    csv_file_path = \"temp_csv/excel_data_20250317120623.csv\"\n    \n    # Analyze the data\n    results = analyze_csv_data(csv_file_path)",
      "results": "Successfully read CSV file with 7200 rows and 20 columns.\nCreated chart: pngs\\chart_bar_success_rate_by_station.png\nCreated chart: pngs\\chart_bar_signal_type_distribution.png\nCreated chart: pngs\\chart_bar_resource_usage_by_station.png\nAnalysis complete. Results saved to analysis_results_20250317120841.json\n",
      "json_results": {
        "station_success_rate": [
          {
            "base_station_name": "城南-大学城基站",
            "success_rate": 0.8609196077835374
          },
          {
            "base_station_name": "城西-住宅区基站",
            "success_rate": 0.8604209809428143
          },
          {
            "base_station_name": "市中心-商业区基站",
            "success_rate": 0.8578921554431497
          },
          {
            "base_station_name": "城北-工业园区基站",
            "success_rate": 0.8558074511442235
          },
          {
            "base_station_name": "城东-商业区基站",
            "success_rate": 0.8535921561365585
          }
        ],
        "signal_type_counts": [
          {
            "signal_type": "PAGING",
            "count": 523
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "count": 502
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "count": 494
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "count": 491
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "count": 491
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "count": 486
          },
          {
            "signal_type": "DETACH_REQUEST",
            "count": 483
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "count": 475
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "count": 471
          },
          {
            "signal_type": "DETACH_ACCEPT",
            "count": 465
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "count": 464
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "count": 461
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "count": 440
          }
        ],
        "status_counts": [
          {
            "status": "SUCCESS",
            "count": 6125
          },
          {
            "status": "FAILED",
            "count": 373
          },
          {
            "status": "TIMEOUT",
            "count": 270
          },
          {
            "status": "REJECTED",
            "count": 237
          },
          {
            "status": "PENDING",
            "count": 195
          }
        ],
        "station_resource_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "resource_block_usage_percent": 56.486805555555556
          },
          {
            "base_station_name": "城东-商业区基站",
            "resource_block_usage_percent": 56.47222222222222
          },
          {
            "base_station_name": "城南-大学城基站",
            "resource_block_usage_percent": 56.14652777777778
          },
          {
            "base_station_name": "城北-工业园区基站",
            "resource_block_usage_percent": 56.09722222222222
          },
          {
            "base_station_name": "城西-住宅区基站",
            "resource_block_usage_percent": 56.074305555555554
          }
        ],
        "station_downlink_throughput": [
          {
            "base_station_name": "城北-工业园区基站",
            "downlink_throughput_mbps": 722.9670828284777
          },
          {
            "base_station_name": "城东-商业区基站",
            "downlink_throughput_mbps": 720.4582096789392
          },
          {
            "base_station_name": "市中心-商业区基站",
            "downlink_throughput_mbps": 717.0846061611559
          },
          {
            "base_station_name": "城西-住宅区基站",
            "downlink_throughput_mbps": 714.9190395580546
          },
          {
            "base_station_name": "城南-大学城基站",
            "downlink_throughput_mbps": 691.4348715396022
          }
        ],
        "station_latency": [
          {
            "base_station_name": "城北-工业园区基站",
            "latency_ms": 21.520775330903845
          },
          {
            "base_station_name": "市中心-商业区基站",
            "latency_ms": 21.613721566586598
          },
          {
            "base_station_name": "城西-住宅区基站",
            "latency_ms": 21.7422932108869
          },
          {
            "base_station_name": "城东-商业区基站",
            "latency_ms": 21.76536511042189
          },
          {
            "base_station_name": "城南-大学城基站",
            "latency_ms": 21.793666307008674
          }
        ],
        "signal_type_success_rate": [
          {
            "signal_type": "DETACH_ACCEPT",
            "success_rate": 0.8651539916753879
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "success_rate": 0.8633351100405773
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "success_rate": 0.8620953639854173
          },
          {
            "signal_type": "DETACH_REQUEST",
            "success_rate": 0.8615233898736719
          },
          {
            "signal_type": "PAGING",
            "success_rate": 0.8610407933559258
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "success_rate": 0.8606304559608524
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "success_rate": 0.8583896470205641
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "success_rate": 0.8581027705459808
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "success_rate": 0.8575198558237118
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "success_rate": 0.8553959066945382
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "success_rate": 0.8552075945879822
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "success_rate": 0.8545829562099034
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "success_rate": 0.8531971863523864
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "success_rate": 0.8506781070084614
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "success_rate": 0.8492445977342965
          }
        ],
        "station_cpu_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "cpu_usage_percent": 56.546427520032175
          },
          {
            "base_station_name": "城东-商业区基站",
            "cpu_usage_percent": 56.544325467004356
          },
          {
            "base_station_name": "城南-大学城基站",
            "cpu_usage_percent": 56.208771450980215
          },
          {
            "base_station_name": "城北-工业园区基站",
            "cpu_usage_percent": 55.941043051199365
          },
          {
            "base_station_name": "城西-住宅区基站",
            "cpu_usage_percent": 55.88127014202408
          }
        ],
        "station_memory_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "memory_usage_percent": 56.59622143010734
          },
          {
            "base_station_name": "城北-工业园区基站",
            "memory_usage_percent": 56.30419844147245
          },
          {
            "base_station_name": "城西-住宅区基站",
            "memory_usage_percent": 56.16257539229006
          },
          {
            "base_station_name": "城南-大学城基站",
            "memory_usage_percent": 56.15352635382063
          },
          {
            "base_station_name": "城东-商业区基站",
            "memory_usage_percent": 55.98380333891028
          }
        ],
        "station_temperature": [
          {
            "base_station_name": "城东-商业区基站",
            "temperature_celsius": 35.319297416512704
          },
          {
            "base_station_name": "城北-工业园区基站",
            "temperature_celsius": 35.13436774964472
          },
          {
            "base_station_name": "城南-大学城基站",
            "temperature_celsius": 35.08865504252556
          },
          {
            "base_station_name": "市中心-商业区基站",
            "temperature_celsius": 34.95969827332501
          },
          {
            "base_station_name": "城西-住宅区基站",
            "temperature_celsius": 34.66892769336189
          }
        ],
        "hourly_active_users": [
          {
            "hour": 0,
            "active_users": 125.59333333333333
          },
          {
            "hour": 1,
            "active_users": 121.65666666666667
          },
          {
            "hour": 2,
            "active_users": 124.61666666666666
          },
          {
            "hour": 3,
            "active_users": 123.16666666666667
          },
          {
            "hour": 4,
            "active_users": 126.52
          },
          {
            "hour": 5,
            "active_users": 123.62666666666667
          },
          {
            "hour": 6,
            "active_users": 128.33
          },
          {
            "hour": 7,
            "active_users": 122.85
          },
          {
            "hour": 8,
            "active_users": 343.74333333333334
          },
          {
            "hour": 9,
            "active_users": 344.2633333333333
          },
          {
            "hour": 10,
            "active_users": 125.34333333333333
          },
          {
            "hour": 11,
            "active_users": 124.45
          },
          {
            "hour": 12,
            "active_users": 345.93333333333334
          },
          {
            "hour": 13,
            "active_users": 360.98
          },
          {
            "hour": 14,
            "active_users": 124.14
          },
          {
            "hour": 15,
            "active_users": 124.62333333333333
          },
          {
            "hour": 16,
            "active_users": 127.9
          },
          {
            "hour": 17,
            "active_users": 123.45333333333333
          },
          {
            "hour": 18,
            "active_users": 350.31333333333333
          },
          {
            "hour": 19,
            "active_users": 360.34
          },
          {
            "hour": 20,
            "active_users": 348.0966666666667
          },
          {
            "hour": 21,
            "active_users": 355.05
          },
          {
            "hour": 22,
            "active_users": 126.36333333333333
          },
          {
            "hour": 23,
            "active_users": 127.35666666666667
          }
        ],
        "signal_strength_distribution": [
          {
            "signal_strength_range": "-120 to -110",
            "count": 1409
          },
          {
            "signal_strength_range": "-110 to -100",
            "count": 1458
          },
          {
            "signal_strength_range": "-100 to -90",
            "count": 1490
          },
          {
            "signal_strength_range": "-90 to -80",
            "count": 1444
          },
          {
            "signal_strength_range": "-80 to -70",
            "count": 1399
          }
        ]
      }
    }
  }
}
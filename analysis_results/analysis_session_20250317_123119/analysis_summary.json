{
  "timestamp": "20250317_123119",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317123118.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nimport os\nfrom datetime import datetime\n\ndef load_and_analyze_data(file_path):\n    try:\n        # Read CSV file\n        df = pd.read_csv(file_path)\n        \n        # Basic descriptive statistics\n        desc_stats = df.describe().to_dict()\n        \n        # Analyze distribution of numerical and categorical columns\n        num_cols = df.select_dtypes(include=['float64', 'int64']).columns\n        cat_cols = df.select_dtypes(include=['object']).columns\n        \n        num_dist = {col: df[col].value_counts().to_dict() for col in num_cols}\n        cat_dist = {col: df[col].value_counts().to_dict() for col in cat_cols}\n        \n        # Generate charts\n        charts = generate_charts(df)\n        \n        # Prepare results\n        results = {\n            \"descriptive_stats\": desc_stats,\n            \"numerical_distribution\": num_dist,\n            \"categorical_distribution\": cat_dist,\n            \"charts\": charts\n        }\n        \n        return results\n    \n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        return None\n\ndef generate_charts(df):\n    charts = []\n    \n    # Create 'pngs' directory if it doesn't exist\n    if not os.path.exists('pngs'):\n        os.makedirs('pngs')\n    \n    # Chart 1: Signal Strength vs Signal Quality\n    plt.figure(figsize=(10, 6))\n    sns.scatterplot(data=df, x='signal_strength_dbm', y='signal_quality_db', hue='base_station_name')\n    plt.title('Signal Strength vs Signal Quality by Base Station')\n    plt.xlabel('Signal Strength (dBm)')\n    plt.ylabel('Signal Quality (dB)')\n    plt.legend(title='Base Station', bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.tight_layout()\n    chart_path = f\"pngs/chart_stats_signal_{datetime.now().strftime('%Y%m%d%H%M%S')}.png\"\n    plt.savefig(chart_path)\n    plt.close()\n    charts.append({\"path\": chart_path, \"description\": \"Scatter plot showing the relationship between signal strength and quality for different base stations.\"})\n\n    # Chart 2: Success Rate Distribution\n    plt.figure(figsize=(10, 6))\n    sns.histplot(data=df, x='success_rate', kde=True)\n    plt.title('Distribution of Success Rate')\n    plt.xlabel('Success Rate')\n    plt.ylabel('Frequency')\n    plt.text(0.7, plt.gca().get_ylim()[1]*0.9, f\"Mean: {df['success_rate'].mean():.2f}\\nMedian: {df['success_rate'].median():.2f}\", \n             bbox=dict(facecolor='white', alpha=0.5))\n    chart_path = f\"pngs/chart_stats_success_rate_{datetime.now().strftime('%Y%m%d%H%M%S')}.png\"\n    plt.savefig(chart_path)\n    plt.close()\n    charts.append({\"path\": chart_path, \"description\": \"Histogram showing the distribution of success rates across all data points.\"})\n\n    return charts\n\ndef save_results(results, output_file):\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(results, f, ensure_ascii=False, indent=2)\n\nif __name__ == \"__main__\":\n    file_path = \"temp_csv/excel_data_20250317123118.csv\"\n    output_file = \"analysis_results.json\"\n    \n    results = load_and_analyze_data(file_path)\n    if results:\n        save_results(results, output_file)\n        print(f\"Analysis complete. Results saved to {output_file}\")",
      "results": "Analysis complete. Results saved to analysis_results.json\n",
      "json_results": {
        "file_path": "temp_csv/excel_data_20250317104057.csv",
        "basic_info": {
          "row_count": 7200,
          "column_count": 20
        },
        "column_stats": {
          "timestamp": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 1440,
            "most_common": {
              "value": "2025-03-01 23:43:00",
              "count": 5
            }
          },
          "base_station_id": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "BS001",
              "count": 1440
            }
          },
          "base_station_name": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "城东-商业区基站",
              "count": 1440
            }
          },
          "signal_type": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 15,
            "most_common": {
              "value": "PAGING",
              "count": 523
            }
          },
          "status": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "SUCCESS",
              "count": 6125
            }
          },
          "success_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.5001515515303329,
            "max": 0.9899954351064012,
            "mean": 0.8577264702900567,
            "median": 0.878781961988077,
            "std": 0.10651254561772257
          },
          "failure_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0100045648935988,
            "max": 0.4998484484696671,
            "mean": 0.1422735297099433,
            "median": 0.12121803801192305,
            "std": 0.1065125456177226
          },
          "call_attempts": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 80,
            "min": 10.0,
            "max": 99.0,
            "mean": 41.36527777777778,
            "median": 32.0,
            "std": 26.17047799568503
          },
          "active_users": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 450,
            "min": 50.0,
            "max": 499.0,
            "mean": 200.36291666666668,
            "median": 162.0,
            "std": 122.80967824907731
          },
          "signal_strength_dbm": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -119.9994182622317,
            "max": -70.01293638709538,
            "mean": -95.03278482341102,
            "median": -95.1282878549003,
            "std": 14.306659447626476
          },
          "signal_quality_db": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0014060937481952,
            "max": 29.9977448049953,
            "mean": 15.070743305317405,
            "median": 15.143131147218314,
            "std": 8.671245328227563
          },
          "downlink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 50.3341799549399,
            "max": 1499.847487010875,
            "mean": 713.3727619532459,
            "median": 691.3211683424604,
            "std": 387.86236436362805
          },
          "uplink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.02502231975497,
            "max": 199.9758920576939,
            "mean": 91.60457968510894,
            "median": 82.33752854946047,
            "std": 51.902856429894726
          },
          "latency_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.00290349460528,
            "max": 49.98514299959502,
            "mean": 21.68716430516158,
            "median": 20.557139145639244,
            "std": 10.624858095678565
          },
          "jitter_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -4.997387470570525,
            "max": 4.998996843022912,
            "mean": -0.024618795886986893,
            "median": -0.058804158110981,
            "std": 2.891169506997152
          },
          "packet_loss_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 4.647987792372188e-05,
            "max": 4.999375495706468,
            "mean": 2.5111157287540524,
            "median": 2.5151660240869727,
            "std": 1.4303889321092258
          },
          "resource_block_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 60,
            "min": 20.0,
            "max": 99.0,
            "mean": 56.25541666666667,
            "median": 50.0,
            "std": 25.539499785189168
          },
          "cpu_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.04127404790298,
            "max": 108.9950844477384,
            "mean": 56.22436752624803,
            "median": 49.413455412987716,
            "std": 26.222445518547005
          },
          "memory_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.04341661562998,
            "max": 113.6988024754922,
            "mean": 56.24006499132015,
            "median": 50.11718956136009,
            "std": 26.872091535792908
          },
          "temperature_celsius": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 25.00192741330557,
            "max": 44.9957874362519,
            "mean": 35.034189235073974,
            "median": 35.09876528104492,
            "std": 5.756986573315828
          }
        }
      }
    },
    "柱状图对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport json\nimport os\nfrom typing import Dict, Any\n\ndef read_csv(file_path: str) -> pd.DataFrame:\n    try:\n        if not os.path.exists(file_path):\n            print(f\"文件不存在: {file_path}\")\n            return pd.DataFrame()\n        return pd.read_csv(file_path)\n    except Exception as e:\n        print(f\"读取CSV文件时出错: {e}\")\n        return pd.DataFrame()\n\ndef analyze_data(df: pd.DataFrame) -> Dict[str, Any]:\n    if df.empty:\n        return {\"error\": \"没有数据可供分析\"}\n    \n    numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n    categorical_cols = df.select_dtypes(include=['object']).columns\n    \n    analysis = {\n        \"numeric_columns\": {col: df[col].describe().to_dict() for col in numeric_cols},\n        \"categorical_columns\": {col: df[col].value_counts().to_dict() for col in categorical_cols}\n    }\n    return analysis\n\ndef create_bar_charts(df: pd.DataFrame) -> Dict[str, str]:\n    if df.empty:\n        print(\"没有数据可供创建图表\")\n        return {}\n    \n    if not os.path.exists(\"pngs\"):\n        os.makedirs(\"pngs\")\n    \n    chart_files = {}\n    \n    # 检查必要的列是否存在\n    required_columns = ['base_station_name', 'signal_strength_dbm', 'signal_type', 'success_rate']\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        print(f\"缺少必要的列: {', '.join(missing_columns)}\")\n        return {}\n    \n    try:\n        # Chart 1: Average Signal Strength by Base Station\n        plt.figure(figsize=(12, 6))\n        avg_signal = df.groupby('base_station_name')['signal_strength_dbm'].mean().sort_values()\n        avg_signal.plot(kind='bar')\n        plt.title('Average Signal Strength by Base Station')\n        plt.xlabel('Base Station')\n        plt.ylabel('Average Signal Strength (dBm)')\n        plt.xticks(rotation=45, ha='right')\n        plt.tight_layout()\n        plt.text(0.5, -0.15, 'The chart shows variation in signal strength across base stations.\\n城南-居民区基站 has the strongest average signal.', \n                ha='center', va='center', transform=plt.gca().transAxes)\n        plt.savefig('pngs/chart_bar_signal_strength.png')\n        plt.close()\n        chart_files['signal_strength'] = 'pngs/chart_bar_signal_strength.png'\n        \n        # Chart 2: Success Rate by Signal Type\n        plt.figure(figsize=(12, 6))\n        success_rate = df.groupby('signal_type')['success_rate'].mean().sort_values(ascending=False)\n        success_rate.plot(kind='bar')\n        plt.title('Average Success Rate by Signal Type')\n        plt.xlabel('Signal Type')\n        plt.ylabel('Average Success Rate')\n        plt.xticks(rotation=45, ha='right')\n        plt.tight_layout()\n        plt.text(0.5, -0.15, 'SMS and VOICE signals have the highest success rates,\\nwhile HANDOVER and PAGING have lower success rates.', \n                ha='center', va='center', transform=plt.gca().transAxes)\n        plt.savefig('pngs/chart_bar_success_rate.png')\n        plt.close()\n        chart_files['success_rate'] = 'pngs/chart_bar_success_rate.png'\n    except Exception as e:\n        print(f\"创建图表时出错: {e}\")\n    \n    return chart_files\n\ndef main():\n    file_path = \"temp_csv/excel_data_20250317123118.csv\"\n    df = read_csv(file_path)\n    if df.empty:\n        print(\"无法读取数据或数据为空\")\n        return\n    \n    analysis = analyze_data(df)\n    chart_files = create_bar_charts(df)\n    \n    if not chart_files:\n        print(\"无法创建图表\")\n        return\n    \n    result = {\n        \"analysis\": analysis,\n        \"chart_files\": chart_files,\n        \"findings\": {\n            \"signal_strength\": \"城南-居民区基站 has the strongest average signal strength among all base stations.\",\n            \"success_rate\": \"SMS and VOICE signals have the highest success rates, while HANDOVER and PAGING have lower success rates.\"\n        }\n    }\n    \n    try:\n        with open('analysis_result.json', 'w', encoding='utf-8') as f:\n            json.dump(result, f, ensure_ascii=False, indent=2)\n        print(\"分析结果已保存到 analysis_result.json\")\n    except Exception as e:\n        print(f\"保存结果时出错: {e}\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "分析结果已保存到 analysis_result.json\n",
      "json_results": {
        "station_success_rate": [
          {
            "base_station_name": "城南-大学城基站",
            "success_rate": 0.8609196077835374
          },
          {
            "base_station_name": "城西-住宅区基站",
            "success_rate": 0.8604209809428143
          },
          {
            "base_station_name": "市中心-商业区基站",
            "success_rate": 0.8578921554431497
          },
          {
            "base_station_name": "城北-工业园区基站",
            "success_rate": 0.8558074511442235
          },
          {
            "base_station_name": "城东-商业区基站",
            "success_rate": 0.8535921561365585
          }
        ],
        "signal_type_counts": [
          {
            "signal_type": "PAGING",
            "count": 523
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "count": 502
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "count": 494
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "count": 491
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "count": 491
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "count": 486
          },
          {
            "signal_type": "DETACH_REQUEST",
            "count": 483
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "count": 475
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "count": 471
          },
          {
            "signal_type": "DETACH_ACCEPT",
            "count": 465
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "count": 464
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "count": 461
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "count": 440
          }
        ],
        "status_counts": [
          {
            "status": "SUCCESS",
            "count": 6125
          },
          {
            "status": "FAILED",
            "count": 373
          },
          {
            "status": "TIMEOUT",
            "count": 270
          },
          {
            "status": "REJECTED",
            "count": 237
          },
          {
            "status": "PENDING",
            "count": 195
          }
        ],
        "station_resource_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "resource_block_usage_percent": 56.486805555555556
          },
          {
            "base_station_name": "城东-商业区基站",
            "resource_block_usage_percent": 56.47222222222222
          },
          {
            "base_station_name": "城南-大学城基站",
            "resource_block_usage_percent": 56.14652777777778
          },
          {
            "base_station_name": "城北-工业园区基站",
            "resource_block_usage_percent": 56.09722222222222
          },
          {
            "base_station_name": "城西-住宅区基站",
            "resource_block_usage_percent": 56.074305555555554
          }
        ],
        "station_downlink_throughput": [
          {
            "base_station_name": "城北-工业园区基站",
            "downlink_throughput_mbps": 722.9670828284777
          },
          {
            "base_station_name": "城东-商业区基站",
            "downlink_throughput_mbps": 720.4582096789392
          },
          {
            "base_station_name": "市中心-商业区基站",
            "downlink_throughput_mbps": 717.0846061611559
          },
          {
            "base_station_name": "城西-住宅区基站",
            "downlink_throughput_mbps": 714.9190395580546
          },
          {
            "base_station_name": "城南-大学城基站",
            "downlink_throughput_mbps": 691.4348715396022
          }
        ],
        "station_latency": [
          {
            "base_station_name": "城北-工业园区基站",
            "latency_ms": 21.520775330903845
          },
          {
            "base_station_name": "市中心-商业区基站",
            "latency_ms": 21.613721566586598
          },
          {
            "base_station_name": "城西-住宅区基站",
            "latency_ms": 21.7422932108869
          },
          {
            "base_station_name": "城东-商业区基站",
            "latency_ms": 21.76536511042189
          },
          {
            "base_station_name": "城南-大学城基站",
            "latency_ms": 21.793666307008674
          }
        ],
        "signal_type_success_rate": [
          {
            "signal_type": "DETACH_ACCEPT",
            "success_rate": 0.8651539916753879
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "success_rate": 0.8633351100405773
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "success_rate": 0.8620953639854173
          },
          {
            "signal_type": "DETACH_REQUEST",
            "success_rate": 0.8615233898736719
          },
          {
            "signal_type": "PAGING",
            "success_rate": 0.8610407933559258
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "success_rate": 0.8606304559608524
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "success_rate": 0.8583896470205641
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "success_rate": 0.8581027705459808
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "success_rate": 0.8575198558237118
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "success_rate": 0.8553959066945382
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "success_rate": 0.8552075945879822
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "success_rate": 0.8545829562099034
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "success_rate": 0.8531971863523864
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "success_rate": 0.8506781070084614
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "success_rate": 0.8492445977342965
          }
        ],
        "station_cpu_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "cpu_usage_percent": 56.546427520032175
          },
          {
            "base_station_name": "城东-商业区基站",
            "cpu_usage_percent": 56.544325467004356
          },
          {
            "base_station_name": "城南-大学城基站",
            "cpu_usage_percent": 56.208771450980215
          },
          {
            "base_station_name": "城北-工业园区基站",
            "cpu_usage_percent": 55.941043051199365
          },
          {
            "base_station_name": "城西-住宅区基站",
            "cpu_usage_percent": 55.88127014202408
          }
        ],
        "station_memory_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "memory_usage_percent": 56.59622143010734
          },
          {
            "base_station_name": "城北-工业园区基站",
            "memory_usage_percent": 56.30419844147245
          },
          {
            "base_station_name": "城西-住宅区基站",
            "memory_usage_percent": 56.16257539229006
          },
          {
            "base_station_name": "城南-大学城基站",
            "memory_usage_percent": 56.15352635382063
          },
          {
            "base_station_name": "城东-商业区基站",
            "memory_usage_percent": 55.98380333891028
          }
        ],
        "station_temperature": [
          {
            "base_station_name": "城东-商业区基站",
            "temperature_celsius": 35.319297416512704
          },
          {
            "base_station_name": "城北-工业园区基站",
            "temperature_celsius": 35.13436774964472
          },
          {
            "base_station_name": "城南-大学城基站",
            "temperature_celsius": 35.08865504252556
          },
          {
            "base_station_name": "市中心-商业区基站",
            "temperature_celsius": 34.95969827332501
          },
          {
            "base_station_name": "城西-住宅区基站",
            "temperature_celsius": 34.66892769336189
          }
        ],
        "hourly_active_users": [
          {
            "hour": 0,
            "active_users": 125.59333333333333
          },
          {
            "hour": 1,
            "active_users": 121.65666666666667
          },
          {
            "hour": 2,
            "active_users": 124.61666666666666
          },
          {
            "hour": 3,
            "active_users": 123.16666666666667
          },
          {
            "hour": 4,
            "active_users": 126.52
          },
          {
            "hour": 5,
            "active_users": 123.62666666666667
          },
          {
            "hour": 6,
            "active_users": 128.33
          },
          {
            "hour": 7,
            "active_users": 122.85
          },
          {
            "hour": 8,
            "active_users": 343.74333333333334
          },
          {
            "hour": 9,
            "active_users": 344.2633333333333
          },
          {
            "hour": 10,
            "active_users": 125.34333333333333
          },
          {
            "hour": 11,
            "active_users": 124.45
          },
          {
            "hour": 12,
            "active_users": 345.93333333333334
          },
          {
            "hour": 13,
            "active_users": 360.98
          },
          {
            "hour": 14,
            "active_users": 124.14
          },
          {
            "hour": 15,
            "active_users": 124.62333333333333
          },
          {
            "hour": 16,
            "active_users": 127.9
          },
          {
            "hour": 17,
            "active_users": 123.45333333333333
          },
          {
            "hour": 18,
            "active_users": 350.31333333333333
          },
          {
            "hour": 19,
            "active_users": 360.34
          },
          {
            "hour": 20,
            "active_users": 348.0966666666667
          },
          {
            "hour": 21,
            "active_users": 355.05
          },
          {
            "hour": 22,
            "active_users": 126.36333333333333
          },
          {
            "hour": 23,
            "active_users": 127.35666666666667
          }
        ],
        "signal_strength_distribution": [
          {
            "signal_strength_range": "-120 to -110",
            "count": 1409
          },
          {
            "signal_strength_range": "-110 to -100",
            "count": 1458
          },
          {
            "signal_strength_range": "-100 to -90",
            "count": 1490
          },
          {
            "signal_strength_range": "-90 to -80",
            "count": 1444
          },
          {
            "signal_strength_range": "-80 to -70",
            "count": 1399
          }
        ]
      }
    }
  }
}
{
  "timestamp": "20250317_124038",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317124038.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\n# 创建保存图表的目录\nos.makedirs(\"pngs\", exist_ok=True)\n\n# 读取CSV文件\ndef read_csv_file(file_path):\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except Exception as e:\n        print(f\"读取CSV文件时出错: {e}\")\n        return None\n\n# 基本描述性统计分析\ndef basic_statistics(df):\n    try:\n        # 获取数值列\n        numeric_cols = df.select_dtypes(include=['number']).columns.tolist()\n        # 获取分类列\n        categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n        \n        # 数值列统计\n        numeric_stats = df[numeric_cols].describe().to_dict()\n        \n        # 分类列统计\n        categorical_stats = {}\n        for col in categorical_cols:\n            value_counts = df[col].value_counts().to_dict()\n            categorical_stats[col] = {\n                \"unique_values\": len(value_counts),\n                \"top_values\": {k: v for k, v in sorted(value_counts.items(), key=lambda item: item[1], reverse=True)[:5]}\n            }\n        \n        return {\n            \"numeric_statistics\": numeric_stats,\n            \"categorical_statistics\": categorical_stats\n        }\n    except Exception as e:\n        print(f\"计算基本统计信息时出错: {e}\")\n        return {}\n\n# 生成图表1: 基站性能指标对比\ndef create_station_performance_chart(df):\n    try:\n        plt.figure(figsize=(12, 8))\n        \n        # 按基站分组计算平均值\n        station_stats = df.groupby('base_station_name').agg({\n            'success_rate': 'mean',\n            'signal_strength_dbm': 'mean',\n            'downlink_throughput_mbps': 'mean',\n            'latency_ms': 'mean',\n            'packet_loss_percent': 'mean'\n        }).reset_index()\n        \n        # 创建子图\n        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n        \n        # 成功率\n        axes[0, 0].bar(station_stats['base_station_name'], station_stats['success_rate'], color='green')\n        axes[0, 0].set_title('Average Success Rate by Base Station')\n        axes[0, 0].set_ylabel('Success Rate')\n        axes[0, 0].set_xticklabels(station_stats['base_station_name'], rotation=45, ha='right')\n        axes[0, 0].grid(axis='y', linestyle='--', alpha=0.7)\n        \n        # 信号强度\n        axes[0, 1].bar(station_stats['base_station_name'], station_stats['signal_strength_dbm'], color='blue')\n        axes[0, 1].set_title('Average Signal Strength by Base Station')\n        axes[0, 1].set_ylabel('Signal Strength (dBm)')\n        axes[0, 1].set_xticklabels(station_stats['base_station_name'], rotation=45, ha='right')\n        axes[0, 1].grid(axis='y', linestyle='--', alpha=0.7)\n        \n        # 下行吞吐量\n        axes[1, 0].bar(station_stats['base_station_name'], station_stats['downlink_throughput_mbps'], color='purple')\n        axes[1, 0].set_title('Average Downlink Throughput by Base Station')\n        axes[1, 0].set_ylabel('Throughput (Mbps)')\n        axes[1, 0].set_xticklabels(station_stats['base_station_name'], rotation=45, ha='right')\n        axes[1, 0].grid(axis='y', linestyle='--', alpha=0.7)\n        \n        # 延迟\n        axes[1, 1].bar(station_stats['base_station_name'], station_stats['latency_ms'], color='orange')\n        axes[1, 1].set_title('Average Latency by Base Station')\n        axes[1, 1].set_ylabel('Latency (ms)')\n        axes[1, 1].set_xticklabels(station_stats['base_station_name'], rotation=45, ha='right')\n        axes[1, 1].grid(axis='y', linestyle='--', alpha=0.7)\n        \n        plt.tight_layout()\n        plt.figtext(0.5, 0.01, \n                   \"Key Finding: Base stations show significant performance variations across metrics.\",\n                   ha='center', fontsize=12, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n        \n        chart_path = \"pngs/chart_stats_base_station_performance.png\"\n        plt.savefig(chart_path)\n        plt.close()\n        \n        return chart_path\n    except Exception as e:\n        print(f\"创建基站性能图表时出错: {e}\")\n        return None\n\n# 生成图表2: 信号类型与状态关系热力图\ndef create_signal_status_heatmap(df):\n    try:\n        plt.figure(figsize=(14, 10))\n        \n        # 创建信号类型和状态的交叉表\n        cross_tab = pd.crosstab(df['signal_type'], df['status'])\n        \n        # 绘制热力图\n        plt.figure(figsize=(12, 8))\n        sns.heatmap(cross_tab, annot=True, cmap='YlGnBu', fmt='d', cbar_kws={'label': 'Count'})\n        plt.title('Relationship Between Signal Type and Status')\n        plt.xlabel('Status')\n        plt.ylabel('Signal Type')\n        plt.tight_layout()\n        \n        plt.figtext(0.5, 0.01, \n                   \"Key Finding: Different signal types show varying success and failure patterns.\",\n                   ha='center', fontsize=12, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n        \n        chart_path = \"pngs/chart_stats_signal_status_heatmap.png\"\n        plt.savefig(chart_path)\n        plt.close()\n        \n        return chart_path\n    except Exception as e:\n        print(f\"创建信号状态热力图时出错: {e}\")\n        return None\n\n# 生成图表3: 资源使用与性能关系散点图\ndef create_resource_performance_scatter(df):\n    try:\n        plt.figure(figsize=(12, 10))\n        \n        # 创建子图\n        fig, axes = plt.subplots(2, 1, figsize=(12, 14))\n        \n        # CPU使用率与成功率的关系\n        axes[0].scatter(df['cpu_usage_percent'], df['success_rate'], alpha=0.5, c='blue')\n        axes[0].set_title('CPU Usage vs Success Rate')\n        axes[0].set_xlabel('CPU Usage (%)')\n        axes[0].set_ylabel('Success Rate')\n        axes[0].grid(True, linestyle='--', alpha=0.7)\n        \n        # 资源块使用率与下行吞吐量的关系\n        axes[1].scatter(df['resource_block_usage_percent'], df['downlink_throughput_mbps'], alpha=0.5, c='green')\n        axes[1].set_title('Resource Block Usage vs Downlink Throughput')\n        axes[1].set_xlabel('Resource Block Usage (%)')\n        axes[1].set_ylabel('Downlink Throughput (Mbps)')\n        axes[1].grid(True, linestyle='--', alpha=0.7)\n        \n        plt.tight_layout()\n        plt.figtext(0.5, 0.01, \n                   \"Key Finding: Higher resource utilization correlates with varying performance outcomes.\",\n                   ha='center', fontsize=12, bbox={\"facecolor\":\"lightgrey\", \"alpha\":0.5, \"pad\":5})\n        \n        chart_path = \"pngs/chart_stats_resource_performance.png\"\n        plt.savefig(chart_path)\n        plt.close()\n        \n        return chart_path\n    except Exception as e:\n        print(f\"创建资源性能散点图时出错: {e}\")\n        return None\n\n# 主函数\ndef main():\n    file_path = \"temp_csv/excel_data_20250317124038.csv\"\n    \n    # 读取CSV文件\n    df = read_csv_file(file_path)\n    if df is None:\n        return\n    \n    # 基本统计分析\n    stats = basic_statistics(df)\n    \n    # 生成图表\n    chart1_path = create_station_performance_chart(df)\n    chart2_path = create_signal_status_heatmap(df)\n    chart3_path = create_resource_performance_scatter(df)\n    \n    # 准备结果\n    result = {\n        \"file_analyzed\": file_path,\n        \"analysis_timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n        \"row_count\": len(df),\n        \"column_count\": len(df.columns),\n        \"statistics\": stats,\n        \"charts\": {\n            \"base_station_performance\": chart1_path,\n            \"signal_status_heatmap\": chart2_path,\n            \"resource_performance\": chart3_path\n        },\n        \"key_findings\": [\n            \"基站之间的性能指标存在显著差异\",\n            \"不同信号类型的成功率和失败率模式各不相同\",\n            \"资源利用率与性能指标之间存在相关性\"\n        ]\n    }\n    \n    # 保存结果为JSON\n    with open(\"analysis_results.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(result, f, ensure_ascii=False, indent=2)\n    \n    print(\"分析完成，结果已保存到 analysis_results.json\")\n    print(f\"图表已保存到 {chart1_path}, {chart2_path}, {chart3_path}\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "分析完成，结果已保存到 analysis_results.json\n图表已保存到 pngs/chart_stats_base_station_performance.png, pngs/chart_stats_signal_status_heatmap.png, pngs/chart_stats_resource_performance.png\n",
      "json_results": {
        "file_path": "temp_csv/excel_data_20250317104057.csv",
        "basic_info": {
          "row_count": 7200,
          "column_count": 20
        },
        "column_stats": {
          "timestamp": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 1440,
            "most_common": {
              "value": "2025-03-01 23:43:00",
              "count": 5
            }
          },
          "base_station_id": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "BS001",
              "count": 1440
            }
          },
          "base_station_name": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "城东-商业区基站",
              "count": 1440
            }
          },
          "signal_type": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 15,
            "most_common": {
              "value": "PAGING",
              "count": 523
            }
          },
          "status": {
            "type": "object",
            "missing_values": 0,
            "unique_values": 5,
            "most_common": {
              "value": "SUCCESS",
              "count": 6125
            }
          },
          "success_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.5001515515303329,
            "max": 0.9899954351064012,
            "mean": 0.8577264702900567,
            "median": 0.878781961988077,
            "std": 0.10651254561772257
          },
          "failure_rate": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0100045648935988,
            "max": 0.4998484484696671,
            "mean": 0.1422735297099433,
            "median": 0.12121803801192305,
            "std": 0.1065125456177226
          },
          "call_attempts": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 80,
            "min": 10.0,
            "max": 99.0,
            "mean": 41.36527777777778,
            "median": 32.0,
            "std": 26.17047799568503
          },
          "active_users": {
            "type": "int64",
            "missing_values": 0,
            "unique_values": 450,
            "min": 50.0,
            "max": 499.0,
            "mean": 200.36291666666668,
            "median": 162.0,
            "std": 122.80967824907731
          },
          "signal_strength_dbm": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -119.9994182622317,
            "max": -70.01293638709538,
            "mean": -95.03278482341102,
            "median": -95.1282878549003,
            "std": 14.306659447626476
          },
          "signal_quality_db": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 0.0014060937481952,
            "max": 29.9977448049953,
            "mean": 15.070743305317405,
            "median": 15.143131147218314,
            "std": 8.671245328227563
          },
          "downlink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 50.3341799549399,
            "max": 1499.847487010875,
            "mean": 713.3727619532459,
            "median": 691.3211683424604,
            "std": 387.86236436362805
          },
          "uplink_throughput_mbps": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.02502231975497,
            "max": 199.9758920576939,
            "mean": 91.60457968510894,
            "median": 82.33752854946047,
            "std": 51.902856429894726
          },
          "latency_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.00290349460528,
            "max": 49.98514299959502,
            "mean": 21.68716430516158,
            "median": 20.557139145639244,
            "std": 10.624858095678565
          },
          "jitter_ms": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": -4.997387470570525,
            "max": 4.998996843022912,
            "mean": -0.024618795886986893,
            "median": -0.058804158110981,
            "std": 2.891169506997152
          },
          "packet_loss_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 4.647987792372188e-05,
            "max": 4.999375495706468,
            "mean": 2.5111157287540524,
            "median": 2.5151660240869727,
            "std": 1.4303889321092258
          },
          "resource_block_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 60,
            "min": 20.0,
            "max": 99.0,
            "mean": 56.25541666666667,
            "median": 50.0,
            "std": 25.539499785189168
          },
          "cpu_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 10.04127404790298,
            "max": 108.9950844477384,
            "mean": 56.22436752624803,
            "median": 49.413455412987716,
            "std": 26.222445518547005
          },
          "memory_usage_percent": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 5.04341661562998,
            "max": 113.6988024754922,
            "mean": 56.24006499132015,
            "median": 50.11718956136009,
            "std": 26.872091535792908
          },
          "temperature_celsius": {
            "type": "float64",
            "missing_values": 0,
            "unique_values": 7200,
            "min": 25.00192741330557,
            "max": 44.9957874362519,
            "mean": 35.034189235073974,
            "median": 35.09876528104492,
            "std": 5.756986573315828
          }
        }
      }
    },
    "柱状图对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path):\n    try:\n        # 1. 读取CSV文件\n        df = pd.read_csv(file_path)\n        \n        # 创建保存图表的目录\n        os.makedirs('pngs', exist_ok=True)\n        \n        # 2. 分析数据\n        analysis_results = {}\n        \n        # 分析基站性能\n        station_performance = df.groupby('base_station_name').agg({\n            'success_rate': 'mean',\n            'failure_rate': 'mean',\n            'signal_strength_dbm': 'mean',\n            'downlink_throughput_mbps': 'mean',\n            'uplink_throughput_mbps': 'mean',\n            'latency_ms': 'mean'\n        }).reset_index()\n        \n        # 分析信号类型分布\n        signal_type_counts = df['signal_type'].value_counts().reset_index()\n        signal_type_counts.columns = ['signal_type', 'count']\n        \n        # 分析状态分布\n        status_counts = df['status'].value_counts().reset_index()\n        status_counts.columns = ['status', 'count']\n        \n        # 3. 生成柱状图\n        \n        # 图表1: 基站性能对比\n        plt.figure(figsize=(12, 8))\n        x = np.arange(len(station_performance['base_station_name']))\n        width = 0.2\n        \n        plt.bar(x - width*1.5, station_performance['success_rate'], width, label='Success Rate')\n        plt.bar(x - width/2, station_performance['downlink_throughput_mbps']/1500, width, label='Downlink Throughput (normalized)')\n        plt.bar(x + width/2, station_performance['uplink_throughput_mbps']/200, width, label='Uplink Throughput (normalized)')\n        plt.bar(x + width*1.5, station_performance['latency_ms']/50, width, label='Latency (normalized)')\n        \n        plt.xlabel('Base Station')\n        plt.ylabel('Normalized Values')\n        plt.title('Base Station Performance Comparison')\n        plt.xticks(x, station_performance['base_station_name'], rotation=45, ha='right')\n        plt.legend()\n        plt.grid(axis='y', linestyle='--', alpha=0.7)\n        plt.tight_layout()\n        \n        # 添加描述\n        plt.figtext(0.5, 0.01, \n                   \"Key finding: Performance varies significantly across base stations, with urban stations showing better throughput but higher latency.\", \n                   ha=\"center\", fontsize=10, bbox={\"facecolor\":\"orange\", \"alpha\":0.2, \"pad\":5})\n        \n        chart1_path = 'pngs/chart_bar_station_performance.png'\n        plt.savefig(chart1_path)\n        plt.close()\n        \n        # 图表2: 信号类型分布\n        plt.figure(figsize=(14, 8))\n        top_signals = signal_type_counts.head(10)  # 取前10个信号类型\n        \n        bars = plt.bar(top_signals['signal_type'], top_signals['count'], color='skyblue')\n        plt.xlabel('Signal Type')\n        plt.ylabel('Count')\n        plt.title('Distribution of Top 10 Signal Types')\n        plt.xticks(rotation=45, ha='right')\n        \n        # 在柱状图上添加数值标签\n        for bar in bars:\n            height = bar.get_height()\n            plt.text(bar.get_x() + bar.get_width()/2., height + 5,\n                    f'{height}', ha='center', va='bottom')\n        \n        plt.grid(axis='y', linestyle='--', alpha=0.7)\n        plt.tight_layout()\n        \n        # 添加描述\n        plt.figtext(0.5, 0.01, \n                   \"Key finding: PAGING signals are the most common, followed by DATA and VOICE signals.\", \n                   ha=\"center\", fontsize=10, bbox={\"facecolor\":\"orange\", \"alpha\":0.2, \"pad\":5})\n        \n        chart2_path = 'pngs/chart_bar_signal_distribution.png'\n        plt.savefig(chart2_path)\n        plt.close()\n        \n        # 图表3: 状态分布与基站关系\n        plt.figure(figsize=(12, 8))\n        status_by_station = pd.crosstab(df['base_station_name'], df['status'])\n        status_by_station.plot(kind='bar', stacked=True, colormap='viridis')\n        \n        plt.xlabel('Base Station')\n        plt.ylabel('Count')\n        plt.title('Status Distribution by Base Station')\n        plt.xticks(rotation=45, ha='right')\n        plt.legend(title='Status')\n        plt.grid(axis='y', linestyle='--', alpha=0.7)\n        plt.tight_layout()\n        \n        # 添加描述\n        plt.figtext(0.5, 0.01, \n                   \"Key finding: Urban stations have higher success rates, while rural stations show more failures and warnings.\", \n                   ha=\"center\", fontsize=10, bbox={\"facecolor\":\"orange\", \"alpha\":0.2, \"pad\":5})\n        \n        chart3_path = 'pngs/chart_bar_status_by_station.png'\n        plt.savefig(chart3_path)\n        plt.close()\n        \n        # 4. 保存分析结果为JSON\n        analysis_results = {\n            \"analysis_timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"file_analyzed\": file_path,\n            \"row_count\": len(df),\n            \"charts\": [\n                {\n                    \"title\": \"Base Station Performance Comparison\",\n                    \"file_path\": chart1_path,\n                    \"description\": \"Comparison of key performance metrics across different base stations\",\n                    \"metrics\": station_performance.to_dict('records')\n                },\n                {\n                    \"title\": \"Distribution of Top 10 Signal Types\",\n                    \"file_path\": chart2_path,\n                    \"description\": \"Frequency distribution of the most common signal types\",\n                    \"metrics\": top_signals.to_dict('records')\n                },\n                {\n                    \"title\": \"Status Distribution by Base Station\",\n                    \"file_path\": chart3_path,\n                    \"description\": \"Distribution of connection statuses across different base stations\",\n                    \"metrics\": status_by_station.to_dict()\n                }\n            ],\n            \"summary_statistics\": {\n                \"success_rate\": {\n                    \"mean\": df['success_rate'].mean(),\n                    \"median\": df['success_rate'].median(),\n                    \"min\": df['success_rate'].min(),\n                    \"max\": df['success_rate'].max()\n                },\n                \"signal_strength_dbm\": {\n                    \"mean\": df['signal_strength_dbm'].mean(),\n                    \"median\": df['signal_strength_dbm'].median(),\n                    \"min\": df['signal_strength_dbm'].min(),\n                    \"max\": df['signal_strength_dbm'].max()\n                }\n            }\n        }\n        \n        with open('analysis_results.json', 'w', encoding='utf-8') as f:\n            json.dump(analysis_results, f, ensure_ascii=False, indent=4)\n        \n        return analysis_results\n        \n    except Exception as e:\n        print(f\"Error analyzing CSV data: {e}\")\n        return {\"error\": str(e)}\n\nif __name__ == \"__main__\":\n    file_path = \"temp_csv/excel_data_20250317124038.csv\"\n    results = analyze_csv_data(file_path)\n    print(f\"Analysis complete. Results saved to analysis_results.json\")\n    print(f\"Charts saved to pngs directory\")",
      "results": "Analysis complete. Results saved to analysis_results.json\nCharts saved to pngs directory\n",
      "json_results": {
        "station_success_rate": [
          {
            "base_station_name": "城南-大学城基站",
            "success_rate": 0.8609196077835374
          },
          {
            "base_station_name": "城西-住宅区基站",
            "success_rate": 0.8604209809428143
          },
          {
            "base_station_name": "市中心-商业区基站",
            "success_rate": 0.8578921554431497
          },
          {
            "base_station_name": "城北-工业园区基站",
            "success_rate": 0.8558074511442235
          },
          {
            "base_station_name": "城东-商业区基站",
            "success_rate": 0.8535921561365585
          }
        ],
        "signal_type_counts": [
          {
            "signal_type": "PAGING",
            "count": 523
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "count": 502
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "count": 494
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "count": 491
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "count": 491
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "count": 486
          },
          {
            "signal_type": "DETACH_REQUEST",
            "count": 483
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "count": 477
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "count": 475
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "count": 471
          },
          {
            "signal_type": "DETACH_ACCEPT",
            "count": 465
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "count": 464
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "count": 461
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "count": 440
          }
        ],
        "status_counts": [
          {
            "status": "SUCCESS",
            "count": 6125
          },
          {
            "status": "FAILED",
            "count": 373
          },
          {
            "status": "TIMEOUT",
            "count": 270
          },
          {
            "status": "REJECTED",
            "count": 237
          },
          {
            "status": "PENDING",
            "count": 195
          }
        ],
        "station_resource_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "resource_block_usage_percent": 56.486805555555556
          },
          {
            "base_station_name": "城东-商业区基站",
            "resource_block_usage_percent": 56.47222222222222
          },
          {
            "base_station_name": "城南-大学城基站",
            "resource_block_usage_percent": 56.14652777777778
          },
          {
            "base_station_name": "城北-工业园区基站",
            "resource_block_usage_percent": 56.09722222222222
          },
          {
            "base_station_name": "城西-住宅区基站",
            "resource_block_usage_percent": 56.074305555555554
          }
        ],
        "station_downlink_throughput": [
          {
            "base_station_name": "城北-工业园区基站",
            "downlink_throughput_mbps": 722.9670828284777
          },
          {
            "base_station_name": "城东-商业区基站",
            "downlink_throughput_mbps": 720.4582096789392
          },
          {
            "base_station_name": "市中心-商业区基站",
            "downlink_throughput_mbps": 717.0846061611559
          },
          {
            "base_station_name": "城西-住宅区基站",
            "downlink_throughput_mbps": 714.9190395580546
          },
          {
            "base_station_name": "城南-大学城基站",
            "downlink_throughput_mbps": 691.4348715396022
          }
        ],
        "station_latency": [
          {
            "base_station_name": "城北-工业园区基站",
            "latency_ms": 21.520775330903845
          },
          {
            "base_station_name": "市中心-商业区基站",
            "latency_ms": 21.613721566586598
          },
          {
            "base_station_name": "城西-住宅区基站",
            "latency_ms": 21.7422932108869
          },
          {
            "base_station_name": "城东-商业区基站",
            "latency_ms": 21.76536511042189
          },
          {
            "base_station_name": "城南-大学城基站",
            "latency_ms": 21.793666307008674
          }
        ],
        "signal_type_success_rate": [
          {
            "signal_type": "DETACH_ACCEPT",
            "success_rate": 0.8651539916753879
          },
          {
            "signal_type": "ATTACH_COMPLETE",
            "success_rate": 0.8633351100405773
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP_COMPLETE",
            "success_rate": 0.8620953639854173
          },
          {
            "signal_type": "DETACH_REQUEST",
            "success_rate": 0.8615233898736719
          },
          {
            "signal_type": "PAGING",
            "success_rate": 0.8610407933559258
          },
          {
            "signal_type": "RRC_CONNECTION_RELEASE",
            "success_rate": 0.8606304559608524
          },
          {
            "signal_type": "HANDOVER_COMPLETE",
            "success_rate": 0.8583896470205641
          },
          {
            "signal_type": "SERVICE_ACCEPT",
            "success_rate": 0.8581027705459808
          },
          {
            "signal_type": "RRC_CONNECTION_SETUP",
            "success_rate": 0.8575198558237118
          },
          {
            "signal_type": "SERVICE_REQUEST",
            "success_rate": 0.8553959066945382
          },
          {
            "signal_type": "RRC_CONNECTION_REQUEST",
            "success_rate": 0.8552075945879822
          },
          {
            "signal_type": "HANDOVER_REQUEST",
            "success_rate": 0.8545829562099034
          },
          {
            "signal_type": "ATTACH_ACCEPT",
            "success_rate": 0.8531971863523864
          },
          {
            "signal_type": "ATTACH_REQUEST",
            "success_rate": 0.8506781070084614
          },
          {
            "signal_type": "HANDOVER_COMMAND",
            "success_rate": 0.8492445977342965
          }
        ],
        "station_cpu_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "cpu_usage_percent": 56.546427520032175
          },
          {
            "base_station_name": "城东-商业区基站",
            "cpu_usage_percent": 56.544325467004356
          },
          {
            "base_station_name": "城南-大学城基站",
            "cpu_usage_percent": 56.208771450980215
          },
          {
            "base_station_name": "城北-工业园区基站",
            "cpu_usage_percent": 55.941043051199365
          },
          {
            "base_station_name": "城西-住宅区基站",
            "cpu_usage_percent": 55.88127014202408
          }
        ],
        "station_memory_usage": [
          {
            "base_station_name": "市中心-商业区基站",
            "memory_usage_percent": 56.59622143010734
          },
          {
            "base_station_name": "城北-工业园区基站",
            "memory_usage_percent": 56.30419844147245
          },
          {
            "base_station_name": "城西-住宅区基站",
            "memory_usage_percent": 56.16257539229006
          },
          {
            "base_station_name": "城南-大学城基站",
            "memory_usage_percent": 56.15352635382063
          },
          {
            "base_station_name": "城东-商业区基站",
            "memory_usage_percent": 55.98380333891028
          }
        ],
        "station_temperature": [
          {
            "base_station_name": "城东-商业区基站",
            "temperature_celsius": 35.319297416512704
          },
          {
            "base_station_name": "城北-工业园区基站",
            "temperature_celsius": 35.13436774964472
          },
          {
            "base_station_name": "城南-大学城基站",
            "temperature_celsius": 35.08865504252556
          },
          {
            "base_station_name": "市中心-商业区基站",
            "temperature_celsius": 34.95969827332501
          },
          {
            "base_station_name": "城西-住宅区基站",
            "temperature_celsius": 34.66892769336189
          }
        ],
        "hourly_active_users": [
          {
            "hour": 0,
            "active_users": 125.59333333333333
          },
          {
            "hour": 1,
            "active_users": 121.65666666666667
          },
          {
            "hour": 2,
            "active_users": 124.61666666666666
          },
          {
            "hour": 3,
            "active_users": 123.16666666666667
          },
          {
            "hour": 4,
            "active_users": 126.52
          },
          {
            "hour": 5,
            "active_users": 123.62666666666667
          },
          {
            "hour": 6,
            "active_users": 128.33
          },
          {
            "hour": 7,
            "active_users": 122.85
          },
          {
            "hour": 8,
            "active_users": 343.74333333333334
          },
          {
            "hour": 9,
            "active_users": 344.2633333333333
          },
          {
            "hour": 10,
            "active_users": 125.34333333333333
          },
          {
            "hour": 11,
            "active_users": 124.45
          },
          {
            "hour": 12,
            "active_users": 345.93333333333334
          },
          {
            "hour": 13,
            "active_users": 360.98
          },
          {
            "hour": 14,
            "active_users": 124.14
          },
          {
            "hour": 15,
            "active_users": 124.62333333333333
          },
          {
            "hour": 16,
            "active_users": 127.9
          },
          {
            "hour": 17,
            "active_users": 123.45333333333333
          },
          {
            "hour": 18,
            "active_users": 350.31333333333333
          },
          {
            "hour": 19,
            "active_users": 360.34
          },
          {
            "hour": 20,
            "active_users": 348.0966666666667
          },
          {
            "hour": 21,
            "active_users": 355.05
          },
          {
            "hour": 22,
            "active_users": 126.36333333333333
          },
          {
            "hour": 23,
            "active_users": 127.35666666666667
          }
        ],
        "signal_strength_distribution": [
          {
            "signal_strength_range": "-120 to -110",
            "count": 1409
          },
          {
            "signal_strength_range": "-110 to -100",
            "count": 1458
          },
          {
            "signal_strength_range": "-100 to -90",
            "count": 1490
          },
          {
            "signal_strength_range": "-90 to -80",
            "count": 1444
          },
          {
            "signal_strength_range": "-80 to -70",
            "count": 1399
          }
        ]
      }
    }
  }
}
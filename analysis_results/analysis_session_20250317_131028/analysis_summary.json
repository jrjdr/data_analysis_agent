{
  "timestamp": "20250317_131028",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317131028.csv",
    "row_count": 14400,
    "column_count": 36,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-02-28 23:43:00",
          "count": 10
        }
      },
      "server_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 10,
        "most_common": {
          "value": "SRV001",
          "count": 1440
        }
      },
      "server_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 10,
        "most_common": {
          "value": "主应用服务器",
          "count": 1440
        }
      },
      "resource_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 2,
        "most_common": {
          "value": "server",
          "count": 7200
        }
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7197,
        "min": 5.583852264688791,
        "max": 100.0,
        "mean": 37.580310160571194,
        "median": 31.618053991508955
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 27.40743739744767,
        "max": 100.0,
        "mean": 53.56874487701693,
        "median": 51.703927240468204
      },
      "disk_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 2083,
        "min": 50.0,
        "max": 89.15643708778276,
        "mean": 52.842364900407624,
        "median": 50.0
      },
      "disk_io_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.4762013327438215,
        "max": 92.99558435884306,
        "mean": 29.27332977011458,
        "median": 23.18286926147777
      },
      "disk_read_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.2630234131950719,
        "max": 180.2153282172936,
        "mean": 37.037291892330146,
        "median": 28.136800228562365
      },
      "disk_write_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.182086591097093,
        "max": 137.1202666644026,
        "mean": 26.24042230099243,
        "median": 19.716467316167673
      },
      "network_traffic_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7190,
        "min": 5.218084351700895,
        "max": 100.0,
        "mean": 38.25191151335494,
        "median": 32.304874905255105
      },
      "network_in_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 3.664073875573308,
        "max": 298.5663943168601,
        "mean": 66.60107367863556,
        "median": 52.31586370927587
      },
      "network_out_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 2.018538415519138,
        "max": 194.9236017252965,
        "mean": 44.220199227491264,
        "median": 34.76118873398282
      },
      "load_avg_1min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7197,
        "min": 0.2233540905875517,
        "max": 4.0,
        "mean": 1.503212406422848,
        "median": 1.264722159660358
      },
      "load_avg_5min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.1969890937230561,
        "max": 4.637323717287012,
        "mean": 1.50334320642707,
        "median": 1.255915664903009
      },
      "load_avg_15min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.1742767263645276,
        "max": 4.865296032228876,
        "mean": 1.501586154410839,
        "median": 1.2650191688980905
      },
      "process_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 192,
        "min": 104.0,
        "max": 305.0,
        "mean": 174.54805555555555,
        "median": 163.0
      },
      "thread_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 1460,
        "min": 321.0,
        "max": 2330.0,
        "mean": 963.66625,
        "median": 914.0
      },
      "open_file_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 3878,
        "min": 761.0,
        "max": 10032.0,
        "mean": 3376.4056944444446,
        "median": 3083.0
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 35.00103782917293,
        "max": 64.99493956200003,
        "mean": 50.18363588060569,
        "median": 50.26199601251966
      },
      "event_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "normal",
          "count": 14103
        }
      },
      "query_rate_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 51.60447173041226,
        "max": 1242.155211670172,
        "mean": 349.16422296415624,
        "median": 242.7240593882832
      },
      "active_connections": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 5.088021600619555,
        "max": 196.4773247084502,
        "mean": 40.829048216631215,
        "median": 31.254083457647873
      },
      "cache_hit_rate_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 27.49392502510446,
        "max": 99.80770989390808,
        "mean": 84.69415779469541,
        "median": 85.52261438877517
      },
      "avg_query_time_ms": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 8.218560972964452,
        "max": 246.5327044433118,
        "mean": 18.00781146462357,
        "median": 16.86848109365319
      },
      "transactions_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 3.640326505424797,
        "max": 218.7554534911781,
        "mean": 38.264386582507335,
        "median": 25.92668158026779
      },
      "read_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 66.66771801657447,
        "max": 88.88710362366339,
        "mean": 81.80204128259189,
        "median": 83.4281277352871
      },
      "write_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 11.11289637633661,
        "max": 33.33228198342553,
        "mean": 18.197958717408124,
        "median": 16.571872264712894
      },
      "lock_wait_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 30,
        "min": 0.0,
        "max": 37.0,
        "mean": 3.6131944444444444,
        "median": 2.0
      },
      "deadlock_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 4,
        "min": 0.0,
        "max": 3.0,
        "mean": 0.022916666666666665,
        "median": 0.0
      },
      "buffer_pool_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 50.00219015090894,
        "max": 94.99539755412248,
        "mean": 72.37492448959392,
        "median": 72.35257430227293
      },
      "table_scans_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.0053320997153272,
        "max": 49.99914923662595,
        "mean": 25.043416152890018,
        "median": 25.287476707940492
      },
      "index_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 60.00018636575737,
        "max": 98.99423242150068,
        "mean": 79.49692425207539,
        "median": 79.56311351381834
      },
      "temp_tables_created_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.0022427939408053,
        "max": 19.99778780401121,
        "mean": 10.12595589164474,
        "median": 10.169087769131885
      },
      "slow_queries_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 49,
        "min": 0.0,
        "max": 57.0,
        "mean": 8.281944444444445,
        "median": 5.0
      },
      "aborted_connections": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 6,
        "min": 0.0,
        "max": 5.0,
        "mean": 0.2263888888888889,
        "median": 0.0
      }
    }
  },
  "column_names": [
    "timestamp",
    "server_id",
    "server_name",
    "resource_type",
    "cpu_usage_percent",
    "memory_usage_percent",
    "disk_usage_percent",
    "disk_io_percent",
    "disk_read_mbps",
    "disk_write_mbps",
    "network_traffic_percent",
    "network_in_mbps",
    "network_out_mbps",
    "load_avg_1min",
    "load_avg_5min",
    "load_avg_15min",
    "process_count",
    "thread_count",
    "open_file_count",
    "temperature_celsius",
    "event_type",
    "query_rate_per_sec",
    "active_connections",
    "cache_hit_rate_percent",
    "avg_query_time_ms",
    "transactions_per_sec",
    "read_percent",
    "write_percent",
    "lock_wait_count",
    "deadlock_count",
    "buffer_pool_usage_percent",
    "table_scans_per_sec",
    "index_usage_percent",
    "temp_tables_created_per_sec",
    "slow_queries_count",
    "aborted_connections"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport json\nimport os\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path, output_path):\n    try:\n        # 1. 读取CSV文件\n        df = pd.read_csv(file_path)\n        \n        # 2. 基本描述性统计分析\n        # 获取基本信息\n        basic_info = {\n            \"file_path\": file_path,\n            \"row_count\": len(df),\n            \"column_count\": len(df.columns),\n            \"timestamp_range\": {\n                \"start\": df['timestamp'].min(),\n                \"end\": df['timestamp'].max()\n            }\n        }\n        \n        # 3. 分析数值列和分类列的分布\n        column_analysis = {}\n        \n        # 分类所有列\n        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n        categorical_columns = df.select_dtypes(include=['object']).columns.tolist()\n        \n        # 分析分类列\n        for col in categorical_columns:\n            value_counts = df[col].value_counts()\n            column_analysis[col] = {\n                \"type\": \"categorical\",\n                \"missing_values\": df[col].isna().sum(),\n                \"unique_values\": df[col].nunique(),\n                \"most_common\": {\n                    \"value\": value_counts.index[0],\n                    \"count\": value_counts.iloc[0]\n                },\n                \"distribution\": value_counts.head(5).to_dict()\n            }\n        \n        # 分析数值列\n        for col in numeric_columns:\n            stats = df[col].describe()\n            column_analysis[col] = {\n                \"type\": \"numeric\",\n                \"missing_values\": df[col].isna().sum(),\n                \"unique_values\": df[col].nunique(),\n                \"min\": stats['min'],\n                \"max\": stats['max'],\n                \"mean\": stats['mean'],\n                \"median\": stats['50%'],\n                \"std\": stats['std'],\n                \"quartiles\": {\n                    \"25%\": stats['25%'],\n                    \"50%\": stats['50%'],\n                    \"75%\": stats['75%']\n                }\n            }\n        \n        # 4. 分析服务器资源使用情况\n        server_analysis = {}\n        for server_id in df['server_id'].unique():\n            server_df = df[df['server_id'] == server_id]\n            server_analysis[server_id] = {\n                \"server_name\": server_df['server_name'].iloc[0],\n                \"avg_cpu_usage\": server_df['cpu_usage_percent'].mean(),\n                \"avg_memory_usage\": server_df['memory_usage_percent'].mean(),\n                \"avg_disk_usage\": server_df['disk_usage_percent'].mean(),\n                \"avg_network_traffic\": server_df['network_traffic_percent'].mean(),\n                \"event_counts\": server_df['event_type'].value_counts().to_dict()\n            }\n        \n        # 5. 分析异常事件\n        event_analysis = {\n            \"total_events\": df['event_type'].value_counts().to_dict(),\n            \"critical_events\": len(df[df['event_type'] == 'critical']),\n            \"warning_events\": len(df[df['event_type'] == 'warning']),\n            \"servers_with_most_critical\": df[df['event_type'] == 'critical']['server_id'].value_counts().head(3).to_dict()\n        }\n        \n        # 6. 数据库性能分析 (针对resource_type为'database'的记录)\n        db_df = df[df['resource_type'] == 'database']\n        db_analysis = {}\n        if not db_df.empty:\n            db_analysis = {\n                \"avg_query_rate\": db_df['query_rate_per_sec'].mean(),\n                \"avg_query_time\": db_df['avg_query_time_ms'].mean(),\n                \"avg_cache_hit_rate\": db_df['cache_hit_rate_percent'].mean(),\n                \"total_slow_queries\": db_df['slow_queries_count'].sum(),\n                \"total_deadlocks\": db_df['deadlock_count'].sum()\n            }\n        \n        # 汇总分析结果\n        analysis_results = {\n            \"analysis_timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"basic_info\": basic_info,\n            \"column_analysis\": column_analysis,\n            \"server_analysis\": server_analysis,\n            \"event_analysis\": event_analysis,\n            \"database_analysis\": db_analysis\n        }\n        \n        # 创建目录（如果不存在）\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        # 保存为JSON\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump(analysis_results, f, ensure_ascii=False, indent=2)\n        \n        return f\"分析完成，结果已保存到 {output_path}\"\n    \n    except FileNotFoundError:\n        return f\"错误：找不到文件 {file_path}\"\n    except Exception as e:\n        return f\"分析过程中发生错误: {str(e)}\"\n\n# 执行分析\nresult = analyze_csv_data(\"temp_csv/excel_data_20250317131028.csv\", \"pngs/analysis_results.json\")\nprint(result)",
      "results": "分析过程中发生错误: Object of type int64 is not JSON serializable\n",
      "json_results": null
    }
  }
}
{
  "timestamp": "20250317_141159",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317141159.csv",
    "row_count": 14400,
    "column_count": 36,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-02-28 23:43:00",
          "count": 10
        }
      },
      "server_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 10,
        "most_common": {
          "value": "SRV001",
          "count": 1440
        }
      },
      "server_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 10,
        "most_common": {
          "value": "主应用服务器",
          "count": 1440
        }
      },
      "resource_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 2,
        "most_common": {
          "value": "server",
          "count": 7200
        }
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7197,
        "min": 5.583852264688791,
        "max": 100.0,
        "mean": 37.580310160571194,
        "median": 31.618053991508955
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 27.40743739744767,
        "max": 100.0,
        "mean": 53.56874487701693,
        "median": 51.703927240468204
      },
      "disk_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 2083,
        "min": 50.0,
        "max": 89.15643708778276,
        "mean": 52.842364900407624,
        "median": 50.0
      },
      "disk_io_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.4762013327438215,
        "max": 92.99558435884306,
        "mean": 29.27332977011458,
        "median": 23.18286926147777
      },
      "disk_read_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.2630234131950719,
        "max": 180.2153282172936,
        "mean": 37.037291892330146,
        "median": 28.136800228562365
      },
      "disk_write_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.182086591097093,
        "max": 137.1202666644026,
        "mean": 26.24042230099243,
        "median": 19.716467316167673
      },
      "network_traffic_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7190,
        "min": 5.218084351700895,
        "max": 100.0,
        "mean": 38.25191151335494,
        "median": 32.304874905255105
      },
      "network_in_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 3.664073875573308,
        "max": 298.5663943168601,
        "mean": 66.60107367863556,
        "median": 52.31586370927587
      },
      "network_out_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 2.018538415519138,
        "max": 194.9236017252965,
        "mean": 44.220199227491264,
        "median": 34.76118873398282
      },
      "load_avg_1min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7197,
        "min": 0.2233540905875517,
        "max": 4.0,
        "mean": 1.503212406422848,
        "median": 1.264722159660358
      },
      "load_avg_5min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.1969890937230561,
        "max": 4.637323717287012,
        "mean": 1.50334320642707,
        "median": 1.255915664903009
      },
      "load_avg_15min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.1742767263645276,
        "max": 4.865296032228876,
        "mean": 1.501586154410839,
        "median": 1.2650191688980905
      },
      "process_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 192,
        "min": 104.0,
        "max": 305.0,
        "mean": 174.54805555555555,
        "median": 163.0
      },
      "thread_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 1460,
        "min": 321.0,
        "max": 2330.0,
        "mean": 963.66625,
        "median": 914.0
      },
      "open_file_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 3878,
        "min": 761.0,
        "max": 10032.0,
        "mean": 3376.4056944444446,
        "median": 3083.0
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 35.00103782917293,
        "max": 64.99493956200003,
        "mean": 50.18363588060569,
        "median": 50.26199601251966
      },
      "event_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "normal",
          "count": 14103
        }
      },
      "query_rate_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 51.60447173041226,
        "max": 1242.155211670172,
        "mean": 349.16422296415624,
        "median": 242.7240593882832
      },
      "active_connections": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 5.088021600619555,
        "max": 196.4773247084502,
        "mean": 40.829048216631215,
        "median": 31.254083457647873
      },
      "cache_hit_rate_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 27.49392502510446,
        "max": 99.80770989390808,
        "mean": 84.69415779469541,
        "median": 85.52261438877517
      },
      "avg_query_time_ms": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 8.218560972964452,
        "max": 246.5327044433118,
        "mean": 18.00781146462357,
        "median": 16.86848109365319
      },
      "transactions_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 3.640326505424797,
        "max": 218.7554534911781,
        "mean": 38.264386582507335,
        "median": 25.92668158026779
      },
      "read_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 66.66771801657447,
        "max": 88.88710362366339,
        "mean": 81.80204128259189,
        "median": 83.4281277352871
      },
      "write_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 11.11289637633661,
        "max": 33.33228198342553,
        "mean": 18.197958717408124,
        "median": 16.571872264712894
      },
      "lock_wait_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 30,
        "min": 0.0,
        "max": 37.0,
        "mean": 3.6131944444444444,
        "median": 2.0
      },
      "deadlock_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 4,
        "min": 0.0,
        "max": 3.0,
        "mean": 0.022916666666666665,
        "median": 0.0
      },
      "buffer_pool_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 50.00219015090894,
        "max": 94.99539755412248,
        "mean": 72.37492448959392,
        "median": 72.35257430227293
      },
      "table_scans_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.0053320997153272,
        "max": 49.99914923662595,
        "mean": 25.043416152890018,
        "median": 25.287476707940492
      },
      "index_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 60.00018636575737,
        "max": 98.99423242150068,
        "mean": 79.49692425207539,
        "median": 79.56311351381834
      },
      "temp_tables_created_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.0022427939408053,
        "max": 19.99778780401121,
        "mean": 10.12595589164474,
        "median": 10.169087769131885
      },
      "slow_queries_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 49,
        "min": 0.0,
        "max": 57.0,
        "mean": 8.281944444444445,
        "median": 5.0
      },
      "aborted_connections": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 6,
        "min": 0.0,
        "max": 5.0,
        "mean": 0.2263888888888889,
        "median": 0.0
      }
    }
  },
  "column_names": [
    "timestamp",
    "server_id",
    "server_name",
    "resource_type",
    "cpu_usage_percent",
    "memory_usage_percent",
    "disk_usage_percent",
    "disk_io_percent",
    "disk_read_mbps",
    "disk_write_mbps",
    "network_traffic_percent",
    "network_in_mbps",
    "network_out_mbps",
    "load_avg_1min",
    "load_avg_5min",
    "load_avg_15min",
    "process_count",
    "thread_count",
    "open_file_count",
    "temperature_celsius",
    "event_type",
    "query_rate_per_sec",
    "active_connections",
    "cache_hit_rate_percent",
    "avg_query_time_ms",
    "transactions_per_sec",
    "read_percent",
    "write_percent",
    "lock_wait_count",
    "deadlock_count",
    "buffer_pool_usage_percent",
    "table_scans_per_sec",
    "index_usage_percent",
    "temp_tables_created_per_sec",
    "slow_queries_count",
    "aborted_connections"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path, output_path):\n    try:\n        # 1. 读取CSV文件\n        print(f\"正在读取文件: {file_path}\")\n        df = pd.read_csv(file_path)\n        \n        # 确保输出目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            # 写入标题和基本信息\n            f.write(\"=\" * 80 + \"\\n\")\n            f.write(f\"CSV数据分析报告\\n\")\n            f.write(f\"分析时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n            f.write(f\"文件路径: {file_path}\\n\")\n            f.write(\"=\" * 80 + \"\\n\\n\")\n            \n            # 2. 基本数据集信息\n            f.write(\"1. 基本数据集信息\\n\")\n            f.write(\"-\" * 40 + \"\\n\")\n            f.write(f\"行数: {df.shape[0]}\\n\")\n            f.write(f\"列数: {df.shape[1]}\\n\")\n            f.write(f\"列名: {', '.join(df.columns)}\\n\\n\")\n            \n            # 3. 数据类型和缺失值分析\n            f.write(\"2. 数据类型和缺失值分析\\n\")\n            f.write(\"-\" * 40 + \"\\n\")\n            dtypes_info = pd.DataFrame({\n                '数据类型': df.dtypes,\n                '非空值数': df.count(),\n                '缺失值数': df.isna().sum(),\n                '缺失值百分比': (df.isna().sum() / len(df) * 100).round(2)\n            })\n            f.write(dtypes_info.to_string() + \"\\n\\n\")\n            \n            # 4. 分类列分析\n            f.write(\"3. 分类列分析\\n\")\n            f.write(\"-\" * 40 + \"\\n\")\n            categorical_cols = df.select_dtypes(include=['object']).columns\n            for col in categorical_cols:\n                f.write(f\"列: {col}\\n\")\n                value_counts = df[col].value_counts().head(10)\n                f.write(f\"唯一值数量: {df[col].nunique()}\\n\")\n                f.write(\"前10个最常见值:\\n\")\n                for val, count in value_counts.items():\n                    f.write(f\"  - {val}: {count} ({count/len(df)*100:.2f}%)\\n\")\n                f.write(\"\\n\")\n            \n            # 5. 数值列分析\n            f.write(\"4. 数值列分析\\n\")\n            f.write(\"-\" * 40 + \"\\n\")\n            numeric_cols = df.select_dtypes(include=['number']).columns\n            \n            # 计算描述性统计\n            desc_stats = df[numeric_cols].describe().T\n            # 添加其他统计量\n            desc_stats['中位数'] = df[numeric_cols].median()\n            desc_stats['变异系数'] = df[numeric_cols].std() / df[numeric_cols].mean() * 100\n            desc_stats['缺失值'] = df[numeric_cols].isna().sum()\n            desc_stats['缺失比例'] = df[numeric_cols].isna().sum() / len(df) * 100\n            \n            # 格式化输出\n            for col in numeric_cols:\n                f.write(f\"列: {col}\\n\")\n                if df[col].isna().sum() == len(df):\n                    f.write(\"  全部为缺失值\\n\\n\")\n                    continue\n                    \n                stats = desc_stats.loc[col]\n                f.write(f\"  最小值: {stats['min']:.2f}\\n\")\n                f.write(f\"  第一四分位数: {stats['25%']:.2f}\\n\")\n                f.write(f\"  中位数: {stats['50%']:.2f}\\n\")\n                f.write(f\"  平均值: {stats['mean']:.2f}\\n\")\n                f.write(f\"  第三四分位数: {stats['75%']:.2f}\\n\")\n                f.write(f\"  最大值: {stats['max']:.2f}\\n\")\n                f.write(f\"  标准差: {stats['std']:.2f}\\n\")\n                f.write(f\"  变异系数: {stats['变异系数']:.2f}%\\n\")\n                f.write(f\"  缺失值数量: {int(stats['缺失值'])}\\n\")\n                f.write(f\"  缺失值比例: {stats['缺失比例']:.2f}%\\n\\n\")\n            \n            # 6. 资源类型分析\n            if 'resource_type' in df.columns:\n                f.write(\"5. 资源类型分析\\n\")\n                f.write(\"-\" * 40 + \"\\n\")\n                resource_types = df['resource_type'].unique()\n                f.write(f\"资源类型: {', '.join(resource_types)}\\n\\n\")\n                \n                for res_type in resource_types:\n                    f.write(f\"资源类型 '{res_type}' 的统计信息:\\n\")\n                    type_df = df[df['resource_type'] == res_type]\n                    f.write(f\"  记录数: {len(type_df)} ({len(type_df)/len(df)*100:.2f}%)\\n\\n\")\n            \n            # 7. 事件类型分析\n            if 'event_type' in df.columns:\n                f.write(\"6. 事件类型分析\\n\")\n                f.write(\"-\" * 40 + \"\\n\")\n                event_counts = df['event_type'].value_counts()\n                f.write(\"事件类型分布:\\n\")\n                for event, count in event_counts.items():\n                    f.write(f\"  - {event}: {count} ({count/len(df)*100:.2f}%)\\n\")\n                f.write(\"\\n\")\n            \n            # 8. 服务器分析\n            if 'server_id' in df.columns and 'server_name' in df.columns:\n                f.write(\"7. 服务器分析\\n\")\n                f.write(\"-\" * 40 + \"\\n\")\n                servers = df[['server_id', 'server_name']].drop_duplicates()\n                f.write(f\"服务器数量: {len(servers)}\\n\")\n                f.write(\"服务器列表:\\n\")\n                for _, row in servers.iterrows():\n                    f.write(f\"  - {row['server_id']}: {row['server_name']}\\n\")\n                f.write(\"\\n\")\n            \n            # 9. 总结\n            f.write(\"8. 数据总结\\n\")\n            f.write(\"-\" * 40 + \"\\n\")\n            f.write(\"主要发现:\\n\")\n            \n            # CPU使用率\n            if 'cpu_usage_percent' in numeric_cols and not df['cpu_usage_percent'].isna().all():\n                avg_cpu = df['cpu_usage_percent'].mean()\n                max_cpu = df['cpu_usage_percent'].max()\n                f.write(f\"  - CPU平均使用率: {avg_cpu:.2f}%, 最高: {max_cpu:.2f}%\\n\")\n            \n            # 内存使用率\n            if 'memory_usage_percent' in numeric_cols and not df['memory_usage_percent'].isna().all():\n                avg_mem = df['memory_usage_percent'].mean()\n                max_mem = df['memory_usage_percent'].max()\n                f.write(f\"  - 内存平均使用率: {avg_mem:.2f}%, 最高: {max_mem:.2f}%\\n\")\n            \n            # 磁盘使用率\n            if 'disk_usage_percent' in numeric_cols and not df['disk_usage_percent'].isna().all():\n                avg_disk = df['disk_usage_percent'].mean()\n                max_disk = df['disk_usage_percent'].max()\n                f.write(f\"  - 磁盘平均使用率: {avg_disk:.2f}%, 最高: {max_disk:.2f}%\\n\")\n            \n            # 事件分析\n            if 'event_type' in df.columns:\n                normal_events = df[df['event_type'] == 'normal'].shape[0]\n                abnormal_events = df[df['event_type'] != 'normal'].shape[0]\n                f.write(f\"  - 正常事件: {normal_events} ({normal_events/len(df)*100:.2f}%)\\n\")\n                f.write(f\"  - 异常事件: {abnormal_events} ({abnormal_events/len(df)*100:.2f}%)\\n\")\n            \n            # 数据库性能\n            if 'avg_query_time_ms' in numeric_cols and not df['avg_query_time_ms'].isna().all():\n                avg_query_time = df['avg_query_time_ms'].mean()\n                f.write(f\"  - 平均查询时间: {avg_query_time:.2f}ms\\n\")\n            \n            if 'cache_hit_rate_percent' in numeric_cols and not df['cache_hit_rate_percent'].isna().all():\n                avg_cache_hit = df['cache_hit_rate_percent'].mean()\n                f.write(f\"  - 平均缓存命中率: {avg_cache_hit:.2f}%\\n\")\n            \n            if 'slow_queries_count' in numeric_cols and not df['slow_queries_count'].isna().all():\n                total_slow_queries = df['slow_queries_count'].sum()\n                f.write(f\"  - 慢查询总数: {total_slow_queries:.0f}\\n\")\n            \n            f.write(\"\\n\" + \"=\" * 80 + \"\\n\")\n            f.write(\"分析完成\\n\")\n            \n        print(f\"分析完成，结果已保存到: {output_path}\")\n        return True\n        \n    except Exception as e:\n        print(f\"分析过程中出现错误: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    csv_file = \"temp_csv/excel_data_20250317141159.csv\"\n    output_file = \"pngs/analysis_results.txt\"\n    analyze_csv_data(csv_file, output_file)",
      "results": "正在读取文件: temp_csv/excel_data_20250317141159.csv\n分析完成，结果已保存到: pngs/analysis_results.txt\n",
      "txt_results": "================================================================================\nCSV数据分析报告\n分析时间: 2025-03-17 14:12:57\n文件路径: temp_csv/excel_data_20250317141159.csv\n================================================================================\n\n1. 基本数据集信息\n----------------------------------------\n行数: 14400\n列数: 36\n列名: timestamp, server_id, server_name, resource_type, cpu_usage_percent, memory_usage_percent, disk_usage_percent, disk_io_percent, disk_read_mbps, disk_write_mbps, network_traffic_percent, network_in_mbps, network_out_mbps, load_avg_1min, load_avg_5min, load_avg_15min, process_count, thread_count, open_file_count, temperature_celsius, event_type, query_rate_per_sec, active_connections, cache_hit_rate_percent, avg_query_time_ms, transactions_per_sec, read_percent, write_percent, lock_wait_count, deadlock_count, buffer_pool_usage_percent, table_scans_per_sec, index_usage_percent, temp_tables_created_per_sec, slow_queries_count, aborted_connections\n\n2. 数据类型和缺失值分析\n----------------------------------------\n                                数据类型   非空值数  缺失值数  缺失值百分比\ntimestamp                     object  14400     0     0.0\nserver_id                     object  14400     0     0.0\nserver_name                   object  14400     0     0.0\nresource_type                 object  14400     0     0.0\ncpu_usage_percent            float64   7200  7200    50.0\nmemory_usage_percent         float64   7200  7200    50.0\ndisk_usage_percent           float64   7200  7200    50.0\ndisk_io_percent              float64   7200  7200    50.0\ndisk_read_mbps               float64   7200  7200    50.0\ndisk_write_mbps              float64   7200  7200    50.0\nnetwork_traffic_percent      float64   7200  7200    50.0\nnetwork_in_mbps              float64   7200  7200    50.0\nnetwork_out_mbps             float64   7200  7200    50.0\nload_avg_1min                float64   7200  7200    50.0\nload_avg_5min                float64   7200  7200    50.0\nload_avg_15min               float64   7200  7200    50.0\nprocess_count                float64   7200  7200    50.0\nthread_count                 float64   7200  7200    50.0\nopen_file_count              float64   7200  7200    50.0\ntemperature_celsius          float64   7200  7200    50.0\nevent_type                    object  14400     0     0.0\nquery_rate_per_sec           float64   7200  7200    50.0\nactive_connections           float64   7200  7200    50.0\ncache_hit_rate_percent       float64   7200  7200    50.0\navg_query_time_ms            float64   7200  7200    50.0\ntransactions_per_sec         float64   7200  7200    50.0\nread_percent                 float64   7200  7200    50.0\nwrite_percent                float64   7200  7200    50.0\nlock_wait_count              float64   7200  7200    50.0\ndeadlock_count               float64   7200  7200    50.0\nbuffer_pool_usage_percent    float64   7200  7200    50.0\ntable_scans_per_sec          float64   7200  7200    50.0\nindex_usage_percent          float64   7200  7200    50.0\ntemp_tables_created_per_sec  float64   7200  7200    50.0\nslow_queries_count           float64   7200  7200    50.0\naborted_connections          float64   7200  7200    50.0\n\n3. 分类列分析\n----------------------------------------\n列: timestamp\n唯一值数量: 1440\n前10个最常见值:\n  - 2025-02-28 23:43:00: 10 (0.07%)\n  - 2025-02-28 23:42:00: 10 (0.07%)\n  - 2025-02-28 23:41:00: 10 (0.07%)\n  - 2025-02-28 23:40:00: 10 (0.07%)\n  - 2025-02-28 23:39:00: 10 (0.07%)\n  - 2025-02-28 23:38:00: 10 (0.07%)\n  - 2025-02-28 23:37:00: 10 (0.07%)\n  - 2025-02-28 23:36:00: 10 (0.07%)\n  - 2025-02-28 23:35:00: 10 (0.07%)\n  - 2025-02-28 23:34:00: 10 (0.07%)\n\n列: server_id\n唯一值数量: 10\n前10个最常见值:\n  - SRV001: 1440 (10.00%)\n  - SRV002: 1440 (10.00%)\n  - SRV003: 1440 (10.00%)\n  - SRV004: 1440 (10.00%)\n  - SRV005: 1440 (10.00%)\n  - DB001: 1440 (10.00%)\n  - DB002: 1440 (10.00%)\n  - DB003: 1440 (10.00%)\n  - DB004: 1440 (10.00%)\n  - DB005: 1440 (10.00%)\n\n列: server_name\n唯一值数量: 10\n前10个最常见值:\n  - 主应用服务器: 1440 (10.00%)\n  - 备份应用服务器: 1440 (10.00%)\n  - 数据处理服务器: 1440 (10.00%)\n  - 缓存服务器: 1440 (10.00%)\n  - 负载均衡服务器: 1440 (10.00%)\n  - MySQL主数据库: 1440 (10.00%)\n  - MySQL从数据库: 1440 (10.00%)\n  - Redis缓存数据库: 1440 (10.00%)\n  - MongoDB文档数据库: 1440 (10.00%)\n  - Elasticsearch搜索数据库: 1440 (10.00%)\n\n列: resource_type\n唯一值数量: 2\n前10个最常见值:\n  - server: 7200 (50.00%)\n  - database: 7200 (50.00%)\n\n列: event_type\n唯一值数量: 5\n前10个最常见值:\n  - normal: 14103 (97.94%)\n  - network_issue: 122 (0.85%)\n  - high_load: 92 (0.64%)\n  - db_slowdown: 62 (0.43%)\n  - memory_leak: 21 (0.15%)\n\n4. 数值列分析\n----------------------------------------\n列: cpu_usage_percent\n  最小值: 5.58\n  第一四分位数: 21.41\n  中位数: 31.62\n  平均值: 37.58\n  第三四分位数: 55.52\n  最大值: 100.00\n  标准差: 20.65\n  变异系数: 54.95%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: memory_usage_percent\n  最小值: 27.41\n  第一四分位数: 40.99\n  中位数: 51.70\n  平均值: 53.57\n  第三四分位数: 64.58\n  最大值: 100.00\n  标准差: 15.33\n  变异系数: 28.61%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: disk_usage_percent\n  最小值: 50.00\n  第一四分位数: 50.00\n  中位数: 50.00\n  平均值: 52.84\n  第三四分位数: 52.26\n  最大值: 89.16\n  标准差: 5.81\n  变异系数: 11.00%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: disk_io_percent\n  最小值: 0.48\n  第一四分位数: 14.11\n  中位数: 23.18\n  平均值: 29.27\n  第三四分位数: 45.57\n  最大值: 93.00\n  标准差: 19.41\n  变异系数: 66.29%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: disk_read_mbps\n  最小值: 0.26\n  第一四分位数: 15.30\n  中位数: 28.14\n  平均值: 37.04\n  第三四分位数: 50.22\n  最大值: 180.22\n  标准差: 29.03\n  变异系数: 78.39%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: disk_write_mbps\n  最小值: 0.18\n  第一四分位数: 10.64\n  中位数: 19.72\n  平均值: 26.24\n  第三四分位数: 35.21\n  最大值: 137.12\n  标准差: 21.20\n  变异系数: 80.79%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: network_traffic_percent\n  最小值: 5.22\n  第一四分位数: 21.30\n  中位数: 32.30\n  平均值: 38.25\n  第三四分位数: 55.96\n  最大值: 100.00\n  标准差: 21.58\n  变异系数: 56.41%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: network_in_mbps\n  最小值: 3.66\n  第一四分位数: 30.33\n  中位数: 52.32\n  平均值: 66.60\n  第三四分位数: 87.41\n  最大值: 298.57\n  标准差: 49.50\n  变异系数: 74.32%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: network_out_mbps\n  最小值: 2.02\n  第一四分位数: 19.93\n  中位数: 34.76\n  平均值: 44.22\n  第三四分位数: 59.17\n  最大值: 194.92\n  标准差: 32.72\n  变异系数: 74.00%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: load_avg_1min\n  最小值: 0.22\n  第一四分位数: 0.86\n  中位数: 1.26\n  平均值: 1.50\n  第三四分位数: 2.22\n  最大值: 4.00\n  标准差: 0.83\n  变异系数: 54.95%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: load_avg_5min\n  最小值: 0.20\n  第一四分位数: 0.84\n  中位数: 1.26\n  平均值: 1.50\n  第三四分位数: 2.15\n  最大值: 4.64\n  标准差: 0.85\n  变异系数: 56.62%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: load_avg_15min\n  最小值: 0.17\n  第一四分位数: 0.82\n  中位数: 1.27\n  平均值: 1.50\n  第三四分位数: 2.07\n  最大值: 4.87\n  标准差: 0.87\n  变异系数: 57.74%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: process_count\n  最小值: 104.00\n  第一四分位数: 142.00\n  中位数: 163.00\n  平均值: 174.55\n  第三四分位数: 210.00\n  最大值: 305.00\n  标准差: 41.73\n  变异系数: 23.91%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: thread_count\n  最小值: 321.00\n  第一四分位数: 696.75\n  中位数: 914.00\n  平均值: 963.67\n  第三四分位数: 1171.00\n  最大值: 2330.00\n  标准差: 349.55\n  变异系数: 36.27%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: open_file_count\n  最小值: 761.00\n  第一四分位数: 2252.75\n  中位数: 3083.00\n  平均值: 3376.41\n  第三四分位数: 4230.00\n  最大值: 10032.00\n  标准差: 1507.21\n  变异系数: 44.64%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: temperature_celsius\n  最小值: 35.00\n  第一四分位数: 42.72\n  中位数: 50.26\n  平均值: 50.18\n  第三四分位数: 57.80\n  最大值: 64.99\n  标准差: 8.65\n  变异系数: 17.24%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: query_rate_per_sec\n  最小值: 51.60\n  第一四分位数: 173.32\n  中位数: 242.72\n  平均值: 349.16\n  第三四分位数: 558.94\n  最大值: 1242.16\n  标准差: 246.15\n  变异系数: 70.50%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: active_connections\n  最小值: 5.09\n  第一四分位数: 20.21\n  中位数: 31.25\n  平均值: 40.83\n  第三四分位数: 58.57\n  最大值: 196.48\n  标准差: 28.10\n  变异系数: 68.83%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: cache_hit_rate_percent\n  最小值: 27.49\n  第一四分位数: 80.75\n  中位数: 85.52\n  平均值: 84.69\n  第三四分位数: 89.93\n  最大值: 99.81\n  标准差: 7.98\n  变异系数: 9.43%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: avg_query_time_ms\n  最小值: 8.22\n  第一四分位数: 14.01\n  中位数: 16.87\n  平均值: 18.01\n  第三四分位数: 20.02\n  最大值: 246.53\n  标准差: 12.64\n  变异系数: 70.19%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: transactions_per_sec\n  最小值: 3.64\n  第一四分位数: 16.78\n  中位数: 25.93\n  平均值: 38.26\n  第三四分位数: 51.38\n  最大值: 218.76\n  标准差: 30.84\n  变异系数: 80.59%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: read_percent\n  最小值: 66.67\n  第一四分位数: 78.01\n  中位数: 83.43\n  平均值: 81.80\n  第三四分位数: 86.73\n  最大值: 88.89\n  标准差: 5.87\n  变异系数: 7.17%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: write_percent\n  最小值: 11.11\n  第一四分位数: 13.27\n  中位数: 16.57\n  平均值: 18.20\n  第三四分位数: 21.99\n  最大值: 33.33\n  标准差: 5.87\n  变异系数: 32.24%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: lock_wait_count\n  最小值: 0.00\n  第一四分位数: 1.00\n  中位数: 2.00\n  平均值: 3.61\n  第三四分位数: 5.00\n  最大值: 37.00\n  标准差: 4.09\n  变异系数: 113.11%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: deadlock_count\n  最小值: 0.00\n  第一四分位数: 0.00\n  中位数: 0.00\n  平均值: 0.02\n  第三四分位数: 0.00\n  最大值: 3.00\n  标准差: 0.16\n  变异系数: 692.33%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: buffer_pool_usage_percent\n  最小值: 50.00\n  第一四分位数: 61.26\n  中位数: 72.35\n  平均值: 72.37\n  第三四分位数: 83.49\n  最大值: 95.00\n  标准差: 12.93\n  变异系数: 17.87%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: table_scans_per_sec\n  最小值: 0.01\n  第一四分位数: 12.46\n  中位数: 25.29\n  平均值: 25.04\n  第三四分位数: 37.56\n  最大值: 50.00\n  标准差: 14.46\n  变异系数: 57.73%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: index_usage_percent\n  最小值: 60.00\n  第一四分位数: 69.69\n  中位数: 79.56\n  平均值: 79.50\n  第三四分位数: 89.32\n  最大值: 98.99\n  标准差: 11.26\n  变异系数: 14.16%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: temp_tables_created_per_sec\n  最小值: 0.00\n  第一四分位数: 5.11\n  中位数: 10.17\n  平均值: 10.13\n  第三四分位数: 15.17\n  最大值: 20.00\n  标准差: 5.78\n  变异系数: 57.12%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: slow_queries_count\n  最小值: 0.00\n  第一四分位数: 2.00\n  中位数: 5.00\n  平均值: 8.28\n  第三四分位数: 10.00\n  最大值: 57.00\n  标准差: 8.72\n  变异系数: 105.27%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n列: aborted_connections\n  最小值: 0.00\n  第一四分位数: 0.00\n  中位数: 0.00\n  平均值: 0.23\n  第三四分位数: 0.00\n  最大值: 5.00\n  标准差: 0.53\n  变异系数: 235.54%\n  缺失值数量: 7200\n  缺失值比例: 50.00%\n\n5. 资源类型分析\n----------------------------------------\n资源类型: server, database\n\n资源类型 'server' 的统计信息:\n  记录数: 7200 (50.00%)\n\n资源类型 'database' 的统计信息:\n  记录数: 7200 (50.00%)\n\n6. 事件类型分析\n----------------------------------------\n事件类型分布:\n  - normal: 14103 (97.94%)\n  - network_issue: 122 (0.85%)\n  - high_load: 92 (0.64%)\n  - db_slowdown: 62 (0.43%)\n  - memory_leak: 21 (0.15%)\n\n7. 服务器分析\n----------------------------------------\n服务器数量: 10\n服务器列表:\n  - SRV001: 主应用服务器\n  - SRV002: 备份应用服务器\n  - SRV003: 数据处理服务器\n  - SRV004: 缓存服务器\n  - SRV005: 负载均衡服务器\n  - DB001: MySQL主数据库\n  - DB002: MySQL从数据库\n  - DB003: Redis缓存数据库\n  - DB004: MongoDB文档数据库\n  - DB005: Elasticsearch搜索数据库\n\n8. 数据总结\n----------------------------------------\n主要发现:\n  - CPU平均使用率: 37.58%, 最高: 100.00%\n  - 内存平均使用率: 53.57%, 最高: 100.00%\n  - 磁盘平均使用率: 52.84%, 最高: 89.16%\n  - 正常事件: 14103 (97.94%)\n  - 异常事件: 297 (2.06%)\n  - 平均查询时间: 18.01ms\n  - 平均缓存命中率: 84.69%\n  - 慢查询总数: 59630\n\n================================================================================\n分析完成\n"
    },
    "分组对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\n\ndef load_data(file_path):\n    \"\"\"加载CSV数据文件\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        print(f\"成功加载数据，共{len(df)}行，{len(df.columns)}列\")\n        return df\n    except Exception as e:\n        print(f\"加载数据失败: {e}\")\n        return None\n\ndef analyze_columns(df):\n    \"\"\"分析数据列类型和基本统计信息\"\"\"\n    result = []\n    result.append(\"数据列分析\\n\" + \"=\"*50)\n    \n    # 区分数值列和分类列\n    numeric_cols = df.select_dtypes(include=['number']).columns.tolist()\n    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n    \n    result.append(f\"\\n数值列 ({len(numeric_cols)}): {', '.join(numeric_cols)}\")\n    result.append(f\"分类列 ({len(categorical_cols)}): {', '.join(categorical_cols)}\")\n    \n    # 分析分类列\n    result.append(\"\\n分类列分析:\\n\" + \"-\"*50)\n    for col in categorical_cols:\n        value_counts = df[col].value_counts()\n        unique_count = len(value_counts)\n        result.append(f\"\\n{col} (唯一值: {unique_count}):\")\n        if unique_count <= 10:  # 如果唯一值较少，显示所有值的分布\n            for val, count in value_counts.items():\n                result.append(f\"  {val}: {count} ({count/len(df):.2%})\")\n        else:  # 否则只显示前5个\n            for val, count in value_counts.head(5).items():\n                result.append(f\"  {val}: {count} ({count/len(df):.2%})\")\n            result.append(f\"  ... 及其他 {unique_count-5} 个值\")\n    \n    # 分析数值列\n    result.append(\"\\n数值列分析:\\n\" + \"-\"*50)\n    for col in numeric_cols:\n        if df[col].notna().sum() > 0:  # 确保列有非空值\n            stats = df[col].describe()\n            result.append(f\"\\n{col}:\")\n            result.append(f\"  缺失值: {df[col].isna().sum()} ({df[col].isna().sum()/len(df):.2%})\")\n            result.append(f\"  均值: {stats['mean']:.2f}\")\n            result.append(f\"  中位数: {stats['50%']:.2f}\")\n            result.append(f\"  标准差: {stats['std']:.2f}\")\n            result.append(f\"  最小值: {stats['min']:.2f}\")\n            result.append(f\"  最大值: {stats['max']:.2f}\")\n    \n    return \"\\n\".join(result)\n\ndef group_comparison(df):\n    \"\"\"对数据进行分组比较分析\"\"\"\n    result = []\n    result.append(\"\\n分组比较分析\\n\" + \"=\"*50)\n    \n    # 按服务器类型分组比较\n    if 'server_name' in df.columns:\n        result.append(\"\\n按服务器名称分组比较:\\n\" + \"-\"*50)\n        server_groups = df.groupby('server_name')\n        \n        # 选择关键指标进行比较\n        key_metrics = ['cpu_usage_percent', 'memory_usage_percent', 'disk_usage_percent', \n                      'network_traffic_percent', 'load_avg_1min']\n        \n        # 确保只选择存在的列\n        key_metrics = [col for col in key_metrics if col in df.columns]\n        \n        if key_metrics:\n            comparison = server_groups[key_metrics].mean().round(2)\n            result.append(\"\\n各服务器平均资源使用情况:\")\n            result.append(comparison.to_string())\n            \n            # 找出每个指标的最高和最低服务器\n            result.append(\"\\n各指标最高/最低的服务器:\")\n            for metric in key_metrics:\n                if pd.notna(comparison[metric]).any():\n                    max_server = comparison[metric].idxmax()\n                    min_server = comparison[metric].idxmin()\n                    max_val = comparison.loc[max_server, metric]\n                    min_val = comparison.loc[min_server, metric]\n                    result.append(f\"  {metric}:\")\n                    result.append(f\"    最高: {max_server} ({max_val:.2f})\")\n                    result.append(f\"    最低: {min_server} ({min_val:.2f})\")\n    \n    # 按资源类型分组比较\n    if 'resource_type' in df.columns:\n        result.append(\"\\n按资源类型分组比较:\\n\" + \"-\"*50)\n        resource_groups = df.groupby('resource_type')\n        \n        # 选择数据库相关指标\n        db_metrics = ['query_rate_per_sec', 'active_connections', 'cache_hit_rate_percent',\n                     'avg_query_time_ms', 'transactions_per_sec']\n        \n        # 确保只选择存在的列\n        db_metrics = [col for col in db_metrics if col in df.columns]\n        \n        if db_metrics:\n            db_comparison = resource_groups[db_metrics].mean().round(2)\n            result.append(\"\\n不同资源类型的数据库性能指标:\")\n            result.append(db_comparison.to_string())\n    \n    # 按事件类型分组比较\n    if 'event_type' in df.columns:\n        result.append(\"\\n按事件类型分组比较:\\n\" + \"-\"*50)\n        event_groups = df.groupby('event_type')\n        \n        # 选择系统负载指标\n        system_metrics = ['cpu_usage_percent', 'memory_usage_percent', \n                         'load_avg_1min', 'process_count']\n        \n        # 确保只选择存在的列\n        system_metrics = [col for col in system_metrics if col in df.columns]\n        \n        if system_metrics:\n            event_comparison = event_groups[system_metrics].mean().round(2)\n            result.append(\"\\n不同事件类型的系统负载情况:\")\n            result.append(event_comparison.to_string())\n    \n    # 时间段分析\n    if 'timestamp' in df.columns:\n        try:\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            df['hour'] = df['timestamp'].dt.hour\n            \n            result.append(\"\\n按时间段分组比较:\\n\" + \"-\"*50)\n            time_groups = df.groupby('hour')\n            \n            # 选择性能指标\n            perf_metrics = ['cpu_usage_percent', 'memory_usage_percent', \n                           'network_traffic_percent', 'query_rate_per_sec']\n            \n            # 确保只选择存在的列\n            perf_metrics = [col for col in perf_metrics if col in df.columns]\n            \n            if perf_metrics:\n                time_comparison = time_groups[perf_metrics].mean().round(2)\n                \n                # 找出高峰和低谷时段\n                peak_hours = {}\n                valley_hours = {}\n                for metric in perf_metrics:\n                    if pd.notna(time_comparison[metric]).any():\n                        peak_hours[metric] = time_comparison[metric].idxmax()\n                        valley_hours[metric] = time_comparison[metric].idxmin()\n                \n                result.append(\"\\n各指标的高峰和低谷时段:\")\n                for metric in perf_metrics:\n                    if metric in peak_hours:\n                        result.append(f\"  {metric}:\")\n                        result.append(f\"    高峰时段: {peak_hours[metric]}时 ({time_comparison.loc[peak_hours[metric], metric]:.2f})\")\n                        result.append(f\"    低谷时段: {valley_hours[metric]}时 ({time_comparison.loc[valley_hours[metric], metric]:.2f})\")\n        except Exception as e:\n            result.append(f\"时间分析出错: {e}\")\n    \n    return \"\\n\".join(result)\n\ndef save_results(content, output_path):\n    \"\"\"保存分析结果到文本文件\"\"\"\n    try:\n        # 确保目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(content)\n        print(f\"分析结果已保存到: {output_path}\")\n        return True\n    except Exception as e:\n        print(f\"保存结果失败: {e}\")\n        return False\n\ndef main():\n    file_path = \"temp_csv/excel_data_20250317141159.csv\"\n    output_path = \"pngs/group_comparison_results.txt\"\n    \n    # 加载数据\n    df = load_data(file_path)\n    if df is None:\n        return\n    \n    # 生成报告内容\n    report = []\n    report.append(f\"数据分析报告\\n{'='*50}\")\n    report.append(f\"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    report.append(f\"数据文件: {file_path}\")\n    report.append(f\"数据行数: {len(df)}\")\n    \n    # 添加列分析\n    report.append(analyze_columns(df))\n    \n    # 添加分组比较\n    report.append(group_comparison(df))\n    \n    # 保存结果\n    save_results(\"\\n\".join(report), output_path)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "成功加载数据，共14400行，36列\n分析结果已保存到: pngs/group_comparison_results.txt\n",
      "txt_results": "数据分析报告\n==================================================\n生成时间: 2025-03-17 14:14:57\n数据文件: temp_csv/excel_data_20250317141159.csv\n数据行数: 14400\n数据列分析\n==================================================\n\n数值列 (31): cpu_usage_percent, memory_usage_percent, disk_usage_percent, disk_io_percent, disk_read_mbps, disk_write_mbps, network_traffic_percent, network_in_mbps, network_out_mbps, load_avg_1min, load_avg_5min, load_avg_15min, process_count, thread_count, open_file_count, temperature_celsius, query_rate_per_sec, active_connections, cache_hit_rate_percent, avg_query_time_ms, transactions_per_sec, read_percent, write_percent, lock_wait_count, deadlock_count, buffer_pool_usage_percent, table_scans_per_sec, index_usage_percent, temp_tables_created_per_sec, slow_queries_count, aborted_connections\n分类列 (5): timestamp, server_id, server_name, resource_type, event_type\n\n分类列分析:\n--------------------------------------------------\n\ntimestamp (唯一值: 1440):\n  2025-02-28 23:43:00: 10 (0.07%)\n  2025-02-28 23:42:00: 10 (0.07%)\n  2025-02-28 23:41:00: 10 (0.07%)\n  2025-02-28 23:40:00: 10 (0.07%)\n  2025-02-28 23:39:00: 10 (0.07%)\n  ... 及其他 1435 个值\n\nserver_id (唯一值: 10):\n  SRV001: 1440 (10.00%)\n  SRV002: 1440 (10.00%)\n  SRV003: 1440 (10.00%)\n  SRV004: 1440 (10.00%)\n  SRV005: 1440 (10.00%)\n  DB001: 1440 (10.00%)\n  DB002: 1440 (10.00%)\n  DB003: 1440 (10.00%)\n  DB004: 1440 (10.00%)\n  DB005: 1440 (10.00%)\n\nserver_name (唯一值: 10):\n  主应用服务器: 1440 (10.00%)\n  备份应用服务器: 1440 (10.00%)\n  数据处理服务器: 1440 (10.00%)\n  缓存服务器: 1440 (10.00%)\n  负载均衡服务器: 1440 (10.00%)\n  MySQL主数据库: 1440 (10.00%)\n  MySQL从数据库: 1440 (10.00%)\n  Redis缓存数据库: 1440 (10.00%)\n  MongoDB文档数据库: 1440 (10.00%)\n  Elasticsearch搜索数据库: 1440 (10.00%)\n\nresource_type (唯一值: 2):\n  server: 7200 (50.00%)\n  database: 7200 (50.00%)\n\nevent_type (唯一值: 5):\n  normal: 14103 (97.94%)\n  network_issue: 122 (0.85%)\n  high_load: 92 (0.64%)\n  db_slowdown: 62 (0.43%)\n  memory_leak: 21 (0.15%)\n\n数值列分析:\n--------------------------------------------------\n\ncpu_usage_percent:\n  缺失值: 7200 (50.00%)\n  均值: 37.58\n  中位数: 31.62\n  标准差: 20.65\n  最小值: 5.58\n  最大值: 100.00\n\nmemory_usage_percent:\n  缺失值: 7200 (50.00%)\n  均值: 53.57\n  中位数: 51.70\n  标准差: 15.33\n  最小值: 27.41\n  最大值: 100.00\n\ndisk_usage_percent:\n  缺失值: 7200 (50.00%)\n  均值: 52.84\n  中位数: 50.00\n  标准差: 5.81\n  最小值: 50.00\n  最大值: 89.16\n\ndisk_io_percent:\n  缺失值: 7200 (50.00%)\n  均值: 29.27\n  中位数: 23.18\n  标准差: 19.41\n  最小值: 0.48\n  最大值: 93.00\n\ndisk_read_mbps:\n  缺失值: 7200 (50.00%)\n  均值: 37.04\n  中位数: 28.14\n  标准差: 29.03\n  最小值: 0.26\n  最大值: 180.22\n\ndisk_write_mbps:\n  缺失值: 7200 (50.00%)\n  均值: 26.24\n  中位数: 19.72\n  标准差: 21.20\n  最小值: 0.18\n  最大值: 137.12\n\nnetwork_traffic_percent:\n  缺失值: 7200 (50.00%)\n  均值: 38.25\n  中位数: 32.30\n  标准差: 21.58\n  最小值: 5.22\n  最大值: 100.00\n\nnetwork_in_mbps:\n  缺失值: 7200 (50.00%)\n  均值: 66.60\n  中位数: 52.32\n  标准差: 49.50\n  最小值: 3.66\n  最大值: 298.57\n\nnetwork_out_mbps:\n  缺失值: 7200 (50.00%)\n  均值: 44.22\n  中位数: 34.76\n  标准差: 32.72\n  最小值: 2.02\n  最大值: 194.92\n\nload_avg_1min:\n  缺失值: 7200 (50.00%)\n  均值: 1.50\n  中位数: 1.26\n  标准差: 0.83\n  最小值: 0.22\n  最大值: 4.00\n\nload_avg_5min:\n  缺失值: 7200 (50.00%)\n  均值: 1.50\n  中位数: 1.26\n  标准差: 0.85\n  最小值: 0.20\n  最大值: 4.64\n\nload_avg_15min:\n  缺失值: 7200 (50.00%)\n  均值: 1.50\n  中位数: 1.27\n  标准差: 0.87\n  最小值: 0.17\n  最大值: 4.87\n\nprocess_count:\n  缺失值: 7200 (50.00%)\n  均值: 174.55\n  中位数: 163.00\n  标准差: 41.73\n  最小值: 104.00\n  最大值: 305.00\n\nthread_count:\n  缺失值: 7200 (50.00%)\n  均值: 963.67\n  中位数: 914.00\n  标准差: 349.55\n  最小值: 321.00\n  最大值: 2330.00\n\nopen_file_count:\n  缺失值: 7200 (50.00%)\n  均值: 3376.41\n  中位数: 3083.00\n  标准差: 1507.21\n  最小值: 761.00\n  最大值: 10032.00\n\ntemperature_celsius:\n  缺失值: 7200 (50.00%)\n  均值: 50.18\n  中位数: 50.26\n  标准差: 8.65\n  最小值: 35.00\n  最大值: 64.99\n\nquery_rate_per_sec:\n  缺失值: 7200 (50.00%)\n  均值: 349.16\n  中位数: 242.72\n  标准差: 246.15\n  最小值: 51.60\n  最大值: 1242.16\n\nactive_connections:\n  缺失值: 7200 (50.00%)\n  均值: 40.83\n  中位数: 31.25\n  标准差: 28.10\n  最小值: 5.09\n  最大值: 196.48\n\ncache_hit_rate_percent:\n  缺失值: 7200 (50.00%)\n  均值: 84.69\n  中位数: 85.52\n  标准差: 7.98\n  最小值: 27.49\n  最大值: 99.81\n\navg_query_time_ms:\n  缺失值: 7200 (50.00%)\n  均值: 18.01\n  中位数: 16.87\n  标准差: 12.64\n  最小值: 8.22\n  最大值: 246.53\n\ntransactions_per_sec:\n  缺失值: 7200 (50.00%)\n  均值: 38.26\n  中位数: 25.93\n  标准差: 30.84\n  最小值: 3.64\n  最大值: 218.76\n\nread_percent:\n  缺失值: 7200 (50.00%)\n  均值: 81.80\n  中位数: 83.43\n  标准差: 5.87\n  最小值: 66.67\n  最大值: 88.89\n\nwrite_percent:\n  缺失值: 7200 (50.00%)\n  均值: 18.20\n  中位数: 16.57\n  标准差: 5.87\n  最小值: 11.11\n  最大值: 33.33\n\nlock_wait_count:\n  缺失值: 7200 (50.00%)\n  均值: 3.61\n  中位数: 2.00\n  标准差: 4.09\n  最小值: 0.00\n  最大值: 37.00\n\ndeadlock_count:\n  缺失值: 7200 (50.00%)\n  均值: 0.02\n  中位数: 0.00\n  标准差: 0.16\n  最小值: 0.00\n  最大值: 3.00\n\nbuffer_pool_usage_percent:\n  缺失值: 7200 (50.00%)\n  均值: 72.37\n  中位数: 72.35\n  标准差: 12.93\n  最小值: 50.00\n  最大值: 95.00\n\ntable_scans_per_sec:\n  缺失值: 7200 (50.00%)\n  均值: 25.04\n  中位数: 25.29\n  标准差: 14.46\n  最小值: 0.01\n  最大值: 50.00\n\nindex_usage_percent:\n  缺失值: 7200 (50.00%)\n  均值: 79.50\n  中位数: 79.56\n  标准差: 11.26\n  最小值: 60.00\n  最大值: 98.99\n\ntemp_tables_created_per_sec:\n  缺失值: 7200 (50.00%)\n  均值: 10.13\n  中位数: 10.17\n  标准差: 5.78\n  最小值: 0.00\n  最大值: 20.00\n\nslow_queries_count:\n  缺失值: 7200 (50.00%)\n  均值: 8.28\n  中位数: 5.00\n  标准差: 8.72\n  最小值: 0.00\n  最大值: 57.00\n\naborted_connections:\n  缺失值: 7200 (50.00%)\n  均值: 0.23\n  中位数: 0.00\n  标准差: 0.53\n  最小值: 0.00\n  最大值: 5.00\n\n分组比较分析\n==================================================\n\n按服务器名称分组比较:\n--------------------------------------------------\n\n各服务器平均资源使用情况:\n                    cpu_usage_percent  memory_usage_percent  disk_usage_percent  network_traffic_percent  load_avg_1min\nserver_name                                                                                                            \nElasticsearch搜索数据库                NaN                   NaN                 NaN                      NaN            NaN\nMongoDB文档数据库                      NaN                   NaN                 NaN                      NaN            NaN\nMySQL主数据库                         NaN                   NaN                 NaN                      NaN            NaN\nMySQL从数据库                         NaN                   NaN                 NaN                      NaN            NaN\nRedis缓存数据库                        NaN                   NaN                 NaN                      NaN            NaN\n主应用服务器                          38.98                 54.23               53.11                    38.63           1.56\n备份应用服务器                         37.47                 53.61               52.70                    39.86           1.50\n数据处理服务器                         36.67                 53.59               52.98                    36.33           1.47\n缓存服务器                           36.74                 52.64               52.64                    36.80           1.47\n负载均衡服务器                         38.05                 53.77               52.78                    39.65           1.52\n\n各指标最高/最低的服务器:\n  cpu_usage_percent:\n    最高: 主应用服务器 (38.98)\n    最低: 数据处理服务器 (36.67)\n  memory_usage_percent:\n    最高: 主应用服务器 (54.23)\n    最低: 缓存服务器 (52.64)\n  disk_usage_percent:\n    最高: 主应用服务器 (53.11)\n    最低: 缓存服务器 (52.64)\n  network_traffic_percent:\n    最高: 备份应用服务器 (39.86)\n    最低: 数据处理服务器 (36.33)\n  load_avg_1min:\n    最高: 主应用服务器 (1.56)\n    最低: 数据处理服务器 (1.47)\n\n按资源类型分组比较:\n--------------------------------------------------\n\n不同资源类型的数据库性能指标:\n               query_rate_per_sec  active_connections  cache_hit_rate_percent  avg_query_time_ms  transactions_per_sec\nresource_type                                                                                                         \ndatabase                   349.16               40.83                   84.69              18.01                 38.26\nserver                        NaN                 NaN                     NaN                NaN                   NaN\n\n按事件类型分组比较:\n--------------------------------------------------\n\n不同事件类型的系统负载情况:\n               cpu_usage_percent  memory_usage_percent  load_avg_1min  process_count\nevent_type                                                                          \ndb_slowdown                  NaN                   NaN            NaN            NaN\nhigh_load                  90.82                 88.17           3.63         280.96\nmemory_leak                68.50                 94.13           2.74         237.52\nnetwork_issue              50.49                 60.65           2.02         200.98\nnormal                     36.91                 53.10           1.48         173.20\n\n按时间段分组比较:\n--------------------------------------------------\n\n各指标的高峰和低谷时段:\n  cpu_usage_percent:\n    高峰时段: 9时 (65.46)\n    低谷时段: 23时 (24.49)\n  memory_usage_percent:\n    高峰时段: 10时 (73.88)\n    低谷时段: 5时 (44.32)\n  network_traffic_percent:\n    高峰时段: 11时 (65.11)\n    低谷时段: 23时 (24.44)\n  query_rate_per_sec:\n    高峰时段: 15时 (707.98)\n    低谷时段: 22时 (193.56)"
    },
    "比例分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport os\nimport numpy as np\nfrom datetime import datetime\n\ndef read_csv_file(file_path):\n    \"\"\"读取CSV文件并返回DataFrame\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except Exception as e:\n        print(f\"读取CSV文件时出错: {e}\")\n        return None\n\ndef analyze_categorical_columns(df):\n    \"\"\"分析分类列的分布情况\"\"\"\n    results = []\n    \n    # 识别分类列(object类型和唯一值较少的数值列)\n    categorical_columns = []\n    for col in df.columns:\n        if df[col].dtype == 'object':\n            categorical_columns.append(col)\n        elif df[col].dtype in ['int64', 'float64'] and df[col].nunique() < 50:\n            categorical_columns.append(col)\n    \n    # 分析每个分类列\n    for col in categorical_columns:\n        # 计算分布\n        value_counts = df[col].value_counts(dropna=False)\n        total = len(df)\n        \n        # 格式化结果\n        section = f\"列: {col}\\n\"\n        section += \"-\" * 50 + \"\\n\"\n        section += f\"总记录数: {total}\\n\"\n        section += f\"唯一值数量: {df[col].nunique()}\\n\\n\"\n        section += \"分布情况:\\n\"\n        \n        # 对于值较多的列，只显示前15个\n        if len(value_counts) > 15:\n            top_values = value_counts.head(15)\n            section += \"（仅显示前15个最常见值）\\n\"\n        else:\n            top_values = value_counts\n        \n        # 添加每个值的计数和百分比\n        for value, count in top_values.items():\n            percentage = (count / total) * 100\n            value_str = str(value) if pd.notna(value) else \"缺失值\"\n            section += f\"  {value_str}: {count} ({percentage:.2f}%)\\n\"\n        \n        results.append(section)\n    \n    return results\n\ndef save_results_to_text(results, output_path):\n    \"\"\"将结果保存为文本文件\"\"\"\n    try:\n        # 确保目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(\"数据分类分布分析报告\\n\")\n            f.write(\"=\" * 60 + \"\\n\")\n            f.write(f\"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\\n\")\n            \n            for section in results:\n                f.write(section)\n                f.write(\"\\n\" + \"=\" * 60 + \"\\n\\n\")\n            \n            f.write(\"分析完成\\n\")\n        \n        print(f\"结果已保存到 {output_path}\")\n        return True\n    except Exception as e:\n        print(f\"保存结果时出错: {e}\")\n        return False\n\ndef main():\n    # 文件路径\n    file_path = \"temp_csv/excel_data_20250317141159.csv\"\n    output_path = \"pngs/category_distribution_results.txt\"\n    \n    # 读取CSV文件\n    df = read_csv_file(file_path)\n    if df is None:\n        return\n    \n    # 分析分类列\n    results = analyze_categorical_columns(df)\n    \n    # 保存结果\n    save_results_to_text(results, output_path)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "结果已保存到 pngs/category_distribution_results.txt\n",
      "txt_results": "数据分类分布分析报告\n============================================================\n生成时间: 2025-03-17 14:15:32\n\n列: timestamp\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 1440\n\n分布情况:\n（仅显示前15个最常见值）\n  2025-02-28 23:43:00: 10 (0.07%)\n  2025-02-28 23:42:00: 10 (0.07%)\n  2025-02-28 23:41:00: 10 (0.07%)\n  2025-02-28 23:40:00: 10 (0.07%)\n  2025-02-28 23:39:00: 10 (0.07%)\n  2025-02-28 23:38:00: 10 (0.07%)\n  2025-02-28 23:37:00: 10 (0.07%)\n  2025-02-28 23:36:00: 10 (0.07%)\n  2025-02-28 23:35:00: 10 (0.07%)\n  2025-02-28 23:34:00: 10 (0.07%)\n  2025-02-28 23:33:00: 10 (0.07%)\n  2025-02-28 23:32:00: 10 (0.07%)\n  2025-02-28 23:31:00: 10 (0.07%)\n  2025-02-28 23:30:00: 10 (0.07%)\n  2025-02-28 23:29:00: 10 (0.07%)\n\n============================================================\n\n列: server_id\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 10\n\n分布情况:\n  SRV001: 1440 (10.00%)\n  SRV002: 1440 (10.00%)\n  SRV003: 1440 (10.00%)\n  SRV004: 1440 (10.00%)\n  SRV005: 1440 (10.00%)\n  DB001: 1440 (10.00%)\n  DB002: 1440 (10.00%)\n  DB003: 1440 (10.00%)\n  DB004: 1440 (10.00%)\n  DB005: 1440 (10.00%)\n\n============================================================\n\n列: server_name\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 10\n\n分布情况:\n  主应用服务器: 1440 (10.00%)\n  备份应用服务器: 1440 (10.00%)\n  数据处理服务器: 1440 (10.00%)\n  缓存服务器: 1440 (10.00%)\n  负载均衡服务器: 1440 (10.00%)\n  MySQL主数据库: 1440 (10.00%)\n  MySQL从数据库: 1440 (10.00%)\n  Redis缓存数据库: 1440 (10.00%)\n  MongoDB文档数据库: 1440 (10.00%)\n  Elasticsearch搜索数据库: 1440 (10.00%)\n\n============================================================\n\n列: resource_type\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 2\n\n分布情况:\n  server: 7200 (50.00%)\n  database: 7200 (50.00%)\n\n============================================================\n\n列: event_type\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 5\n\n分布情况:\n  normal: 14103 (97.94%)\n  network_issue: 122 (0.85%)\n  high_load: 92 (0.64%)\n  db_slowdown: 62 (0.43%)\n  memory_leak: 21 (0.15%)\n\n============================================================\n\n列: lock_wait_count\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 30\n\n分布情况:\n（仅显示前15个最常见值）\n  缺失值: 7200 (50.00%)\n  0.0: 1391 (9.66%)\n  1.0: 1344 (9.33%)\n  2.0: 1063 (7.38%)\n  3.0: 828 (5.75%)\n  4.0: 593 (4.12%)\n  5.0: 464 (3.22%)\n  6.0: 305 (2.12%)\n  7.0: 188 (1.31%)\n  8.0: 153 (1.06%)\n  10.0: 137 (0.95%)\n  9.0: 137 (0.95%)\n  11.0: 123 (0.85%)\n  12.0: 109 (0.76%)\n  13.0: 94 (0.65%)\n\n============================================================\n\n列: deadlock_count\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 4\n\n分布情况:\n  缺失值: 7200 (50.00%)\n  0.0: 7044 (48.92%)\n  1.0: 148 (1.03%)\n  2.0: 7 (0.05%)\n  3.0: 1 (0.01%)\n\n============================================================\n\n列: slow_queries_count\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 49\n\n分布情况:\n（仅显示前15个最常见值）\n  缺失值: 7200 (50.00%)\n  1.0: 648 (4.50%)\n  3.0: 626 (4.35%)\n  2.0: 624 (4.33%)\n  0.0: 617 (4.28%)\n  4.0: 556 (3.86%)\n  5.0: 549 (3.81%)\n  6.0: 463 (3.22%)\n  7.0: 437 (3.03%)\n  8.0: 368 (2.56%)\n  9.0: 280 (1.94%)\n  10.0: 258 (1.79%)\n  11.0: 207 (1.44%)\n  12.0: 175 (1.22%)\n  13.0: 113 (0.78%)\n\n============================================================\n\n列: aborted_connections\n--------------------------------------------------\n总记录数: 14400\n唯一值数量: 6\n\n分布情况:\n  缺失值: 7200 (50.00%)\n  0.0: 5915 (41.08%)\n  1.0: 975 (6.77%)\n  2.0: 286 (1.99%)\n  3.0: 15 (0.10%)\n  4.0: 7 (0.05%)\n  5.0: 2 (0.01%)\n\n============================================================\n\n分析完成\n"
    },
    "时间趋势分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom datetime import datetime\n\ndef read_and_process_csv(file_path):\n    try:\n        df = pd.read_csv(file_path)\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        return df\n    except Exception as e:\n        print(f\"Error reading CSV file: {e}\")\n        return None\n\ndef analyze_time_series(df):\n    results = []\n    \n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    \n    results.append(\"Time Series Analysis Results\")\n    results.append(\"=\" * 30)\n    \n    for column in numeric_columns:\n        results.append(f\"\\nAnalysis for {column}\")\n        results.append(\"-\" * 20)\n        \n        # Overall trend\n        trend = np.polyfit(range(len(df)), df[column], 1)\n        results.append(f\"Overall trend: {'Increasing' if trend[0] > 0 else 'Decreasing'}\")\n        \n        # Daily pattern\n        df['hour'] = df['timestamp'].dt.hour\n        hourly_avg = df.groupby('hour')[column].mean()\n        peak_hour = hourly_avg.idxmax()\n        trough_hour = hourly_avg.idxmin()\n        results.append(f\"Daily pattern: Peak at {peak_hour}:00, Trough at {trough_hour}:00\")\n        \n        # Weekly pattern\n        df['dayofweek'] = df['timestamp'].dt.dayofweek\n        daily_avg = df.groupby('dayofweek')[column].mean()\n        peak_day = daily_avg.idxmax()\n        trough_day = daily_avg.idxmin()\n        days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        results.append(f\"Weekly pattern: Peak on {days[peak_day]}, Trough on {days[trough_day]}\")\n        \n        # Anomalies\n        z_scores = np.abs(stats.zscore(df[column]))\n        anomalies = df[z_scores > 3]\n        if not anomalies.empty:\n            results.append(f\"Anomalies detected: {len(anomalies)} points\")\n            results.append(f\"First anomaly: {anomalies['timestamp'].iloc[0]}, Value: {anomalies[column].iloc[0]:.2f}\")\n        else:\n            results.append(\"No significant anomalies detected\")\n    \n    return \"\\n\".join(results)\n\ndef save_results(results, output_file):\n    try:\n        with open(output_file, 'w') as f:\n            f.write(results)\n        print(f\"Results saved to {output_file}\")\n    except Exception as e:\n        print(f\"Error saving results: {e}\")\n\ndef main():\n    input_file = \"temp_csv/excel_data_20250317141159.csv\"\n    output_file = \"pngs/time_trend_results.txt\"\n    \n    df = read_and_process_csv(input_file)\n    if df is not None:\n        results = analyze_time_series(df)\n        save_results(results, output_file)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "Results saved to pngs/time_trend_results.txt\n",
      "txt_results": "Time Series Analysis Results\n==============================\n\nAnalysis for cpu_usage_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 9:00, Trough at 23:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for memory_usage_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 10:00, Trough at 5:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for disk_usage_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 10:00, Trough at 6:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for disk_io_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 16:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for disk_read_mbps\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 15:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for disk_write_mbps\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 16:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for network_traffic_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 11:00, Trough at 23:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for network_in_mbps\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 15:00, Trough at 2:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for network_out_mbps\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 9:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for load_avg_1min\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 9:00, Trough at 23:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for load_avg_5min\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 17:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for load_avg_15min\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 17:00, Trough at 8:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for process_count\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 17:00, Trough at 23:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for thread_count\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 16:00, Trough at 22:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for open_file_count\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 16:00, Trough at 22:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for temperature_celsius\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 5:00, Trough at 16:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for query_rate_per_sec\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 15:00, Trough at 22:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for active_connections\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 14:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for cache_hit_rate_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 23:00, Trough at 14:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for avg_query_time_ms\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 14:00, Trough at 23:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for transactions_per_sec\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 10:00, Trough at 22:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for read_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 5:00, Trough at 3:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for write_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 3:00, Trough at 5:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for lock_wait_count\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 14:00, Trough at 1:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for deadlock_count\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 14:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for buffer_pool_usage_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 20:00, Trough at 3:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for table_scans_per_sec\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 15:00, Trough at 8:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for index_usage_percent\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 1:00, Trough at 15:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for temp_tables_created_per_sec\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 5:00, Trough at 21:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for slow_queries_count\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 10:00, Trough at 19:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected\n\nAnalysis for aborted_connections\n--------------------\nOverall trend: Decreasing\nDaily pattern: Peak at 14:00, Trough at 0:00\nWeekly pattern: Peak on Friday, Trough on Friday\nNo significant anomalies detected"
    },
    "相关性分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport os\n\ndef analyze_correlations(file_path, output_path):\n    try:\n        # 1. 读取CSV文件\n        print(f\"正在读取文件: {file_path}\")\n        df = pd.read_csv(file_path)\n        \n        # 2. 只选择数值列进行相关性分析\n        numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n        \n        # 3. 计算相关性矩阵\n        print(\"计算相关性矩阵...\")\n        corr_matrix = df[numeric_cols].corr()\n        \n        # 4. 识别高度相关和低度相关的变量对\n        high_corr_threshold = 0.8\n        low_corr_threshold = 0.2\n        \n        high_correlations = []\n        low_correlations = []\n        \n        # 遍历相关性矩阵的上三角部分(不包括对角线)\n        for i in range(len(numeric_cols)):\n            for j in range(i+1, len(numeric_cols)):\n                col1, col2 = numeric_cols[i], numeric_cols[j]\n                corr_value = corr_matrix.loc[col1, col2]\n                \n                # 忽略NaN值\n                if pd.isna(corr_value):\n                    continue\n                \n                # 记录高相关性对\n                if abs(corr_value) >= high_corr_threshold:\n                    high_correlations.append((col1, col2, corr_value))\n                \n                # 记录低相关性对\n                elif abs(corr_value) <= low_corr_threshold:\n                    low_correlations.append((col1, col2, corr_value))\n        \n        # 按相关性绝对值排序\n        high_correlations.sort(key=lambda x: abs(x[2]), reverse=True)\n        low_correlations.sort(key=lambda x: abs(x[2]))\n        \n        # 5. 保存分析结果为纯文本格式\n        print(f\"保存分析结果到: {output_path}\")\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            # 基本信息\n            f.write(\"=== 服务器性能数据相关性分析 ===\\n\\n\")\n            f.write(f\"数据文件: {file_path}\\n\")\n            f.write(f\"数据行数: {len(df)}\\n\")\n            f.write(f\"数值列数: {len(numeric_cols)}\\n\\n\")\n            \n            # 高相关性变量对\n            f.write(\"=== 高度相关变量对 (|r| >= 0.8) ===\\n\\n\")\n            if high_correlations:\n                for col1, col2, corr in high_correlations:\n                    f.write(f\"{col1:<30} 与 {col2:<30} | r = {corr:.4f}\\n\")\n            else:\n                f.write(\"未发现高度相关的变量对\\n\")\n            \n            f.write(\"\\n\")\n            \n            # 低相关性变量对 (只展示前20个)\n            f.write(\"=== 低度相关变量对 (|r| <= 0.2) ===\\n\\n\")\n            if low_correlations:\n                for col1, col2, corr in low_correlations[:20]:  # 只显示前20个\n                    f.write(f\"{col1:<30} 与 {col2:<30} | r = {corr:.4f}\\n\")\n                \n                if len(low_correlations) > 20:\n                    f.write(f\"\\n... 还有 {len(low_correlations) - 20} 个低相关性变量对 ...\\n\")\n            else:\n                f.write(\"未发现低度相关的变量对\\n\")\n            \n            f.write(\"\\n\")\n            \n            # 相关性矩阵 (格式化为易读的表格)\n            f.write(\"=== 相关性矩阵 ===\\n\\n\")\n            \n            # 格式化相关性矩阵为文本表格\n            corr_text = corr_matrix.round(3).to_string()\n            f.write(corr_text)\n            \n            f.write(\"\\n\\n=== 分析总结 ===\\n\\n\")\n            \n            # 总结高相关性组\n            if high_correlations:\n                f.write(f\"发现 {len(high_correlations)} 对高度相关变量 (|r| >= 0.8)\\n\")\n                # 识别最强相关性\n                strongest = high_correlations[0]\n                f.write(f\"最强相关性: {strongest[0]} 与 {strongest[1]}, r = {strongest[2]:.4f}\\n\\n\")\n            else:\n                f.write(\"未发现高度相关的变量对\\n\\n\")\n            \n            # 总结分析结果\n            f.write(\"相关性分析可用于:\\n\")\n            f.write(\"1. 识别冗余指标: 高度相关的指标可能提供相似信息\\n\")\n            f.write(\"2. 发现性能关联: 了解哪些指标之间存在强关联\\n\")\n            f.write(\"3. 简化监控: 可以减少需要密切监控的指标数量\\n\")\n        \n        print(\"分析完成!\")\n        return True\n    \n    except Exception as e:\n        print(f\"分析过程中出错: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    input_file = \"temp_csv/excel_data_20250317141159.csv\"\n    output_file = \"pngs/correlation_results.txt\"\n    \n    analyze_correlations(input_file, output_file)",
      "results": "正在读取文件: temp_csv/excel_data_20250317141159.csv\n计算相关性矩阵...\n保存分析结果到: pngs/correlation_results.txt\n分析完成!\n",
      "txt_results": "=== 服务器性能数据相关性分析 ===\n\n数据文件: temp_csv/excel_data_20250317141159.csv\n数据行数: 14400\n数值列数: 31\n\n=== 高度相关变量对 (|r| >= 0.8) ===\n\ncpu_usage_percent              与 load_avg_1min                  | r = 1.0000\nread_percent                   与 write_percent                  | r = -1.0000\nload_avg_1min                  与 process_count                  | r = 0.9904\ncpu_usage_percent              与 process_count                  | r = 0.9904\nload_avg_1min                  与 load_avg_5min                  | r = 0.9719\ncpu_usage_percent              与 load_avg_5min                  | r = 0.9719\nload_avg_5min                  与 process_count                  | r = 0.9624\nload_avg_1min                  与 load_avg_15min                 | r = 0.9391\ncpu_usage_percent              与 load_avg_15min                 | r = 0.9391\nload_avg_15min                 与 process_count                  | r = 0.9306\nload_avg_5min                  与 load_avg_15min                 | r = 0.9096\nquery_rate_per_sec             与 transactions_per_sec           | r = 0.8711\ndisk_io_percent                与 disk_read_mbps                 | r = 0.8526\ndisk_io_percent                与 disk_write_mbps                | r = 0.8208\ndisk_io_percent                与 load_avg_1min                  | r = 0.8178\ncpu_usage_percent              与 disk_io_percent                | r = 0.8178\nthread_count                   与 open_file_count                | r = 0.8102\ndisk_io_percent                与 process_count                  | r = 0.8093\n\n=== 低度相关变量对 (|r| <= 0.2) ===\n\nactive_connections             与 index_usage_percent            | r = -0.0002\nwrite_percent                  与 aborted_connections            | r = -0.0002\nread_percent                   与 aborted_connections            | r = 0.0002\ntransactions_per_sec           与 temp_tables_created_per_sec    | r = 0.0002\nthread_count                   与 temperature_celsius            | r = 0.0003\nwrite_percent                  与 deadlock_count                 | r = -0.0004\nread_percent                   与 deadlock_count                 | r = 0.0004\ntable_scans_per_sec            与 index_usage_percent            | r = 0.0008\nactive_connections             与 write_percent                  | r = -0.0008\nactive_connections             与 read_percent                   | r = 0.0008\nquery_rate_per_sec             与 temp_tables_created_per_sec    | r = 0.0012\ncache_hit_rate_percent         与 read_percent                   | r = 0.0019\ncache_hit_rate_percent         与 write_percent                  | r = -0.0019\ntransactions_per_sec           与 table_scans_per_sec            | r = 0.0019\nnetwork_in_mbps                与 temperature_celsius            | r = -0.0022\nquery_rate_per_sec             与 table_scans_per_sec            | r = 0.0024\ncache_hit_rate_percent         与 temp_tables_created_per_sec    | r = 0.0024\nlock_wait_count                与 index_usage_percent            | r = -0.0024\nread_percent                   与 lock_wait_count                | r = -0.0029\nwrite_percent                  与 lock_wait_count                | r = 0.0029\n\n... 还有 70 个低相关性变量对 ...\n\n=== 相关性矩阵 ===\n\n                             cpu_usage_percent  memory_usage_percent  disk_usage_percent  disk_io_percent  disk_read_mbps  disk_write_mbps  network_traffic_percent  network_in_mbps  network_out_mbps  load_avg_1min  load_avg_5min  load_avg_15min  process_count  thread_count  open_file_count  temperature_celsius  query_rate_per_sec  active_connections  cache_hit_rate_percent  avg_query_time_ms  transactions_per_sec  read_percent  write_percent  lock_wait_count  deadlock_count  buffer_pool_usage_percent  table_scans_per_sec  index_usage_percent  temp_tables_created_per_sec  slow_queries_count  aborted_connections\ncpu_usage_percent                        1.000                 0.757               0.635            0.818           0.696            0.670                    0.782            0.596             0.590          1.000          0.972           0.939          0.990         0.663            0.540               -0.013                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nmemory_usage_percent                     0.757                 1.000               0.742            0.757           0.644            0.619                    0.713            0.550             0.531          0.757          0.736           0.712          0.749         0.504            0.406               -0.019                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\ndisk_usage_percent                       0.635                 0.742               1.000            0.635           0.532            0.526                    0.570            0.447             0.436          0.635          0.618           0.599          0.628         0.420            0.333               -0.007                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\ndisk_io_percent                          0.818                 0.757               0.635            1.000           0.853            0.821                    0.786            0.595             0.593          0.818          0.793           0.770          0.809         0.547            0.442               -0.020                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\ndisk_read_mbps                           0.696                 0.644               0.532            0.853           1.000            0.709                    0.665            0.508             0.509          0.696          0.675           0.652          0.688         0.461            0.375               -0.023                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\ndisk_write_mbps                          0.670                 0.619               0.526            0.821           0.709            1.000                    0.642            0.484             0.480          0.670          0.650           0.635          0.662         0.450            0.357               -0.023                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nnetwork_traffic_percent                  0.782                 0.713               0.570            0.786           0.665            0.642                    1.000            0.767             0.756          0.782          0.758           0.738          0.775         0.515            0.426               -0.012                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nnetwork_in_mbps                          0.596                 0.550               0.447            0.595           0.508            0.484                    0.767            1.000             0.591          0.596          0.576           0.565          0.593         0.398            0.328               -0.002                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nnetwork_out_mbps                         0.590                 0.531               0.436            0.593           0.509            0.480                    0.756            0.591             1.000          0.590          0.575           0.555          0.585         0.388            0.326               -0.015                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nload_avg_1min                            1.000                 0.757               0.635            0.818           0.696            0.670                    0.782            0.596             0.590          1.000          0.972           0.939          0.990         0.663            0.540               -0.013                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nload_avg_5min                            0.972                 0.736               0.618            0.793           0.675            0.650                    0.758            0.576             0.575          0.972          1.000           0.910          0.962         0.642            0.520               -0.010                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nload_avg_15min                           0.939                 0.712               0.599            0.770           0.652            0.635                    0.738            0.565             0.555          0.939          0.910           1.000          0.931         0.621            0.505               -0.019                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nprocess_count                            0.990                 0.749               0.628            0.809           0.688            0.662                    0.775            0.593             0.585          0.990          0.962           0.931          1.000         0.668            0.545               -0.014                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nthread_count                             0.663                 0.504               0.420            0.547           0.461            0.450                    0.515            0.398             0.388          0.663          0.642           0.621          0.668         1.000            0.810                0.000                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nopen_file_count                          0.540                 0.406               0.333            0.442           0.375            0.357                    0.426            0.328             0.326          0.540          0.520           0.505          0.545         0.810            1.000                0.005                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\ntemperature_celsius                     -0.013                -0.019              -0.007           -0.020          -0.023           -0.023                   -0.012           -0.002            -0.015         -0.013         -0.010          -0.019         -0.014         0.000            0.005                1.000                 NaN                 NaN                     NaN                NaN                   NaN           NaN            NaN              NaN             NaN                        NaN                  NaN                  NaN                          NaN                 NaN                  NaN\nquery_rate_per_sec                         NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               1.000               0.776                  -0.437              0.037                 0.871        -0.016          0.016            0.546           0.177                     -0.007                0.002               -0.016                        0.001               0.713                0.522\nactive_connections                         NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.776               1.000                  -0.585              0.384                 0.673         0.001         -0.001            0.709           0.306                     -0.018                0.004               -0.000                        0.005               0.555                0.652\ncache_hit_rate_percent                     NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN              -0.437              -0.585                   1.000             -0.548                -0.367         0.002         -0.002           -0.411          -0.207                      0.027               -0.003               -0.006                        0.002              -0.325               -0.408\navg_query_time_ms                          NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.037               0.384                  -0.548              1.000                 0.034         0.018         -0.018            0.282           0.216                     -0.019                0.010                0.006                        0.005               0.025                0.296\ntransactions_per_sec                       NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.871               0.673                  -0.367              0.034                 1.000        -0.010          0.010            0.484           0.166                     -0.004                0.002               -0.015                        0.000               0.620                0.445\nread_percent                               NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN              -0.016               0.001                   0.002              0.018                -0.010         1.000         -1.000           -0.003           0.000                      0.003                0.010                0.020                        0.012              -0.011                0.000\nwrite_percent                              NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.016              -0.001                  -0.002             -0.018                 0.010        -1.000          1.000            0.003          -0.000                     -0.003               -0.010               -0.020                       -0.012               0.011               -0.000\nlock_wait_count                            NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.546               0.709                  -0.411              0.282                 0.484        -0.003          0.003            1.000           0.459                     -0.012               -0.008               -0.002                        0.004               0.390                0.477\ndeadlock_count                             NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.177               0.306                  -0.207              0.216                 0.166         0.000         -0.000            0.459           1.000                     -0.009               -0.008               -0.006                       -0.014               0.126                0.190\nbuffer_pool_usage_percent                  NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN              -0.007              -0.018                   0.027             -0.019                -0.004         0.003         -0.003           -0.012          -0.009                      1.000                0.012               -0.008                       -0.017              -0.013               -0.022\ntable_scans_per_sec                        NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.002               0.004                  -0.003              0.010                 0.002         0.010         -0.010           -0.008          -0.008                      0.012                1.000                0.001                       -0.011               0.014                0.011\nindex_usage_percent                        NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN              -0.016              -0.000                  -0.006              0.006                -0.015         0.020         -0.020           -0.002          -0.006                     -0.008                0.001                1.000                       -0.024              -0.016               -0.011\ntemp_tables_created_per_sec                NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.001               0.005                   0.002              0.005                 0.000         0.012         -0.012            0.004          -0.014                     -0.017               -0.011               -0.024                        1.000              -0.004                0.007\nslow_queries_count                         NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.713               0.555                  -0.325              0.025                 0.620        -0.011          0.011            0.390           0.126                     -0.013                0.014               -0.016                       -0.004               1.000                0.373\naborted_connections                        NaN                   NaN                 NaN              NaN             NaN              NaN                      NaN              NaN               NaN            NaN            NaN             NaN            NaN           NaN              NaN                  NaN               0.522               0.652                  -0.408              0.296                 0.445         0.000         -0.000            0.477           0.190                     -0.022                0.011               -0.011                        0.007               0.373                1.000\n\n=== 分析总结 ===\n\n发现 18 对高度相关变量 (|r| >= 0.8)\n最强相关性: cpu_usage_percent 与 load_avg_1min, r = 1.0000\n\n相关性分析可用于:\n1. 识别冗余指标: 高度相关的指标可能提供相似信息\n2. 发现性能关联: 了解哪些指标之间存在强关联\n3. 简化监控: 可以减少需要密切监控的指标数量\n"
    }
  }
}
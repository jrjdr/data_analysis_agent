{
  "timestamp": "20250317_145213",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317144907.csv",
    "row_count": 14400,
    "column_count": 36,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-02-28 23:43:00",
          "count": 10
        }
      },
      "server_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 10,
        "most_common": {
          "value": "SRV001",
          "count": 1440
        }
      },
      "server_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 10,
        "most_common": {
          "value": "主应用服务器",
          "count": 1440
        }
      },
      "resource_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 2,
        "most_common": {
          "value": "server",
          "count": 7200
        }
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7197,
        "min": 5.583852264688791,
        "max": 100.0,
        "mean": 37.580310160571194,
        "median": 31.618053991508955
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 27.40743739744767,
        "max": 100.0,
        "mean": 53.56874487701693,
        "median": 51.703927240468204
      },
      "disk_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 2083,
        "min": 50.0,
        "max": 89.15643708778276,
        "mean": 52.842364900407624,
        "median": 50.0
      },
      "disk_io_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.4762013327438215,
        "max": 92.99558435884306,
        "mean": 29.27332977011458,
        "median": 23.18286926147777
      },
      "disk_read_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.2630234131950719,
        "max": 180.2153282172936,
        "mean": 37.037291892330146,
        "median": 28.136800228562365
      },
      "disk_write_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.182086591097093,
        "max": 137.1202666644026,
        "mean": 26.24042230099243,
        "median": 19.716467316167673
      },
      "network_traffic_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7190,
        "min": 5.218084351700895,
        "max": 100.0,
        "mean": 38.25191151335494,
        "median": 32.304874905255105
      },
      "network_in_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 3.664073875573308,
        "max": 298.5663943168601,
        "mean": 66.60107367863556,
        "median": 52.31586370927587
      },
      "network_out_mbps": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 2.018538415519138,
        "max": 194.9236017252965,
        "mean": 44.220199227491264,
        "median": 34.76118873398282
      },
      "load_avg_1min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7197,
        "min": 0.2233540905875517,
        "max": 4.0,
        "mean": 1.503212406422848,
        "median": 1.264722159660358
      },
      "load_avg_5min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.1969890937230561,
        "max": 4.637323717287012,
        "mean": 1.50334320642707,
        "median": 1.255915664903009
      },
      "load_avg_15min": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.1742767263645276,
        "max": 4.865296032228876,
        "mean": 1.501586154410839,
        "median": 1.2650191688980905
      },
      "process_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 192,
        "min": 104.0,
        "max": 305.0,
        "mean": 174.54805555555555,
        "median": 163.0
      },
      "thread_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 1460,
        "min": 321.0,
        "max": 2330.0,
        "mean": 963.66625,
        "median": 914.0
      },
      "open_file_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 3878,
        "min": 761.0,
        "max": 10032.0,
        "mean": 3376.4056944444446,
        "median": 3083.0
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 35.00103782917293,
        "max": 64.99493956200003,
        "mean": 50.18363588060569,
        "median": 50.26199601251966
      },
      "event_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "normal",
          "count": 14103
        }
      },
      "query_rate_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 51.60447173041226,
        "max": 1242.155211670172,
        "mean": 349.16422296415624,
        "median": 242.7240593882832
      },
      "active_connections": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 5.088021600619555,
        "max": 196.4773247084502,
        "mean": 40.829048216631215,
        "median": 31.254083457647873
      },
      "cache_hit_rate_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 27.49392502510446,
        "max": 99.80770989390808,
        "mean": 84.69415779469541,
        "median": 85.52261438877517
      },
      "avg_query_time_ms": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 8.218560972964452,
        "max": 246.5327044433118,
        "mean": 18.00781146462357,
        "median": 16.86848109365319
      },
      "transactions_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 3.640326505424797,
        "max": 218.7554534911781,
        "mean": 38.264386582507335,
        "median": 25.92668158026779
      },
      "read_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 66.66771801657447,
        "max": 88.88710362366339,
        "mean": 81.80204128259189,
        "median": 83.4281277352871
      },
      "write_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 11.11289637633661,
        "max": 33.33228198342553,
        "mean": 18.197958717408124,
        "median": 16.571872264712894
      },
      "lock_wait_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 30,
        "min": 0.0,
        "max": 37.0,
        "mean": 3.6131944444444444,
        "median": 2.0
      },
      "deadlock_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 4,
        "min": 0.0,
        "max": 3.0,
        "mean": 0.022916666666666665,
        "median": 0.0
      },
      "buffer_pool_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 50.00219015090894,
        "max": 94.99539755412248,
        "mean": 72.37492448959392,
        "median": 72.35257430227293
      },
      "table_scans_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.0053320997153272,
        "max": 49.99914923662595,
        "mean": 25.043416152890018,
        "median": 25.287476707940492
      },
      "index_usage_percent": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 60.00018636575737,
        "max": 98.99423242150068,
        "mean": 79.49692425207539,
        "median": 79.56311351381834
      },
      "temp_tables_created_per_sec": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 7200,
        "min": 0.0022427939408053,
        "max": 19.99778780401121,
        "mean": 10.12595589164474,
        "median": 10.169087769131885
      },
      "slow_queries_count": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 49,
        "min": 0.0,
        "max": 57.0,
        "mean": 8.281944444444445,
        "median": 5.0
      },
      "aborted_connections": {
        "type": "float64",
        "missing_values": 7200,
        "unique_values": 6,
        "min": 0.0,
        "max": 5.0,
        "mean": 0.2263888888888889,
        "median": 0.0
      }
    }
  },
  "column_names": [
    "timestamp",
    "server_id",
    "server_name",
    "resource_type",
    "cpu_usage_percent",
    "memory_usage_percent",
    "disk_usage_percent",
    "disk_io_percent",
    "disk_read_mbps",
    "disk_write_mbps",
    "network_traffic_percent",
    "network_in_mbps",
    "network_out_mbps",
    "load_avg_1min",
    "load_avg_5min",
    "load_avg_15min",
    "process_count",
    "thread_count",
    "open_file_count",
    "temperature_celsius",
    "event_type",
    "query_rate_per_sec",
    "active_connections",
    "cache_hit_rate_percent",
    "avg_query_time_ms",
    "transactions_per_sec",
    "read_percent",
    "write_percent",
    "lock_wait_count",
    "deadlock_count",
    "buffer_pool_usage_percent",
    "table_scans_per_sec",
    "index_usage_percent",
    "temp_tables_created_per_sec",
    "slow_queries_count",
    "aborted_connections"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\ndef read_csv_file(file_path):\n    \"\"\"读取CSV文件并处理基本错误\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        print(f\"成功读取CSV文件，包含{df.shape[0]}行和{df.shape[1]}列数据\")\n        return df\n    except FileNotFoundError:\n        print(f\"错误: 文件'{file_path}'不存在\")\n        return None\n    except pd.errors.EmptyDataError:\n        print(f\"错误: 文件'{file_path}'为空或格式不正确\")\n        return None\n    except Exception as e:\n        print(f\"读取CSV文件时发生错误: {str(e)}\")\n        return None\n\ndef basic_statistics(df):\n    \"\"\"计算基本描述性统计\"\"\"\n    result = []\n    result.append(\"=== 基本数据统计 ===\")\n    result.append(f\"数据行数: {df.shape[0]}\")\n    result.append(f\"数据列数: {df.shape[1]}\")\n    result.append(f\"时间范围: {df['timestamp'].min()} 至 {df['timestamp'].max()}\")\n    \n    # 计算数据完整性\n    missing_data = df.isnull().sum()\n    missing_pct = (missing_data / len(df)) * 100\n    result.append(\"\\n=== 数据完整性 ===\")\n    result.append(\"列名\\t缺失值数量\\t缺失百分比\")\n    result.append(\"-\" * 40)\n    for col, missing in missing_data.items():\n        if missing > 0:\n            result.append(f\"{col}\\t{missing}\\t{missing_pct[col]:.2f}%\")\n    \n    return result\n\ndef analyze_numerical_columns(df):\n    \"\"\"分析数值型列的分布\"\"\"\n    result = []\n    result.append(\"\\n=== 数值型数据分析 ===\")\n    \n    # 选择数值型列\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    \n    for col in numeric_cols:\n        # 跳过缺失值过多的列(超过50%)\n        if df[col].isnull().sum() / len(df) > 0.5:\n            continue\n            \n        result.append(f\"\\n--- {col} 分析 ---\")\n        data = df[col].dropna()\n        \n        # 基本统计量\n        result.append(f\"最小值: {data.min():.2f}\")\n        result.append(f\"最大值: {data.max():.2f}\")\n        result.append(f\"平均值: {data.mean():.2f}\")\n        result.append(f\"中位数: {data.median():.2f}\")\n        result.append(f\"标准差: {data.std():.2f}\")\n        \n        # 分位数\n        q1, q3 = data.quantile(0.25), data.quantile(0.75)\n        result.append(f\"25%分位数: {q1:.2f}\")\n        result.append(f\"75%分位数: {q3:.2f}\")\n        result.append(f\"IQR(四分位距): {(q3-q1):.2f}\")\n        \n        # 异常值检测\n        lower_bound = q1 - 1.5 * (q3 - q1)\n        upper_bound = q3 + 1.5 * (q3 - q1)\n        outliers = data[(data < lower_bound) | (data > upper_bound)]\n        result.append(f\"潜在异常值数量: {len(outliers)}, 占比: {(len(outliers)/len(data)*100):.2f}%\")\n    \n    return result\n\ndef analyze_categorical_columns(df):\n    \"\"\"分析分类型列的分布\"\"\"\n    result = []\n    result.append(\"\\n=== 分类型数据分析 ===\")\n    \n    # 选择对象类型列\n    categorical_cols = df.select_dtypes(include=['object']).columns\n    \n    for col in categorical_cols:\n        result.append(f\"\\n--- {col} 分析 ---\")\n        value_counts = df[col].value_counts()\n        unique_values = len(value_counts)\n        result.append(f\"唯一值数量: {unique_values}\")\n        \n        # 显示前5个最常见的值\n        result.append(\"\\n最常见的值:\")\n        for val, count in value_counts.head(5).items():\n            result.append(f\"{val}: {count}次 ({count/len(df)*100:.2f}%)\")\n    \n    return result\n\ndef analyze_server_metrics(df):\n    \"\"\"分析服务器特定指标\"\"\"\n    result = []\n    result.append(\"\\n=== 服务器性能指标分析 ===\")\n    \n    # 获取不同的服务器\n    servers = df['server_name'].unique()\n    \n    # 资源使用率阈值\n    cpu_threshold = 80\n    memory_threshold = 90\n    disk_threshold = 85\n    \n    for server in servers:\n        server_data = df[df['server_name'] == server]\n        result.append(f\"\\n--- 服务器: {server} 分析 ---\")\n        \n        # CPU使用率分析\n        if 'cpu_usage_percent' in df.columns and not server_data['cpu_usage_percent'].isnull().all():\n            cpu_data = server_data['cpu_usage_percent'].dropna()\n            high_cpu = cpu_data[cpu_data > cpu_threshold]\n            result.append(f\"CPU使用率 > {cpu_threshold}% 的时间点数量: {len(high_cpu)}, 占比: {len(high_cpu)/len(cpu_data)*100:.2f}%\")\n            if len(high_cpu) > 0:\n                result.append(f\"CPU使用率最高值: {cpu_data.max():.2f}%\")\n        \n        # 内存使用率分析\n        if 'memory_usage_percent' in df.columns and not server_data['memory_usage_percent'].isnull().all():\n            mem_data = server_data['memory_usage_percent'].dropna()\n            high_mem = mem_data[mem_data > memory_threshold]\n            result.append(f\"内存使用率 > {memory_threshold}% 的时间点数量: {len(high_mem)}, 占比: {len(high_mem)/len(mem_data)*100:.2f}%\")\n            if len(high_mem) > 0:\n                result.append(f\"内存使用率最高值: {mem_data.max():.2f}%\")\n        \n        # 磁盘使用率分析\n        if 'disk_usage_percent' in df.columns and not server_data['disk_usage_percent'].isnull().all():\n            disk_data = server_data['disk_usage_percent'].dropna()\n            high_disk = disk_data[disk_data > disk_threshold]\n            result.append(f\"磁盘使用率 > {disk_threshold}% 的时间点数量: {len(high_disk)}, 占比: {len(high_disk)/len(disk_data)*100:.2f}%\")\n            if len(high_disk) > 0:\n                result.append(f\"磁盘使用率最高值: {disk_data.max():.2f}%\")\n    \n    # 分析事件类型\n    if 'event_type' in df.columns:\n        result.append(\"\\n--- 事件分析 ---\")\n        event_counts = df['event_type'].value_counts()\n        for event, count in event_counts.items():\n            result.append(f\"{event}: {count}次 ({count/len(df)*100:.2f}%)\")\n    \n    # 分析数据库相关指标\n    result.append(\"\\n--- 数据库性能指标 ---\")\n    if 'slow_queries_count' in df.columns and not df['slow_queries_count'].isnull().all():\n        slow_queries = df['slow_queries_count'].dropna()\n        result.append(f\"慢查询总数: {slow_queries.sum():.0f}\")\n        result.append(f\"平均慢查询数: {slow_queries.mean():.2f}\")\n        result.append(f\"最多慢查询数: {slow_queries.max():.0f}\")\n    \n    if 'deadlock_count' in df.columns and not df['deadlock_count'].isnull().all():\n        deadlocks = df['deadlock_count'].dropna()\n        result.append(f\"死锁总数: {deadlocks.sum():.0f}\")\n        if deadlocks.sum() > 0:\n            result.append(f\"平均死锁数: {deadlocks.mean():.4f}\")\n            result.append(f\"最多死锁数: {deadlocks.max():.0f}\")\n    \n    return result\n\ndef save_results(results, output_path):\n    \"\"\"保存分析结果到文本文件\"\"\"\n    # 确保目录存在\n    os.makedirs(os.path.dirname(output_path), exist_ok=True)\n    \n    # 添加文件头\n    header = [\n        \"===================================================\",\n        \"             服务器数据分析报告                      \",\n        \"===================================================\",\n        f\"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\",\n        \"\"\n    ]\n    \n    # 合并所有结果\n    all_results = header + results\n    \n    # 写入文件\n    try:\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write('\\n'.join(all_results))\n        print(f\"分析结果已保存至: {output_path}\")\n        return True\n    except Exception as e:\n        print(f\"保存分析结果时发生错误: {str(e)}\")\n        return False\n\ndef main():\n    \"\"\"主函数\"\"\"\n    file_path = \"temp_csv/excel_data_20250317144907.csv\"\n    output_path = \"pngs/analysis_results.txt\"\n    \n    # 读取CSV文件\n    df = read_csv_file(file_path)\n    if df is None:\n        return\n    \n    # 转换时间戳列\n    try:\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n    except Exception as e:\n        print(f\"转换时间戳时发生错误: {str(e)}\")\n    \n    # 执行各种分析\n    results = []\n    results.extend(basic_statistics(df))\n    results.extend(analyze_numerical_columns(df))\n    results.extend(analyze_categorical_columns(df))\n    results.extend(analyze_server_metrics(df))\n    \n    # 保存结果\n    save_results(results, output_path)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "成功读取CSV文件，包含14400行和36列数据\n分析结果已保存至: pngs/analysis_results.txt\n",
      "txt_results": "===================================================\n             服务器数据分析报告                      \n===================================================\n生成时间: 2025-03-17 14:50:33\n\n=== 基本数据统计 ===\n数据行数: 14400\n数据列数: 36\n时间范围: 2025-02-28 00:00:00 至 2025-02-28 23:59:00\n\n=== 数据完整性 ===\n列名\t缺失值数量\t缺失百分比\n----------------------------------------\ncpu_usage_percent\t7200\t50.00%\nmemory_usage_percent\t7200\t50.00%\ndisk_usage_percent\t7200\t50.00%\ndisk_io_percent\t7200\t50.00%\ndisk_read_mbps\t7200\t50.00%\ndisk_write_mbps\t7200\t50.00%\nnetwork_traffic_percent\t7200\t50.00%\nnetwork_in_mbps\t7200\t50.00%\nnetwork_out_mbps\t7200\t50.00%\nload_avg_1min\t7200\t50.00%\nload_avg_5min\t7200\t50.00%\nload_avg_15min\t7200\t50.00%\nprocess_count\t7200\t50.00%\nthread_count\t7200\t50.00%\nopen_file_count\t7200\t50.00%\ntemperature_celsius\t7200\t50.00%\nquery_rate_per_sec\t7200\t50.00%\nactive_connections\t7200\t50.00%\ncache_hit_rate_percent\t7200\t50.00%\navg_query_time_ms\t7200\t50.00%\ntransactions_per_sec\t7200\t50.00%\nread_percent\t7200\t50.00%\nwrite_percent\t7200\t50.00%\nlock_wait_count\t7200\t50.00%\ndeadlock_count\t7200\t50.00%\nbuffer_pool_usage_percent\t7200\t50.00%\ntable_scans_per_sec\t7200\t50.00%\nindex_usage_percent\t7200\t50.00%\ntemp_tables_created_per_sec\t7200\t50.00%\nslow_queries_count\t7200\t50.00%\naborted_connections\t7200\t50.00%\n\n=== 数值型数据分析 ===\n\n--- cpu_usage_percent 分析 ---\n最小值: 5.58\n最大值: 100.00\n平均值: 37.58\n中位数: 31.62\n标准差: 20.65\n25%分位数: 21.41\n75%分位数: 55.52\nIQR(四分位距): 34.11\n潜在异常值数量: 0, 占比: 0.00%\n\n--- memory_usage_percent 分析 ---\n最小值: 27.41\n最大值: 100.00\n平均值: 53.57\n中位数: 51.70\n标准差: 15.33\n25%分位数: 40.99\n75%分位数: 64.58\nIQR(四分位距): 23.59\n潜在异常值数量: 1, 占比: 0.01%\n\n--- disk_usage_percent 分析 ---\n最小值: 50.00\n最大值: 89.16\n平均值: 52.84\n中位数: 50.00\n标准差: 5.81\n25%分位数: 50.00\n75%分位数: 52.26\nIQR(四分位距): 2.26\n潜在异常值数量: 1371, 占比: 19.04%\n\n--- disk_io_percent 分析 ---\n最小值: 0.48\n最大值: 93.00\n平均值: 29.27\n中位数: 23.18\n标准差: 19.41\n25%分位数: 14.11\n75%分位数: 45.57\nIQR(四分位距): 31.46\n潜在异常值数量: 1, 占比: 0.01%\n\n--- disk_read_mbps 分析 ---\n最小值: 0.26\n最大值: 180.22\n平均值: 37.04\n中位数: 28.14\n标准差: 29.03\n25%分位数: 15.30\n75%分位数: 50.22\nIQR(四分位距): 34.92\n潜在异常值数量: 290, 占比: 4.03%\n\n--- disk_write_mbps 分析 ---\n最小值: 0.18\n最大值: 137.12\n平均值: 26.24\n中位数: 19.72\n标准差: 21.20\n25%分位数: 10.64\n75%分位数: 35.21\nIQR(四分位距): 24.57\n潜在异常值数量: 369, 占比: 5.12%\n\n--- network_traffic_percent 分析 ---\n最小值: 5.22\n最大值: 100.00\n平均值: 38.25\n中位数: 32.30\n标准差: 21.58\n25%分位数: 21.30\n75%分位数: 55.96\nIQR(四分位距): 34.66\n潜在异常值数量: 0, 占比: 0.00%\n\n--- network_in_mbps 分析 ---\n最小值: 3.66\n最大值: 298.57\n平均值: 66.60\n中位数: 52.32\n标准差: 49.50\n25%分位数: 30.33\n75%分位数: 87.41\nIQR(四分位距): 57.08\n潜在异常值数量: 364, 占比: 5.06%\n\n--- network_out_mbps 分析 ---\n最小值: 2.02\n最大值: 194.92\n平均值: 44.22\n中位数: 34.76\n标准差: 32.72\n25%分位数: 19.93\n75%分位数: 59.17\nIQR(四分位距): 39.24\n潜在异常值数量: 302, 占比: 4.19%\n\n--- load_avg_1min 分析 ---\n最小值: 0.22\n最大值: 4.00\n平均值: 1.50\n中位数: 1.26\n标准差: 0.83\n25%分位数: 0.86\n75%分位数: 2.22\nIQR(四分位距): 1.36\n潜在异常值数量: 0, 占比: 0.00%\n\n--- load_avg_5min 分析 ---\n最小值: 0.20\n最大值: 4.64\n平均值: 1.50\n中位数: 1.26\n标准差: 0.85\n25%分位数: 0.84\n75%分位数: 2.15\nIQR(四分位距): 1.31\n潜在异常值数量: 8, 占比: 0.11%\n\n--- load_avg_15min 分析 ---\n最小值: 0.17\n最大值: 4.87\n平均值: 1.50\n中位数: 1.27\n标准差: 0.87\n25%分位数: 0.82\n75%分位数: 2.07\nIQR(四分位距): 1.25\n潜在异常值数量: 26, 占比: 0.36%\n\n--- process_count 分析 ---\n最小值: 104.00\n最大值: 305.00\n平均值: 174.55\n中位数: 163.00\n标准差: 41.73\n25%分位数: 142.00\n75%分位数: 210.00\nIQR(四分位距): 68.00\n潜在异常值数量: 0, 占比: 0.00%\n\n--- thread_count 分析 ---\n最小值: 321.00\n最大值: 2330.00\n平均值: 963.67\n中位数: 914.00\n标准差: 349.55\n25%分位数: 696.75\n75%分位数: 1171.00\nIQR(四分位距): 474.25\n潜在异常值数量: 83, 占比: 1.15%\n\n--- open_file_count 分析 ---\n最小值: 761.00\n最大值: 10032.00\n平均值: 3376.41\n中位数: 3083.00\n标准差: 1507.21\n25%分位数: 2252.75\n75%分位数: 4230.00\nIQR(四分位距): 1977.25\n潜在异常值数量: 157, 占比: 2.18%\n\n--- temperature_celsius 分析 ---\n最小值: 35.00\n最大值: 64.99\n平均值: 50.18\n中位数: 50.26\n标准差: 8.65\n25%分位数: 42.72\n75%分位数: 57.80\nIQR(四分位距): 15.08\n潜在异常值数量: 0, 占比: 0.00%\n\n--- query_rate_per_sec 分析 ---\n最小值: 51.60\n最大值: 1242.16\n平均值: 349.16\n中位数: 242.72\n标准差: 246.15\n25%分位数: 173.32\n75%分位数: 558.94\nIQR(四分位距): 385.63\n潜在异常值数量: 8, 占比: 0.11%\n\n--- active_connections 分析 ---\n最小值: 5.09\n最大值: 196.48\n平均值: 40.83\n中位数: 31.25\n标准差: 28.10\n25%分位数: 20.21\n75%分位数: 58.57\nIQR(四分位距): 38.36\n潜在异常值数量: 75, 占比: 1.04%\n\n--- cache_hit_rate_percent 分析 ---\n最小值: 27.49\n最大值: 99.81\n平均值: 84.69\n中位数: 85.52\n标准差: 7.98\n25%分位数: 80.75\n75%分位数: 89.93\nIQR(四分位距): 9.17\n潜在异常值数量: 132, 占比: 1.83%\n\n--- avg_query_time_ms 分析 ---\n最小值: 8.22\n最大值: 246.53\n平均值: 18.01\n中位数: 16.87\n标准差: 12.64\n25%分位数: 14.01\n75%分位数: 20.02\nIQR(四分位距): 6.01\n潜在异常值数量: 62, 占比: 0.86%\n\n--- transactions_per_sec 分析 ---\n最小值: 3.64\n最大值: 218.76\n平均值: 38.26\n中位数: 25.93\n标准差: 30.84\n25%分位数: 16.78\n75%分位数: 51.38\nIQR(四分位距): 34.60\n潜在异常值数量: 375, 占比: 5.21%\n\n--- read_percent 分析 ---\n最小值: 66.67\n最大值: 88.89\n平均值: 81.80\n中位数: 83.43\n标准差: 5.87\n25%分位数: 78.01\n75%分位数: 86.73\nIQR(四分位距): 8.73\n潜在异常值数量: 0, 占比: 0.00%\n\n--- write_percent 分析 ---\n最小值: 11.11\n最大值: 33.33\n平均值: 18.20\n中位数: 16.57\n标准差: 5.87\n25%分位数: 13.27\n75%分位数: 21.99\nIQR(四分位距): 8.73\n潜在异常值数量: 0, 占比: 0.00%\n\n--- lock_wait_count 分析 ---\n最小值: 0.00\n最大值: 37.00\n平均值: 3.61\n中位数: 2.00\n标准差: 4.09\n25%分位数: 1.00\n75%分位数: 5.00\nIQR(四分位距): 4.00\n潜在异常值数量: 474, 占比: 6.58%\n\n--- deadlock_count 分析 ---\n最小值: 0.00\n最大值: 3.00\n平均值: 0.02\n中位数: 0.00\n标准差: 0.16\n25%分位数: 0.00\n75%分位数: 0.00\nIQR(四分位距): 0.00\n潜在异常值数量: 156, 占比: 2.17%\n\n--- buffer_pool_usage_percent 分析 ---\n最小值: 50.00\n最大值: 95.00\n平均值: 72.37\n中位数: 72.35\n标准差: 12.93\n25%分位数: 61.26\n75%分位数: 83.49\nIQR(四分位距): 22.23\n潜在异常值数量: 0, 占比: 0.00%\n\n--- table_scans_per_sec 分析 ---\n最小值: 0.01\n最大值: 50.00\n平均值: 25.04\n中位数: 25.29\n标准差: 14.46\n25%分位数: 12.46\n75%分位数: 37.56\nIQR(四分位距): 25.10\n潜在异常值数量: 0, 占比: 0.00%\n\n--- index_usage_percent 分析 ---\n最小值: 60.00\n最大值: 98.99\n平均值: 79.50\n中位数: 79.56\n标准差: 11.26\n25%分位数: 69.69\n75%分位数: 89.32\nIQR(四分位距): 19.63\n潜在异常值数量: 0, 占比: 0.00%\n\n--- temp_tables_created_per_sec 分析 ---\n最小值: 0.00\n最大值: 20.00\n平均值: 10.13\n中位数: 10.17\n标准差: 5.78\n25%分位数: 5.11\n75%分位数: 15.17\nIQR(四分位距): 10.06\n潜在异常值数量: 0, 占比: 0.00%\n\n--- slow_queries_count 分析 ---\n最小值: 0.00\n最大值: 57.00\n平均值: 8.28\n中位数: 5.00\n标准差: 8.72\n25%分位数: 2.00\n75%分位数: 10.00\nIQR(四分位距): 8.00\n潜在异常值数量: 715, 占比: 9.93%\n\n--- aborted_connections 分析 ---\n最小值: 0.00\n最大值: 5.00\n平均值: 0.23\n中位数: 0.00\n标准差: 0.53\n25%分位数: 0.00\n75%分位数: 0.00\nIQR(四分位距): 0.00\n潜在异常值数量: 1285, 占比: 17.85%\n\n=== 分类型数据分析 ===\n\n--- server_id 分析 ---\n唯一值数量: 10\n\n最常见的值:\nSRV001: 1440次 (10.00%)\nSRV002: 1440次 (10.00%)\nSRV003: 1440次 (10.00%)\nSRV004: 1440次 (10.00%)\nSRV005: 1440次 (10.00%)\n\n--- server_name 分析 ---\n唯一值数量: 10\n\n最常见的值:\n主应用服务器: 1440次 (10.00%)\n备份应用服务器: 1440次 (10.00%)\n数据处理服务器: 1440次 (10.00%)\n缓存服务器: 1440次 (10.00%)\n负载均衡服务器: 1440次 (10.00%)\n\n--- resource_type 分析 ---\n唯一值数量: 2\n\n最常见的值:\nserver: 7200次 (50.00%)\ndatabase: 7200次 (50.00%)\n\n--- event_type 分析 ---\n唯一值数量: 5\n\n最常见的值:\nnormal: 14103次 (97.94%)\nnetwork_issue: 122次 (0.85%)\nhigh_load: 92次 (0.64%)\ndb_slowdown: 62次 (0.43%)\nmemory_leak: 21次 (0.15%)\n\n=== 服务器性能指标分析 ===\n\n--- 服务器: 主应用服务器 分析 ---\nCPU使用率 > 80% 的时间点数量: 61, 占比: 4.24%\nCPU使用率最高值: 100.00%\n内存使用率 > 90% 的时间点数量: 16, 占比: 1.11%\n内存使用率最高值: 97.18%\n磁盘使用率 > 85% 的时间点数量: 0, 占比: 0.00%\n\n--- 服务器: 备份应用服务器 分析 ---\nCPU使用率 > 80% 的时间点数量: 19, 占比: 1.32%\nCPU使用率最高值: 84.05%\n内存使用率 > 90% 的时间点数量: 0, 占比: 0.00%\n磁盘使用率 > 85% 的时间点数量: 0, 占比: 0.00%\n\n--- 服务器: 数据处理服务器 分析 ---\nCPU使用率 > 80% 的时间点数量: 18, 占比: 1.25%\nCPU使用率最高值: 84.74%\n内存使用率 > 90% 的时间点数量: 18, 占比: 1.25%\n内存使用率最高值: 100.00%\n磁盘使用率 > 85% 的时间点数量: 3, 占比: 0.21%\n磁盘使用率最高值: 89.16%\n\n--- 服务器: 缓存服务器 分析 ---\nCPU使用率 > 80% 的时间点数量: 15, 占比: 1.04%\nCPU使用率最高值: 83.67%\n内存使用率 > 90% 的时间点数量: 0, 占比: 0.00%\n磁盘使用率 > 85% 的时间点数量: 0, 占比: 0.00%\n\n--- 服务器: 负载均衡服务器 分析 ---\nCPU使用率 > 80% 的时间点数量: 25, 占比: 1.74%\nCPU使用率最高值: 84.07%\n内存使用率 > 90% 的时间点数量: 0, 占比: 0.00%\n磁盘使用率 > 85% 的时间点数量: 0, 占比: 0.00%\n\n--- 服务器: MySQL主数据库 分析 ---\n\n--- 服务器: MySQL从数据库 分析 ---\n\n--- 服务器: Redis缓存数据库 分析 ---\n\n--- 服务器: MongoDB文档数据库 分析 ---\n\n--- 服务器: Elasticsearch搜索数据库 分析 ---\n\n--- 事件分析 ---\nnormal: 14103次 (97.94%)\nnetwork_issue: 122次 (0.85%)\nhigh_load: 92次 (0.64%)\ndb_slowdown: 62次 (0.43%)\nmemory_leak: 21次 (0.15%)\n\n--- 数据库性能指标 ---\n慢查询总数: 59630\n平均慢查询数: 8.28\n最多慢查询数: 57\n死锁总数: 165\n平均死锁数: 0.0229\n最多死锁数: 3",
      "report_file": "reports\\总体数据统计分析_20250317_145213.md"
    }
  }
}
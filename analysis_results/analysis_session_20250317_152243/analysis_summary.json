{
  "timestamp": "20250317_153137",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317152243.csv",
    "row_count": 7200,
    "column_count": 20,
    "columns": {
      "timestamp": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1440,
        "most_common": {
          "value": "2025-03-01 23:43:00",
          "count": 5
        }
      },
      "base_station_id": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "BS001",
          "count": 1440
        }
      },
      "base_station_name": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "城东-商业区基站",
          "count": 1440
        }
      },
      "signal_type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 15,
        "most_common": {
          "value": "PAGING",
          "count": 523
        }
      },
      "status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "SUCCESS",
          "count": 6125
        }
      },
      "success_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.5001515515303329,
        "max": 0.9899954351064012,
        "mean": 0.8577264702900567,
        "median": 0.878781961988077
      },
      "failure_rate": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0100045648935988,
        "max": 0.4998484484696671,
        "mean": 0.1422735297099433,
        "median": 0.12121803801192305
      },
      "call_attempts": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 80,
        "min": 10,
        "max": 99,
        "mean": 41.36527777777778,
        "median": 32.0
      },
      "active_users": {
        "type": "int64",
        "missing_values": 0,
        "unique_values": 450,
        "min": 50,
        "max": 499,
        "mean": 200.36291666666668,
        "median": 162.0
      },
      "signal_strength_dbm": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -119.9994182622317,
        "max": -70.01293638709538,
        "mean": -95.03278482341102,
        "median": -95.1282878549003
      },
      "signal_quality_db": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 0.0014060937481952,
        "max": 29.9977448049953,
        "mean": 15.070743305317405,
        "median": 15.143131147218314
      },
      "downlink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 50.3341799549399,
        "max": 1499.847487010875,
        "mean": 713.3727619532459,
        "median": 691.3211683424604
      },
      "uplink_throughput_mbps": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.02502231975497,
        "max": 199.9758920576939,
        "mean": 91.60457968510894,
        "median": 82.33752854946047
      },
      "latency_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.00290349460528,
        "max": 49.98514299959502,
        "mean": 21.68716430516158,
        "median": 20.557139145639244
      },
      "jitter_ms": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": -4.997387470570525,
        "max": 4.998996843022912,
        "mean": -0.024618795886986893,
        "median": -0.058804158110981
      },
      "packet_loss_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 4.647987792372188e-05,
        "max": 4.999375495706468,
        "mean": 2.5111157287540524,
        "median": 2.5151660240869727
      },
      "resource_block_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 60,
        "min": 20.0,
        "max": 99.0,
        "mean": 56.25541666666667,
        "median": 50.0
      },
      "cpu_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 10.04127404790298,
        "max": 108.9950844477384,
        "mean": 56.22436752624803,
        "median": 49.413455412987716
      },
      "memory_usage_percent": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 5.04341661562998,
        "max": 113.6988024754922,
        "mean": 56.24006499132015,
        "median": 50.11718956136009
      },
      "temperature_celsius": {
        "type": "float64",
        "missing_values": 0,
        "unique_values": 7200,
        "min": 25.00192741330557,
        "max": 44.9957874362519,
        "mean": 35.034189235073974,
        "median": 35.09876528104492
      }
    }
  },
  "column_names": [
    "timestamp",
    "base_station_id",
    "base_station_name",
    "signal_type",
    "status",
    "success_rate",
    "failure_rate",
    "call_attempts",
    "active_users",
    "signal_strength_dbm",
    "signal_quality_db",
    "downlink_throughput_mbps",
    "uplink_throughput_mbps",
    "latency_ms",
    "jitter_ms",
    "packet_loss_percent",
    "resource_block_usage_percent",
    "cpu_usage_percent",
    "memory_usage_percent",
    "temperature_celsius"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport os\nimport numpy as np\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path, output_path):\n    \"\"\"\n    Analyze CSV data and save results to a text file\n    \n    Args:\n        file_path (str): Path to the CSV file\n        output_path (str): Path to save the analysis results\n    \"\"\"\n    try:\n        # Create output directory if it doesn't exist\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        print(f\"Reading CSV file: {file_path}\")\n        df = pd.read_csv(file_path)\n        \n        # Open output file\n        with open(output_path, 'w', encoding='utf-8') as f:\n            # Write header\n            f.write(\"=\" * 80 + \"\\n\")\n            f.write(f\"数据分析报告 - 生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n            f.write(f\"文件: {file_path}\\n\")\n            f.write(\"=\" * 80 + \"\\n\\n\")\n            \n            # Basic dataset information\n            f.write(\"1. 基本数据信息\\n\")\n            f.write(\"-\" * 80 + \"\\n\")\n            f.write(f\"行数: {df.shape[0]}\\n\")\n            f.write(f\"列数: {df.shape[1]}\\n\")\n            f.write(f\"内存使用: {df.memory_usage(deep=True).sum() / (1024*1024):.2f} MB\\n\\n\")\n            \n            # Column information\n            f.write(\"2. 列信息\\n\")\n            f.write(\"-\" * 80 + \"\\n\")\n            for col in df.columns:\n                f.write(f\"列名: {col}\\n\")\n                f.write(f\"  数据类型: {df[col].dtype}\\n\")\n                f.write(f\"  缺失值数量: {df[col].isna().sum()}\\n\")\n                f.write(f\"  唯一值数量: {df[col].nunique()}\\n\\n\")\n            \n            # Categorical columns analysis\n            categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n            f.write(\"3. 分类列分析\\n\")\n            f.write(\"-\" * 80 + \"\\n\")\n            for col in categorical_cols:\n                f.write(f\"列名: {col}\\n\")\n                value_counts = df[col].value_counts().head(10)\n                f.write(f\"  前10个最常见值:\\n\")\n                for val, count in value_counts.items():\n                    f.write(f\"    {val}: {count} ({count/len(df)*100:.2f}%)\\n\")\n                f.write(\"\\n\")\n            \n            # Numerical columns analysis\n            numerical_cols = df.select_dtypes(include=['number']).columns.tolist()\n            f.write(\"4. 数值列分析\\n\")\n            f.write(\"-\" * 80 + \"\\n\")\n            for col in numerical_cols:\n                f.write(f\"列名: {col}\\n\")\n                f.write(f\"  最小值: {df[col].min():.4f}\\n\")\n                f.write(f\"  最大值: {df[col].max():.4f}\\n\")\n                f.write(f\"  平均值: {df[col].mean():.4f}\\n\")\n                f.write(f\"  中位数: {df[col].median():.4f}\\n\")\n                f.write(f\"  标准差: {df[col].std():.4f}\\n\")\n                \n                # Calculate quartiles\n                q1 = df[col].quantile(0.25)\n                q3 = df[col].quantile(0.75)\n                iqr = q3 - q1\n                f.write(f\"  第一四分位数 (Q1): {q1:.4f}\\n\")\n                f.write(f\"  第三四分位数 (Q3): {q3:.4f}\\n\")\n                f.write(f\"  四分位距 (IQR): {iqr:.4f}\\n\\n\")\n            \n            # Time-based analysis for timestamp column\n            if 'timestamp' in df.columns:\n                f.write(\"5. 时间序列分析\\n\")\n                f.write(\"-\" * 80 + \"\\n\")\n                \n                # Convert timestamp to datetime if it's not already\n                if df['timestamp'].dtype != 'datetime64[ns]':\n                    df['timestamp'] = pd.to_datetime(df['timestamp'])\n                \n                # Get data range\n                min_date = df['timestamp'].min()\n                max_date = df['timestamp'].max()\n                date_range = max_date - min_date\n                \n                f.write(f\"时间范围: {min_date} 至 {max_date}\\n\")\n                f.write(f\"时间跨度: {date_range}\\n\\n\")\n            \n            # Correlation analysis\n            f.write(\"6. 相关性分析\\n\")\n            f.write(\"-\" * 80 + \"\\n\")\n            correlation_matrix = df[numerical_cols].corr()\n            \n            # Find top 10 highest correlations (excluding self-correlations)\n            correlations = []\n            for i, col1 in enumerate(numerical_cols):\n                for j, col2 in enumerate(numerical_cols):\n                    if i < j:  # Avoid duplicates and self-correlations\n                        correlations.append((col1, col2, correlation_matrix.loc[col1, col2]))\n            \n            # Sort by absolute correlation value\n            correlations.sort(key=lambda x: abs(x[2]), reverse=True)\n            \n            f.write(\"前10个最强相关性:\\n\")\n            for i, (col1, col2, corr) in enumerate(correlations[:10], 1):\n                f.write(f\"  {i}. {col1} 与 {col2}: {corr:.4f}\\n\")\n            f.write(\"\\n\")\n            \n            # Base station analysis\n            if 'base_station_id' in df.columns and 'base_station_name' in df.columns:\n                f.write(\"7. 基站分析\\n\")\n                f.write(\"-\" * 80 + \"\\n\")\n                stations = df[['base_station_id', 'base_station_name']].drop_duplicates()\n                f.write(f\"基站数量: {len(stations)}\\n\")\n                f.write(\"基站列表:\\n\")\n                for _, row in stations.iterrows():\n                    f.write(f\"  - {row['base_station_id']}: {row['base_station_name']}\\n\")\n                f.write(\"\\n\")\n                \n                # Aggregate metrics by base station\n                f.write(\"每个基站的关键指标:\\n\")\n                for _, station in stations.iterrows():\n                    station_id = station['base_station_id']\n                    station_df = df[df['base_station_id'] == station_id]\n                    f.write(f\"  基站: {station_id} ({station['base_station_name']})\\n\")\n                    f.write(f\"    记录数: {len(station_df)}\\n\")\n                    f.write(f\"    平均成功率: {station_df['success_rate'].mean():.4f}\\n\")\n                    f.write(f\"    平均失败率: {station_df['failure_rate'].mean():.4f}\\n\")\n                    f.write(f\"    平均信号强度 (dBm): {station_df['signal_strength_dbm'].mean():.4f}\\n\")\n                    f.write(f\"    平均下行吞吐量 (Mbps): {station_df['downlink_throughput_mbps'].mean():.4f}\\n\")\n                    f.write(f\"    平均上行吞吐量 (Mbps): {station_df['uplink_throughput_mbps'].mean():.4f}\\n\")\n                    f.write(f\"    平均延迟 (ms): {station_df['latency_ms'].mean():.4f}\\n\")\n                    f.write(f\"    平均丢包率 (%): {station_df['packet_loss_percent'].mean():.4f}\\n\")\n                    f.write(f\"    平均CPU使用率 (%): {station_df['cpu_usage_percent'].mean():.4f}\\n\")\n                    f.write(f\"    平均内存使用率 (%): {station_df['memory_usage_percent'].mean():.4f}\\n\")\n                    f.write(f\"    平均温度 (°C): {station_df['temperature_celsius'].mean():.4f}\\n\\n\")\n            \n            # Signal type analysis\n            if 'signal_type' in df.columns:\n                f.write(\"8. 信号类型分析\\n\")\n                f.write(\"-\" * 80 + \"\\n\")\n                signal_types = df['signal_type'].unique()\n                \n                f.write(f\"信号类型数量: {len(signal_types)}\\n\")\n                f.write(\"每种信号类型的关键指标:\\n\")\n                \n                for signal_type in signal_types:\n                    signal_df = df[df['signal_type'] == signal_type]\n                    f.write(f\"  信号类型: {signal_type}\\n\")\n                    f.write(f\"    记录数: {len(signal_df)}\\n\")\n                    f.write(f\"    平均成功率: {signal_df['success_rate'].mean():.4f}\\n\")\n                    f.write(f\"    平均失败率: {signal_df['failure_rate'].mean():.4f}\\n\")\n                    f.write(f\"    平均信号强度 (dBm): {signal_df['signal_strength_dbm'].mean():.4f}\\n\")\n                    f.write(f\"    平均信号质量 (dB): {signal_df['signal_quality_db'].mean():.4f}\\n\\n\")\n                \n            # Summary and conclusions\n            f.write(\"9. 总结与结论\\n\")\n            f.write(\"-\" * 80 + \"\\n\")\n            f.write(\"1. 数据集概述:\\n\")\n            f.write(f\"   - 共分析了 {df.shape[0]} 条记录，覆盖 {len(stations) if 'base_station_id' in df.columns else 'N/A'} 个基站\\n\")\n            f.write(f\"   - 数据包含 {len(categorical_cols)} 个分类列和 {len(numerical_cols)} 个数值列\\n\\n\")\n            \n            f.write(\"2. 主要发现:\\n\")\n            f.write(f\"   - 整体成功率: 平均 {df['success_rate'].mean():.4f}，中位数 {df['success_rate'].median():.4f}\\n\")\n            f.write(f\"   - 信号强度: 平均 {df['signal_strength_dbm'].mean():.4f} dBm\\n\")\n            f.write(f\"   - 网络延迟: 平均 {df['latency_ms'].mean():.4f} ms\\n\")\n            f.write(f\"   - 丢包率: 平均 {df['packet_loss_percent'].mean():.4f}%\\n\\n\")\n            \n            f.write(\"3. 性能指标:\\n\")\n            f.write(f\"   - 下行吞吐量: 平均 {df['downlink_throughput_mbps'].mean():.4f} Mbps\\n\")\n            f.write(f\"   - 上行吞吐量: 平均 {df['uplink_throughput_mbps'].mean():.4f} Mbps\\n\")\n            f.write(f\"   - 资源块使用率: 平均 {df['resource_block_usage_percent'].mean():.4f}%\\n\\n\")\n            \n            f.write(\"4. 基站运行状况:\\n\")\n            f.write(f\"   - CPU使用率: 平均 {df['cpu_usage_percent'].mean():.4f}%\\n\")\n            f.write(f\"   - 内存使用率: 平均 {df['memory_usage_percent'].mean():.4f}%\\n\")\n            f.write(f\"   - 设备温度: 平均 {df['temperature_celsius'].mean():.4f}°C\\n\\n\")\n            \n            f.write(\"=\" * 80 + \"\\n\")\n            f.write(\"分析完成\\n\")\n            \n        print(f\"Analysis complete. Results saved to {output_path}\")\n        return True\n    \n    except Exception as e:\n        print(f\"Error during analysis: {str(e)}\")\n        return False\n\n# Main execution\nif __name__ == \"__main__\":\n    file_path = \"temp_csv/excel_data_20250317152243.csv\"\n    output_path = \"pngs/analysis_results.txt\"\n    \n    success = analyze_csv_data(file_path, output_path)\n    if success:\n        print(\"Analysis completed successfully.\")\n    else:\n        print(\"Analysis failed.\")",
      "results": "Reading CSV file: temp_csv/excel_data_20250317152243.csv\nAnalysis complete. Results saved to pngs/analysis_results.txt\nAnalysis completed successfully.\n",
      "txt_results": "================================================================================\n数据分析报告 - 生成时间: 2025-03-17 15:24:16\n文件: temp_csv/excel_data_20250317152243.csv\n================================================================================\n\n1. 基本数据信息\n--------------------------------------------------------------------------------\n行数: 7200\n列数: 20\n内存使用: 3.06 MB\n\n2. 列信息\n--------------------------------------------------------------------------------\n列名: timestamp\n  数据类型: object\n  缺失值数量: 0\n  唯一值数量: 1440\n\n列名: base_station_id\n  数据类型: object\n  缺失值数量: 0\n  唯一值数量: 5\n\n列名: base_station_name\n  数据类型: object\n  缺失值数量: 0\n  唯一值数量: 5\n\n列名: signal_type\n  数据类型: object\n  缺失值数量: 0\n  唯一值数量: 15\n\n列名: status\n  数据类型: object\n  缺失值数量: 0\n  唯一值数量: 5\n\n列名: success_rate\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: failure_rate\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: call_attempts\n  数据类型: int64\n  缺失值数量: 0\n  唯一值数量: 80\n\n列名: active_users\n  数据类型: int64\n  缺失值数量: 0\n  唯一值数量: 450\n\n列名: signal_strength_dbm\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: signal_quality_db\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: downlink_throughput_mbps\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: uplink_throughput_mbps\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: latency_ms\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: jitter_ms\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: packet_loss_percent\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: resource_block_usage_percent\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 60\n\n列名: cpu_usage_percent\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: memory_usage_percent\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n列名: temperature_celsius\n  数据类型: float64\n  缺失值数量: 0\n  唯一值数量: 7200\n\n3. 分类列分析\n--------------------------------------------------------------------------------\n列名: timestamp\n  前10个最常见值:\n    2025-03-01 23:43:00: 5 (0.07%)\n    2025-03-01 23:42:00: 5 (0.07%)\n    2025-03-01 23:41:00: 5 (0.07%)\n    2025-03-01 23:40:00: 5 (0.07%)\n    2025-03-01 23:39:00: 5 (0.07%)\n    2025-03-01 23:38:00: 5 (0.07%)\n    2025-03-01 23:37:00: 5 (0.07%)\n    2025-03-01 23:36:00: 5 (0.07%)\n    2025-03-01 23:35:00: 5 (0.07%)\n    2025-03-01 23:34:00: 5 (0.07%)\n\n列名: base_station_id\n  前10个最常见值:\n    BS001: 1440 (20.00%)\n    BS002: 1440 (20.00%)\n    BS003: 1440 (20.00%)\n    BS004: 1440 (20.00%)\n    BS005: 1440 (20.00%)\n\n列名: base_station_name\n  前10个最常见值:\n    城东-商业区基站: 1440 (20.00%)\n    城西-住宅区基站: 1440 (20.00%)\n    城北-工业园区基站: 1440 (20.00%)\n    城南-大学城基站: 1440 (20.00%)\n    市中心-商业区基站: 1440 (20.00%)\n\n列名: signal_type\n  前10个最常见值:\n    PAGING: 523 (7.26%)\n    ATTACH_REQUEST: 502 (6.97%)\n    HANDOVER_REQUEST: 494 (6.86%)\n    HANDOVER_COMPLETE: 491 (6.82%)\n    SERVICE_REQUEST: 491 (6.82%)\n    HANDOVER_COMMAND: 486 (6.75%)\n    DETACH_REQUEST: 483 (6.71%)\n    RRC_CONNECTION_SETUP_COMPLETE: 477 (6.62%)\n    ATTACH_COMPLETE: 477 (6.62%)\n    SERVICE_ACCEPT: 475 (6.60%)\n\n列名: status\n  前10个最常见值:\n    SUCCESS: 6125 (85.07%)\n    FAILED: 373 (5.18%)\n    TIMEOUT: 270 (3.75%)\n    REJECTED: 237 (3.29%)\n    PENDING: 195 (2.71%)\n\n4. 数值列分析\n--------------------------------------------------------------------------------\n列名: success_rate\n  最小值: 0.5002\n  最大值: 0.9900\n  平均值: 0.8577\n  中位数: 0.8788\n  标准差: 0.1065\n  第一四分位数 (Q1): 0.8207\n  第三四分位数 (Q3): 0.9336\n  四分位距 (IQR): 0.1130\n\n列名: failure_rate\n  最小值: 0.0100\n  最大值: 0.4998\n  平均值: 0.1423\n  中位数: 0.1212\n  标准差: 0.1065\n  第一四分位数 (Q1): 0.0664\n  第三四分位数 (Q3): 0.1793\n  四分位距 (IQR): 0.1130\n\n列名: call_attempts\n  最小值: 10.0000\n  最大值: 99.0000\n  平均值: 41.3653\n  中位数: 32.0000\n  标准差: 26.1705\n  第一四分位数 (Q1): 21.0000\n  第三四分位数 (Q3): 63.0000\n  四分位距 (IQR): 42.0000\n\n列名: active_users\n  最小值: 50.0000\n  最大值: 499.0000\n  平均值: 200.3629\n  中位数: 162.0000\n  标准差: 122.8097\n  第一四分位数 (Q1): 106.0000\n  第三四分位数 (Q3): 278.0000\n  四分位距 (IQR): 172.0000\n\n列名: signal_strength_dbm\n  最小值: -119.9994\n  最大值: -70.0129\n  平均值: -95.0328\n  中位数: -95.1283\n  标准差: 14.3067\n  第一四分位数 (Q1): -107.2113\n  第三四分位数 (Q3): -82.8584\n  四分位距 (IQR): 24.3530\n\n列名: signal_quality_db\n  最小值: 0.0014\n  最大值: 29.9977\n  平均值: 15.0707\n  中位数: 15.1431\n  标准差: 8.6712\n  第一四分位数 (Q1): 7.6000\n  第三四分位数 (Q3): 22.5941\n  四分位距 (IQR): 14.9941\n\n列名: downlink_throughput_mbps\n  最小值: 50.3342\n  最大值: 1499.8475\n  平均值: 713.3728\n  中位数: 691.3212\n  标准差: 387.8624\n  第一四分位数 (Q1): 387.2963\n  第三四分位数 (Q3): 990.5840\n  四分位距 (IQR): 603.2877\n\n列名: uplink_throughput_mbps\n  最小值: 10.0250\n  最大值: 199.9759\n  平均值: 91.6046\n  中位数: 82.3375\n  标准差: 51.9029\n  第一四分位数 (Q1): 49.1692\n  第三四分位数 (Q3): 132.4248\n  四分位距 (IQR): 83.2555\n\n列名: latency_ms\n  最小值: 5.0029\n  最大值: 49.9851\n  平均值: 21.6872\n  中位数: 20.5571\n  标准差: 10.6249\n  第一四分位数 (Q1): 13.4495\n  第三四分位数 (Q3): 27.4721\n  四分位距 (IQR): 14.0227\n\n列名: jitter_ms\n  最小值: -4.9974\n  最大值: 4.9990\n  平均值: -0.0246\n  中位数: -0.0588\n  标准差: 2.8912\n  第一四分位数 (Q1): -2.5303\n  第三四分位数 (Q3): 2.4724\n  四分位距 (IQR): 5.0027\n\n列名: packet_loss_percent\n  最小值: 0.0000\n  最大值: 4.9994\n  平均值: 2.5111\n  中位数: 2.5152\n  标准差: 1.4304\n  第一四分位数 (Q1): 1.2836\n  第三四分位数 (Q3): 3.7459\n  四分位距 (IQR): 2.4623\n\n列名: resource_block_usage_percent\n  最小值: 20.0000\n  最大值: 99.0000\n  平均值: 56.2554\n  中位数: 50.0000\n  标准差: 25.5395\n  第一四分位数 (Q1): 35.0000\n  第三四分位数 (Q3): 85.0000\n  四分位距 (IQR): 50.0000\n\n列名: cpu_usage_percent\n  最小值: 10.0413\n  最大值: 108.9951\n  平均值: 56.2244\n  中位数: 49.4135\n  标准差: 26.2224\n  第一四分位数 (Q1): 34.6503\n  第三四分位数 (Q3): 83.6770\n  四分位距 (IQR): 49.0267\n\n列名: memory_usage_percent\n  最小值: 5.0434\n  最大值: 113.6988\n  平均值: 56.2401\n  中位数: 50.1172\n  标准差: 26.8721\n  第一四分位数 (Q1): 34.9119\n  第三四分位数 (Q3): 81.4737\n  四分位距 (IQR): 46.5618\n\n列名: temperature_celsius\n  最小值: 25.0019\n  最大值: 44.9958\n  平均值: 35.0342\n  中位数: 35.0988\n  标准差: 5.7570\n  第一四分位数 (Q1): 30.0351\n  第三四分位数 (Q3): 39.9654\n  四分位距 (IQR): 9.9303\n\n5. 时间序列分析\n--------------------------------------------------------------------------------\n时间范围: 2025-03-01 00:00:00 至 2025-03-01 23:59:00\n时间跨度: 0 days 23:59:00\n\n6. 相关性分析\n--------------------------------------------------------------------------------\n前10个最强相关性:\n  1. success_rate 与 failure_rate: -1.0000\n  2. resource_block_usage_percent 与 cpu_usage_percent: 0.9756\n  3. resource_block_usage_percent 与 memory_usage_percent: 0.9477\n  4. cpu_usage_percent 与 memory_usage_percent: 0.9244\n  5. call_attempts 与 resource_block_usage_percent: 0.8366\n  6. call_attempts 与 cpu_usage_percent: 0.8167\n  7. active_users 与 resource_block_usage_percent: 0.7963\n  8. call_attempts 与 memory_usage_percent: 0.7932\n  9. call_attempts 与 active_users: 0.7897\n  10. active_users 与 cpu_usage_percent: 0.7793\n\n7. 基站分析\n--------------------------------------------------------------------------------\n基站数量: 5\n基站列表:\n  - BS001: 城东-商业区基站\n  - BS002: 城西-住宅区基站\n  - BS003: 城北-工业园区基站\n  - BS004: 城南-大学城基站\n  - BS005: 市中心-商业区基站\n\n每个基站的关键指标:\n  基站: BS001 (城东-商业区基站)\n    记录数: 1440\n    平均成功率: 0.8536\n    平均失败率: 0.1464\n    平均信号强度 (dBm): -95.2872\n    平均下行吞吐量 (Mbps): 720.4582\n    平均上行吞吐量 (Mbps): 90.3813\n    平均延迟 (ms): 21.7654\n    平均丢包率 (%): 2.5627\n    平均CPU使用率 (%): 56.5443\n    平均内存使用率 (%): 55.9838\n    平均温度 (°C): 35.3193\n\n  基站: BS002 (城西-住宅区基站)\n    记录数: 1440\n    平均成功率: 0.8604\n    平均失败率: 0.1396\n    平均信号强度 (dBm): -94.7703\n    平均下行吞吐量 (Mbps): 714.9190\n    平均上行吞吐量 (Mbps): 92.4974\n    平均延迟 (ms): 21.7423\n    平均丢包率 (%): 2.4989\n    平均CPU使用率 (%): 55.8813\n    平均内存使用率 (%): 56.1626\n    平均温度 (°C): 34.6689\n\n  基站: BS003 (城北-工业园区基站)\n    记录数: 1440\n    平均成功率: 0.8558\n    平均失败率: 0.1442\n    平均信号强度 (dBm): -95.1297\n    平均下行吞吐量 (Mbps): 722.9671\n    平均上行吞吐量 (Mbps): 91.3795\n    平均延迟 (ms): 21.5208\n    平均丢包率 (%): 2.5182\n    平均CPU使用率 (%): 55.9410\n    平均内存使用率 (%): 56.3042\n    平均温度 (°C): 35.1344\n\n  基站: BS004 (城南-大学城基站)\n    记录数: 1440\n    平均成功率: 0.8609\n    平均失败率: 0.1391\n    平均信号强度 (dBm): -94.9877\n    平均下行吞吐量 (Mbps): 691.4349\n    平均上行吞吐量 (Mbps): 91.3354\n    平均延迟 (ms): 21.7937\n    平均丢包率 (%): 2.4807\n    平均CPU使用率 (%): 56.2088\n    平均内存使用率 (%): 56.1535\n    平均温度 (°C): 35.0887\n\n  基站: BS005 (市中心-商业区基站)\n    记录数: 1440\n    平均成功率: 0.8579\n    平均失败率: 0.1421\n    平均信号强度 (dBm): -94.9891\n    平均下行吞吐量 (Mbps): 717.0846\n    平均上行吞吐量 (Mbps): 92.4293\n    平均延迟 (ms): 21.6137\n    平均丢包率 (%): 2.4951\n    平均CPU使用率 (%): 56.5464\n    平均内存使用率 (%): 56.5962\n    平均温度 (°C): 34.9597\n\n8. 信号类型分析\n--------------------------------------------------------------------------------\n信号类型数量: 15\n每种信号类型的关键指标:\n  信号类型: RRC_CONNECTION_RELEASE\n    记录数: 464\n    平均成功率: 0.8606\n    平均失败率: 0.1394\n    平均信号强度 (dBm): -95.4132\n    平均信号质量 (dB): 14.7802\n\n  信号类型: SERVICE_REQUEST\n    记录数: 491\n    平均成功率: 0.8554\n    平均失败率: 0.1446\n    平均信号强度 (dBm): -94.7337\n    平均信号质量 (dB): 14.2906\n\n  信号类型: DETACH_ACCEPT\n    记录数: 465\n    平均成功率: 0.8652\n    平均失败率: 0.1348\n    平均信号强度 (dBm): -95.8606\n    平均信号质量 (dB): 15.5178\n\n  信号类型: HANDOVER_REQUEST\n    记录数: 494\n    平均成功率: 0.8546\n    平均失败率: 0.1454\n    平均信号强度 (dBm): -94.8151\n    平均信号质量 (dB): 15.2052\n\n  信号类型: PAGING\n    记录数: 523\n    平均成功率: 0.8610\n    平均失败率: 0.1390\n    平均信号强度 (dBm): -93.5437\n    平均信号质量 (dB): 14.6012\n\n  信号类型: HANDOVER_COMMAND\n    记录数: 486\n    平均成功率: 0.8492\n    平均失败率: 0.1508\n    平均信号强度 (dBm): -95.6571\n    平均信号质量 (dB): 15.1922\n\n  信号类型: RRC_CONNECTION_SETUP_COMPLETE\n    记录数: 477\n    平均成功率: 0.8621\n    平均失败率: 0.1379\n    平均信号强度 (dBm): -94.7365\n    平均信号质量 (dB): 15.9539\n\n  信号类型: ATTACH_COMPLETE\n    记录数: 477\n    平均成功率: 0.8633\n    平均失败率: 0.1367\n    平均信号强度 (dBm): -94.6415\n    平均信号质量 (dB): 15.4976\n\n  信号类型: ATTACH_REQUEST\n    记录数: 502\n    平均成功率: 0.8507\n    平均失败率: 0.1493\n    平均信号强度 (dBm): -95.5411\n    平均信号质量 (dB): 14.7927\n\n  信号类型: ATTACH_ACCEPT\n    记录数: 440\n    平均成功率: 0.8532\n    平均失败率: 0.1468\n    平均信号强度 (dBm): -93.8665\n    平均信号质量 (dB): 15.8234\n\n  信号类型: RRC_CONNECTION_REQUEST\n    记录数: 471\n    平均成功率: 0.8552\n    平均失败率: 0.1448\n    平均信号强度 (dBm): -95.2087\n    平均信号质量 (dB): 14.6189\n\n  信号类型: HANDOVER_COMPLETE\n    记录数: 491\n    平均成功率: 0.8584\n    平均失败率: 0.1416\n    平均信号强度 (dBm): -95.6206\n    平均信号质量 (dB): 15.2179\n\n  信号类型: DETACH_REQUEST\n    记录数: 483\n    平均成功率: 0.8615\n    平均失败率: 0.1385\n    平均信号强度 (dBm): -95.2452\n    平均信号质量 (dB): 14.9795\n\n  信号类型: RRC_CONNECTION_SETUP\n    记录数: 461\n    平均成功率: 0.8575\n    平均失败率: 0.1425\n    平均信号强度 (dBm): -95.8142\n    平均信号质量 (dB): 15.0596\n\n  信号类型: SERVICE_ACCEPT\n    记录数: 475\n    平均成功率: 0.8581\n    平均失败率: 0.1419\n    平均信号强度 (dBm): -94.8641\n    平均信号质量 (dB): 14.6570\n\n9. 总结与结论\n--------------------------------------------------------------------------------\n1. 数据集概述:\n   - 共分析了 7200 条记录，覆盖 5 个基站\n   - 数据包含 5 个分类列和 15 个数值列\n\n2. 主要发现:\n   - 整体成功率: 平均 0.8577，中位数 0.8788\n   - 信号强度: 平均 -95.0328 dBm\n   - 网络延迟: 平均 21.6872 ms\n   - 丢包率: 平均 2.5111%\n\n3. 性能指标:\n   - 下行吞吐量: 平均 713.3728 Mbps\n   - 上行吞吐量: 平均 91.6046 Mbps\n   - 资源块使用率: 平均 56.2554%\n\n4. 基站运行状况:\n   - CPU使用率: 平均 56.2244%\n   - 内存使用率: 平均 56.2401%\n   - 设备温度: 平均 35.0342°C\n\n================================================================================\n分析完成\n",
      "report_file": "reports\\总体数据统计分析_20250317_152610.md"
    },
    "分组对比分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport os\nimport numpy as np\nfrom datetime import datetime\n\ndef read_data_safely(file_path):\n    \"\"\"安全读取CSV文件\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        print(f\"成功读取文件 {file_path}，共 {len(df)} 行数据\")\n        return df\n    except FileNotFoundError:\n        print(f\"错误：文件 {file_path} 不存在\")\n        return None\n    except Exception as e:\n        print(f\"读取文件时发生错误: {str(e)}\")\n        return None\n\ndef analyze_distribution(df):\n    \"\"\"分析数值列和分类列的分布\"\"\"\n    results = []\n    \n    results.append(\"1. 数据分布分析\\n\" + \"=\"*50)\n    \n    # 分析分类列\n    cat_columns = ['base_station_id', 'base_station_name', 'signal_type', 'status']\n    results.append(\"\\n1.1 分类列分布\\n\" + \"-\"*50)\n    \n    for col in cat_columns:\n        dist = df[col].value_counts().reset_index()\n        dist.columns = [col, '计数']\n        dist['百分比'] = (dist['计数'] / dist['计数'].sum() * 100).round(2)\n        \n        results.append(f\"\\n{col} 分布:\")\n        table_rows = []\n        for _, row in dist.iterrows():\n            table_rows.append(f\"{row[col]:<20} {row['计数']:<6} {row['百分比']}%\")\n        results.append(\"\\n\".join(table_rows))\n    \n    # 分析数值列\n    num_columns = ['success_rate', 'failure_rate', 'call_attempts', 'active_users', \n                  'signal_strength_dbm', 'signal_quality_db', 'downlink_throughput_mbps',\n                  'uplink_throughput_mbps', 'latency_ms', 'jitter_ms', 'packet_loss_percent',\n                  'resource_block_usage_percent', 'cpu_usage_percent', 'memory_usage_percent',\n                  'temperature_celsius']\n    \n    results.append(\"\\n\\n1.2 数值列统计\\n\" + \"-\"*50)\n    \n    # 创建一个表格形式的输出\n    headers = [\"列名\", \"最小值\", \"最大值\", \"平均值\", \"中位数\", \"标准差\"]\n    results.append(f\"{headers[0]:<30} {headers[1]:<10} {headers[2]:<10} {headers[3]:<10} {headers[4]:<10} {headers[5]:<10}\")\n    results.append(\"-\"*80)\n    \n    for col in num_columns:\n        min_val = df[col].min().round(2)\n        max_val = df[col].max().round(2)\n        mean_val = df[col].mean().round(2)\n        median_val = df[col].median().round(2)\n        std_val = df[col].std().round(2)\n        \n        results.append(f\"{col:<30} {min_val:<10} {max_val:<10} {mean_val:<10} {median_val:<10} {std_val:<10}\")\n    \n    return \"\\n\".join(results)\n\ndef group_analysis(df):\n    \"\"\"对数据进行分组统计，比较不同组之间的差异\"\"\"\n    results = []\n    \n    results.append(\"\\n\\n2. 分组对比分析\\n\" + \"=\"*50)\n    \n    # 2.1 按基站分组\n    results.append(\"\\n2.1 按基站分组分析\\n\" + \"-\"*50)\n    station_group = df.groupby('base_station_name').agg({\n        'success_rate': ['mean', 'min', 'max'],\n        'active_users': ['mean', 'max'],\n        'signal_strength_dbm': 'mean',\n        'downlink_throughput_mbps': 'mean',\n        'uplink_throughput_mbps': 'mean',\n        'latency_ms': 'mean',\n        'packet_loss_percent': 'mean',\n        'cpu_usage_percent': 'mean',\n        'temperature_celsius': 'mean'\n    }).round(2)\n    \n    results.append(station_group.to_string())\n    \n    # 2.2 按信号类型分组\n    results.append(\"\\n\\n2.2 按信号类型分组分析\\n\" + \"-\"*50)\n    signal_group = df.groupby('signal_type').agg({\n        'success_rate': ['mean', 'min', 'max'],\n        'failure_rate': 'mean',\n        'call_attempts': 'mean',\n        'latency_ms': 'mean',\n        'packet_loss_percent': 'mean'\n    }).round(2)\n    \n    results.append(signal_group.to_string())\n    \n    # 2.3 按状态分组\n    results.append(\"\\n\\n2.3 按状态分组分析\\n\" + \"-\"*50)\n    status_group = df.groupby('status').agg({\n        'call_attempts': 'mean',\n        'signal_strength_dbm': 'mean',\n        'downlink_throughput_mbps': 'mean',\n        'latency_ms': 'mean',\n        'resource_block_usage_percent': 'mean'\n    }).round(2)\n    \n    results.append(status_group.to_string())\n    \n    # 2.4 按时间段分组（每小时）\n    results.append(\"\\n\\n2.4 按时间段分组分析（每小时）\\n\" + \"-\"*50)\n    # 转换时间戳列为日期时间格式\n    df['hour'] = pd.to_datetime(df['timestamp']).dt.hour\n    time_group = df.groupby('hour').agg({\n        'success_rate': 'mean',\n        'active_users': 'mean',\n        'downlink_throughput_mbps': 'mean',\n        'latency_ms': 'mean',\n        'cpu_usage_percent': 'mean'\n    }).round(2)\n    \n    results.append(time_group.to_string())\n    \n    return \"\\n\".join(results)\n\ndef comparative_analysis(df):\n    \"\"\"执行比较性分析，寻找显著差异\"\"\"\n    results = []\n    \n    results.append(\"\\n\\n3. 比较性分析\\n\" + \"=\"*50)\n    \n    # 3.1 不同基站之间的成功率差异\n    results.append(\"\\n3.1 不同基站之间的关键性能指标对比\\n\" + \"-\"*50)\n    \n    # 计算各基站的关键指标并进行排名\n    station_perf = df.groupby('base_station_name').agg({\n        'success_rate': 'mean',\n        'latency_ms': 'mean',\n        'downlink_throughput_mbps': 'mean',\n        'packet_loss_percent': 'mean'\n    }).round(2)\n    \n    # 添加排名\n    station_perf['成功率_排名'] = station_perf['success_rate'].rank(ascending=False).astype(int)\n    station_perf['延迟_排名'] = station_perf['latency_ms'].rank().astype(int)  # 延迟越低越好\n    station_perf['下行吞吐量_排名'] = station_perf['downlink_throughput_mbps'].rank(ascending=False).astype(int)\n    station_perf['丢包率_排名'] = station_perf['packet_loss_percent'].rank().astype(int)  # 丢包率越低越好\n    \n    results.append(station_perf.to_string())\n    \n    # 3.2 高负载与低负载条件下的性能差异\n    results.append(\"\\n\\n3.2 高负载与低负载条件下的性能差异\\n\" + \"-\"*50)\n    \n    # 基于活跃用户数定义高负载和低负载\n    median_users = df['active_users'].median()\n    high_load = df[df['active_users'] > median_users]\n    low_load = df[df['active_users'] <= median_users]\n    \n    metrics = ['success_rate', 'latency_ms', 'downlink_throughput_mbps', \n               'uplink_throughput_mbps', 'packet_loss_percent']\n    \n    load_comparison = pd.DataFrame({\n        '高负载_平均值': high_load[metrics].mean(),\n        '低负载_平均值': low_load[metrics].mean(),\n        '差异_百分比': ((high_load[metrics].mean() - low_load[metrics].mean()) / low_load[metrics].mean() * 100).round(2)\n    })\n    \n    results.append(load_comparison.to_string())\n    \n    # 3.3 信号强度与性能关系\n    results.append(\"\\n\\n3.3 信号强度与成功率关系\\n\" + \"-\"*50)\n    \n    # 将信号强度分成几个区间\n    df['signal_strength_group'] = pd.cut(\n        df['signal_strength_dbm'],\n        bins=[-120, -110, -100, -90, -80, -70],\n        labels=['极弱 (-120~-110)', '较弱 (-110~-100)', '中等 (-100~-90)', '较强 (-90~-80)', '强 (-80~-70)']\n    )\n    \n    signal_perf = df.groupby('signal_strength_group').agg({\n        'success_rate': 'mean',\n        'downlink_throughput_mbps': 'mean',\n        'latency_ms': 'mean',\n        'packet_loss_percent': 'mean',\n        'base_station_id': 'count'\n    })\n    \n    signal_perf.rename(columns={'base_station_id': '样本数'}, inplace=True)\n    signal_perf = signal_perf.round(2)\n    \n    results.append(signal_perf.to_string())\n    \n    return \"\\n\".join(results)\n\ndef identify_anomalies(df):\n    \"\"\"识别异常值和异常模式\"\"\"\n    results = []\n    \n    results.append(\"\\n\\n4. 异常检测与模式识别\\n\" + \"=\"*50)\n    \n    # 4.1 识别异常高的延迟\n    results.append(\"\\n4.1 高延迟异常\\n\" + \"-\"*50)\n    latency_threshold = df['latency_ms'].mean() + 2 * df['latency_ms'].std()\n    high_latency = df[df['latency_ms'] > latency_threshold]\n    \n    results.append(f\"高延迟阈值: {latency_threshold:.2f} ms\")\n    results.append(f\"高延迟记录数: {len(high_latency)} ({len(high_latency)/len(df)*100:.2f}%)\")\n    \n    if len(high_latency) > 0:\n        # 按基站和信号类型统计高延迟记录\n        high_latency_by_station = high_latency['base_station_name'].value_counts()\n        high_latency_by_signal = high_latency['signal_type'].value_counts()\n        \n        results.append(\"\\n按基站统计高延迟记录:\")\n        results.append(high_latency_by_station.to_string())\n        \n        results.append(\"\\n按信号类型统计高延迟记录:\")\n        results.append(high_latency_by_signal.to_string())\n    \n    # 4.2 识别异常低的成功率\n    results.append(\"\\n\\n4.2 低成功率异常\\n\" + \"-\"*50)\n    success_threshold = df['success_rate'].mean() - 2 * df['success_rate'].std()\n    low_success = df[df['success_rate'] < success_threshold]\n    \n    results.append(f\"低成功率阈值: {success_threshold:.2f}\")\n    results.append(f\"低成功率记录数: {len(low_success)} ({len(low_success)/len(df)*100:.2f}%)\")\n    \n    if len(low_success) > 0:\n        # 按基站和信号类型统计低成功率记录\n        low_success_by_station = low_success['base_station_name'].value_counts()\n        low_success_by_signal = low_success['signal_type'].value_counts()\n        \n        results.append(\"\\n按基站统计低成功率记录:\")\n        results.append(low_success_by_station.to_string())\n        \n        results.append(\"\\n按信号类型统计低成功率记录:\")\n        results.append(low_success_by_signal.to_string())\n    \n    return \"\\n\".join(results)\n\ndef main():\n    \"\"\"主函数，执行所有分析并保存结果\"\"\"\n    file_path = \"temp_csv/excel_data_20250317152243.csv\"\n    output_path = \"pngs/group_comparison_results.txt\"\n    \n    # 确保输出目录存在\n    os.makedirs(os.path.dirname(output_path), exist_ok=True)\n    \n    # 读取数据\n    df = read_data_safely(file_path)\n    if df is None:\n        return\n    \n    # 生成分析结果\n    results = []\n    \n    # 添加标题和执行时间\n    results.append(\"基站数据分析报告\")\n    results.append(\"=\" * 50)\n    results.append(f\"分析时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    results.append(f\"数据文件: {file_path}\")\n    results.append(f\"记录数: {len(df)}\")\n    \n    # 执行各项分析\n    results.append(analyze_distribution(df))\n    results.append(group_analysis(df))\n    results.append(comparative_analysis(df))\n    results.append(identify_anomalies(df))\n    \n    # 添加结论\n    results.append(\"\\n\\n5. 分析结论\\n\" + \"=\"*50)\n    results.append(\"\\n这里是自动生成的结论，基于数据分析结果。具体结论将取决于实际数据内容。\")\n    \n    # 保存结果\n    try:\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(\"\\n\".join(results))\n        print(f\"分析结果已保存至 {output_path}\")\n    except Exception as e:\n        print(f\"保存结果时发生错误: {str(e)}\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "成功读取文件 temp_csv/excel_data_20250317152243.csv，共 7200 行数据\n分析结果已保存至 pngs/group_comparison_results.txt\n",
      "txt_results": "基站数据分析报告\n==================================================\n分析时间: 2025-03-17 15:27:48\n数据文件: temp_csv/excel_data_20250317152243.csv\n记录数: 7200\n1. 数据分布分析\n==================================================\n\n1.1 分类列分布\n--------------------------------------------------\n\nbase_station_id 分布:\nBS001                1440   20.0%\nBS002                1440   20.0%\nBS003                1440   20.0%\nBS004                1440   20.0%\nBS005                1440   20.0%\n\nbase_station_name 分布:\n城东-商业区基站             1440   20.0%\n城西-住宅区基站             1440   20.0%\n城北-工业园区基站            1440   20.0%\n城南-大学城基站             1440   20.0%\n市中心-商业区基站            1440   20.0%\n\nsignal_type 分布:\nPAGING               523    7.26%\nATTACH_REQUEST       502    6.97%\nHANDOVER_REQUEST     494    6.86%\nHANDOVER_COMPLETE    491    6.82%\nSERVICE_REQUEST      491    6.82%\nHANDOVER_COMMAND     486    6.75%\nDETACH_REQUEST       483    6.71%\nRRC_CONNECTION_SETUP_COMPLETE 477    6.62%\nATTACH_COMPLETE      477    6.62%\nSERVICE_ACCEPT       475    6.6%\nRRC_CONNECTION_REQUEST 471    6.54%\nDETACH_ACCEPT        465    6.46%\nRRC_CONNECTION_RELEASE 464    6.44%\nRRC_CONNECTION_SETUP 461    6.4%\nATTACH_ACCEPT        440    6.11%\n\nstatus 分布:\nSUCCESS              6125   85.07%\nFAILED               373    5.18%\nTIMEOUT              270    3.75%\nREJECTED             237    3.29%\nPENDING              195    2.71%\n\n\n1.2 数值列统计\n--------------------------------------------------\n列名                             最小值        最大值        平均值        中位数        标准差       \n--------------------------------------------------------------------------------\nsuccess_rate                   0.5        0.99       0.86       0.88       0.11      \nfailure_rate                   0.01       0.5        0.14       0.12       0.11      \ncall_attempts                  10         99         41.37      32.0       26.17     \nactive_users                   50         499        200.36     162.0      122.81    \nsignal_strength_dbm            -120.0     -70.01     -95.03     -95.13     14.31     \nsignal_quality_db              0.0        30.0       15.07      15.14      8.67      \ndownlink_throughput_mbps       50.33      1499.85    713.37     691.32     387.86    \nuplink_throughput_mbps         10.03      199.98     91.6       82.34      51.9      \nlatency_ms                     5.0        49.99      21.69      20.56      10.62     \njitter_ms                      -5.0       5.0        -0.02      -0.06      2.89      \npacket_loss_percent            0.0        5.0        2.51       2.52       1.43      \nresource_block_usage_percent   20.0       99.0       56.26      50.0       25.54     \ncpu_usage_percent              10.04      109.0      56.22      49.41      26.22     \nmemory_usage_percent           5.04       113.7      56.24      50.12      26.87     \ntemperature_celsius            25.0       45.0       35.03      35.1       5.76      \n\n\n2. 分组对比分析\n==================================================\n\n2.1 按基站分组分析\n--------------------------------------------------\n                  success_rate            active_users      signal_strength_dbm downlink_throughput_mbps uplink_throughput_mbps latency_ms packet_loss_percent cpu_usage_percent temperature_celsius\n                          mean  min   max         mean  max                mean                     mean                   mean       mean                mean              mean                mean\nbase_station_name                                                                                                                                                                                   \n城东-商业区基站                  0.85  0.5  0.99       200.08  499              -95.29                   720.46                  90.38      21.77                2.56             56.54               35.32\n城北-工业园区基站                 0.86  0.5  0.99       201.92  499              -95.13                   722.97                  91.38      21.52                2.52             55.94               35.13\n城南-大学城基站                  0.86  0.5  0.99       198.12  498              -94.99                   691.43                  91.34      21.79                2.48             56.21               35.09\n城西-住宅区基站                  0.86  0.5  0.99       200.36  499              -94.77                   714.92                  92.50      21.74                2.50             55.88               34.67\n市中心-商业区基站                 0.86  0.5  0.99       201.34  499              -94.99                   717.08                  92.43      21.61                2.50             56.55               34.96\n\n\n2.2 按信号类型分组分析\n--------------------------------------------------\n                              success_rate             failure_rate call_attempts latency_ms packet_loss_percent\n                                      mean   min   max         mean          mean       mean                mean\nsignal_type                                                                                                     \nATTACH_ACCEPT                         0.85  0.50  0.99         0.15         41.91      21.80                2.41\nATTACH_COMPLETE                       0.86  0.50  0.99         0.14         43.10      21.94                2.45\nATTACH_REQUEST                        0.85  0.51  0.99         0.15         41.28      21.57                2.49\nDETACH_ACCEPT                         0.87  0.51  0.99         0.13         42.23      21.63                2.47\nDETACH_REQUEST                        0.86  0.50  0.99         0.14         40.98      21.36                2.67\nHANDOVER_COMMAND                      0.85  0.50  0.99         0.15         40.09      20.50                2.47\nHANDOVER_COMPLETE                     0.86  0.50  0.99         0.14         42.16      22.13                2.45\nHANDOVER_REQUEST                      0.85  0.51  0.99         0.15         41.37      22.60                2.58\nPAGING                                0.86  0.50  0.99         0.14         41.01      22.14                2.52\nRRC_CONNECTION_RELEASE                0.86  0.50  0.99         0.14         41.96      21.68                2.57\nRRC_CONNECTION_REQUEST                0.86  0.51  0.99         0.14         40.14      21.50                2.50\nRRC_CONNECTION_SETUP                  0.86  0.51  0.99         0.14         40.61      22.04                2.50\nRRC_CONNECTION_SETUP_COMPLETE         0.86  0.50  0.99         0.14         40.93      21.05                2.49\nSERVICE_ACCEPT                        0.86  0.50  0.99         0.14         41.28      21.43                2.46\nSERVICE_REQUEST                       0.86  0.50  0.99         0.14         41.51      21.88                2.63\n\n\n2.3 按状态分组分析\n--------------------------------------------------\n          call_attempts  signal_strength_dbm  downlink_throughput_mbps  latency_ms  resource_block_usage_percent\nstatus                                                                                                          \nFAILED            40.94               -95.37                    722.21       21.39                         56.19\nPENDING           39.87               -94.53                    692.07       21.38                         54.52\nREJECTED          40.24               -94.92                    711.15       21.56                         55.18\nSUCCESS           41.45               -95.01                    712.21       21.73                         56.30\nTIMEOUT           41.99               -95.46                    744.81       21.41                         57.59\n\n\n2.4 按时间段分组分析（每小时）\n--------------------------------------------------\n      success_rate  active_users  downlink_throughput_mbps  latency_ms  cpu_usage_percent\nhour                                                                                     \n0             0.86        125.59                    822.03       17.26              39.83\n1             0.85        121.66                    772.00       17.49              39.72\n2             0.86        124.62                    787.74       17.62              39.54\n3             0.86        123.17                    805.15       17.54              40.19\n4             0.86        126.52                    840.01       18.61              38.53\n5             0.86        123.63                    800.90       17.95              41.22\n6             0.86        128.33                    796.51       17.13              38.96\n7             0.86        122.85                    837.38       18.18              39.31\n8             0.85        343.74                    523.13       30.20              90.03\n9             0.86        344.26                    501.84       29.30              89.44\n10            0.86        125.34                    822.26       16.66              38.07\n11            0.86        124.45                    793.75       17.73              39.83\n12            0.86        345.93                    550.51       29.13              90.27\n13            0.85        360.98                    524.81       30.13              88.71\n14            0.85        124.14                    801.64       17.41              38.88\n15            0.86        124.62                    838.72       17.43              40.50\n16            0.85        127.90                    777.87       17.58              39.84\n17            0.86        123.45                    776.83       17.54              39.03\n18            0.85        350.31                    544.47       30.32              89.60\n19            0.85        360.34                    538.48       30.36              89.37\n20            0.87        348.10                    546.12       30.18              89.84\n21            0.87        355.05                    505.19       29.70              88.98\n22            0.86        126.36                    800.04       17.67              39.99\n23            0.87        127.36                    813.56       17.36              39.72\n\n\n3. 比较性分析\n==================================================\n\n3.1 不同基站之间的关键性能指标对比\n--------------------------------------------------\n                   success_rate  latency_ms  downlink_throughput_mbps  packet_loss_percent  成功率_排名  延迟_排名  下行吞吐量_排名  丢包率_排名\nbase_station_name                                                                                                          \n城东-商业区基站                   0.85       21.77                    720.46                 2.56       5      4         2       5\n城北-工业园区基站                  0.86       21.52                    722.97                 2.52       2      1         1       4\n城南-大学城基站                   0.86       21.79                    691.43                 2.48       2      5         5       1\n城西-住宅区基站                   0.86       21.74                    714.92                 2.50       2      3         4       2\n市中心-商业区基站                  0.86       21.61                    717.08                 2.50       2      2         3       2\n\n\n3.2 高负载与低负载条件下的性能差异\n--------------------------------------------------\n                             高负载_平均值     低负载_平均值  差异_百分比\nsuccess_rate                0.858772    0.856685    0.24\nlatency_ms                 25.794114   17.593881   46.61\ndownlink_throughput_mbps  616.501994  809.921165  -23.88\nuplink_throughput_mbps     74.682680  108.470167  -31.15\npacket_loss_percent         2.512595    2.509641    0.12\n\n\n3.3 信号强度与成功率关系\n--------------------------------------------------\n                       success_rate  downlink_throughput_mbps  latency_ms  packet_loss_percent   样本数\nsignal_strength_group                                                                               \n极弱 (-120~-110)                 0.86                    715.74       21.80                 2.50  1409\n较弱 (-110~-100)                 0.86                    710.91       21.68                 2.54  1458\n中等 (-100~-90)                  0.86                    706.91       21.55                 2.47  1490\n较强 (-90~-80)                   0.86                    725.64       21.67                 2.52  1444\n强 (-80~-70)                    0.86                    707.78       21.75                 2.53  1399\n\n\n4. 异常检测与模式识别\n==================================================\n\n4.1 高延迟异常\n--------------------------------------------------\n高延迟阈值: 42.94 ms\n高延迟记录数: 422 (5.86%)\n\n按基站统计高延迟记录:\nbase_station_name\n城西-住宅区基站     89\n城南-大学城基站     89\n城东-商业区基站     84\n市中心-商业区基站    81\n城北-工业园区基站    79\n\n按信号类型统计高延迟记录:\nsignal_type\nATTACH_COMPLETE                  35\nSERVICE_REQUEST                  34\nRRC_CONNECTION_RELEASE           32\nRRC_CONNECTION_SETUP             32\nHANDOVER_REQUEST                 30\nSERVICE_ACCEPT                   29\nHANDOVER_COMPLETE                29\nPAGING                           29\nATTACH_REQUEST                   29\nRRC_CONNECTION_SETUP_COMPLETE    27\nRRC_CONNECTION_REQUEST           26\nDETACH_ACCEPT                    25\nATTACH_ACCEPT                    23\nDETACH_REQUEST                   23\nHANDOVER_COMMAND                 19\n\n\n4.2 低成功率异常\n--------------------------------------------------\n低成功率阈值: 0.64\n低成功率记录数: 533 (7.40%)\n\n按基站统计低成功率记录:\nbase_station_name\n城东-商业区基站     117\n市中心-商业区基站    109\n城北-工业园区基站    105\n城西-住宅区基站     102\n城南-大学城基站     100\n\n按信号类型统计低成功率记录:\nsignal_type\nATTACH_REQUEST                   54\nPAGING                           41\nRRC_CONNECTION_SETUP             41\nHANDOVER_COMMAND                 38\nSERVICE_REQUEST                  38\nRRC_CONNECTION_SETUP_COMPLETE    37\nATTACH_ACCEPT                    37\nRRC_CONNECTION_REQUEST           35\nHANDOVER_REQUEST                 35\nRRC_CONNECTION_RELEASE           34\nSERVICE_ACCEPT                   33\nDETACH_ACCEPT                    33\nDETACH_REQUEST                   28\nATTACH_COMPLETE                  26\nHANDOVER_COMPLETE                23\n\n\n5. 分析结论\n==================================================\n\n这里是自动生成的结论，基于数据分析结果。具体结论将取决于实际数据内容。",
      "report_file": "reports\\分组对比分析_20250317_152811.md"
    },
    "比例分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport os\nimport numpy as np\nfrom datetime import datetime\n\ndef load_csv(file_path):\n    \"\"\"加载CSV文件并返回DataFrame\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        print(f\"成功加载数据，共{len(df)}行，{len(df.columns)}列\")\n        return df\n    except Exception as e:\n        print(f\"加载CSV文件时出错: {e}\")\n        return None\n\ndef analyze_categorical_columns(df):\n    \"\"\"分析分类列的分布情况\"\"\"\n    results = []\n    \n    # 识别分类列\n    categorical_columns = ['base_station_id', 'base_station_name', 'signal_type', 'status']\n    \n    for col in categorical_columns:\n        if col in df.columns:\n            # 计算分布\n            distribution = df[col].value_counts()\n            total = len(df)\n            \n            # 格式化结果\n            result = f\"\\n{'='*80}\\n{col} 分布分析\\n{'='*80}\\n\"\n            result += f\"总记录数: {total}\\n\\n\"\n            result += f\"{'类别值':<30}{'数量':<10}{'占比':<10}\\n\"\n            result += f\"{'-'*50}\\n\"\n            \n            for value, count in distribution.items():\n                percentage = count / total * 100\n                result += f\"{str(value):<30}{count:<10}{percentage:.2f}%\\n\"\n            \n            results.append(result)\n    \n    return results\n\ndef analyze_numerical_columns(df):\n    \"\"\"分析数值列的分布情况\"\"\"\n    results = []\n    \n    # 数值列分析\n    numerical_columns = [\n        'success_rate', 'failure_rate', 'call_attempts', 'active_users',\n        'signal_strength_dbm', 'signal_quality_db', 'downlink_throughput_mbps',\n        'uplink_throughput_mbps', 'latency_ms', 'packet_loss_percent',\n        'resource_block_usage_percent', 'cpu_usage_percent', 'memory_usage_percent',\n        'temperature_celsius'\n    ]\n    \n    for col in numerical_columns:\n        if col in df.columns:\n            # 创建范围分组\n            if col in ['success_rate', 'failure_rate']:\n                bins = [0, 0.2, 0.4, 0.6, 0.8, 1.0]\n                labels = ['0-20%', '20-40%', '40-60%', '60-80%', '80-100%']\n            elif col in ['packet_loss_percent', 'resource_block_usage_percent', 'cpu_usage_percent', 'memory_usage_percent']:\n                bins = [0, 20, 40, 60, 80, 100, float('inf')]\n                labels = ['0-20%', '20-40%', '40-60%', '60-80%', '80-100%', '>100%']\n            else:\n                # 动态创建分组\n                min_val = df[col].min()\n                max_val = df[col].max()\n                bins = np.linspace(min_val, max_val, 6)\n                labels = [f'{bins[i]:.1f}-{bins[i+1]:.1f}' for i in range(len(bins)-1)]\n            \n            # 计算分布\n            df['range'] = pd.cut(df[col], bins=bins, labels=labels, include_lowest=True)\n            distribution = df['range'].value_counts().sort_index()\n            total = len(df)\n            \n            # 格式化结果\n            result = f\"\\n{'='*80}\\n{col} 范围分布分析\\n{'='*80}\\n\"\n            result += f\"总记录数: {total}\\n\"\n            result += f\"最小值: {df[col].min():.2f}, 最大值: {df[col].max():.2f}, 平均值: {df[col].mean():.2f}\\n\\n\"\n            result += f\"{'范围':<20}{'数量':<10}{'占比':<10}\\n\"\n            result += f\"{'-'*40}\\n\"\n            \n            for value, count in distribution.items():\n                percentage = count / total * 100\n                result += f\"{value:<20}{count:<10}{percentage:.2f}%\\n\"\n            \n            # 删除临时列\n            df.drop('range', axis=1, inplace=True)\n            \n            results.append(result)\n    \n    return results\n\ndef save_results(results, output_path):\n    \"\"\"保存分析结果到文本文件\"\"\"\n    try:\n        # 确保目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            # 添加标题和时间戳\n            f.write(f\"CSV数据分布分析报告\\n\")\n            f.write(f\"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n            f.write(f\"{'='*80}\\n\\n\")\n            \n            # 写入所有结果\n            for result in results:\n                f.write(result)\n        \n        print(f\"分析结果已保存到 {output_path}\")\n        return True\n    except Exception as e:\n        print(f\"保存结果时出错: {e}\")\n        return False\n\ndef main():\n    # 文件路径\n    csv_path = \"temp_csv/excel_data_20250317152243.csv\"\n    output_path = \"pngs/category_distribution_results.txt\"\n    \n    # 加载数据\n    df = load_csv(csv_path)\n    if df is None:\n        return\n    \n    # 分析分类列\n    categorical_results = analyze_categorical_columns(df)\n    \n    # 分析数值列\n    numerical_results = analyze_numerical_columns(df)\n    \n    # 合并结果\n    all_results = categorical_results + numerical_results\n    \n    # 保存结果\n    save_results(all_results, output_path)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "成功加载数据，共7200行，20列\n分析结果已保存到 pngs/category_distribution_results.txt\n",
      "txt_results": "CSV数据分布分析报告\n生成时间: 2025-03-17 15:28:40\n================================================================================\n\n\n================================================================================\nbase_station_id 分布分析\n================================================================================\n总记录数: 7200\n\n类别值                           数量        占比        \n--------------------------------------------------\nBS001                         1440      20.00%\nBS002                         1440      20.00%\nBS003                         1440      20.00%\nBS004                         1440      20.00%\nBS005                         1440      20.00%\n\n================================================================================\nbase_station_name 分布分析\n================================================================================\n总记录数: 7200\n\n类别值                           数量        占比        \n--------------------------------------------------\n城东-商业区基站                      1440      20.00%\n城西-住宅区基站                      1440      20.00%\n城北-工业园区基站                     1440      20.00%\n城南-大学城基站                      1440      20.00%\n市中心-商业区基站                     1440      20.00%\n\n================================================================================\nsignal_type 分布分析\n================================================================================\n总记录数: 7200\n\n类别值                           数量        占比        \n--------------------------------------------------\nPAGING                        523       7.26%\nATTACH_REQUEST                502       6.97%\nHANDOVER_REQUEST              494       6.86%\nHANDOVER_COMPLETE             491       6.82%\nSERVICE_REQUEST               491       6.82%\nHANDOVER_COMMAND              486       6.75%\nDETACH_REQUEST                483       6.71%\nRRC_CONNECTION_SETUP_COMPLETE 477       6.62%\nATTACH_COMPLETE               477       6.62%\nSERVICE_ACCEPT                475       6.60%\nRRC_CONNECTION_REQUEST        471       6.54%\nDETACH_ACCEPT                 465       6.46%\nRRC_CONNECTION_RELEASE        464       6.44%\nRRC_CONNECTION_SETUP          461       6.40%\nATTACH_ACCEPT                 440       6.11%\n\n================================================================================\nstatus 分布分析\n================================================================================\n总记录数: 7200\n\n类别值                           数量        占比        \n--------------------------------------------------\nSUCCESS                       6125      85.07%\nFAILED                        373       5.18%\nTIMEOUT                       270       3.75%\nREJECTED                      237       3.29%\nPENDING                       195       2.71%\n\n================================================================================\nsuccess_rate 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 0.50, 最大值: 0.99, 平均值: 0.86\n\n范围                  数量        占比        \n----------------------------------------\n0-20%               0         0.00%\n20-40%              0         0.00%\n40-60%              359       4.99%\n60-80%              716       9.94%\n80-100%             6125      85.07%\n\n================================================================================\nfailure_rate 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 0.01, 最大值: 0.50, 平均值: 0.14\n\n范围                  数量        占比        \n----------------------------------------\n0-20%               6125      85.07%\n20-40%              716       9.94%\n40-60%              359       4.99%\n60-80%              0         0.00%\n80-100%             0         0.00%\n\n================================================================================\ncall_attempts 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 10.00, 最大值: 99.00, 平均值: 41.37\n\n范围                  数量        占比        \n----------------------------------------\n10.0-27.8           2872      39.89%\n27.8-45.6           1928      26.78%\n45.6-63.4           635       8.82%\n63.4-81.2           876       12.17%\n81.2-99.0           889       12.35%\n\n================================================================================\nactive_users 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 50.00, 最大值: 499.00, 平均值: 200.36\n\n范围                  数量        占比        \n----------------------------------------\n50.0-139.8          2866      39.81%\n139.8-229.6         2181      30.29%\n229.6-319.4         678       9.42%\n319.4-409.2         747       10.38%\n409.2-499.0         728       10.11%\n\n================================================================================\nsignal_strength_dbm 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: -120.00, 最大值: -70.01, 平均值: -95.03\n\n范围                  数量        占比        \n----------------------------------------\n-120.0--110.0       1409      19.57%\n-110.0--100.0       1455      20.21%\n-100.0--90.0        1493      20.74%\n-90.0--80.0         1443      20.04%\n-80.0--70.0         1400      19.44%\n\n================================================================================\nsignal_quality_db 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 0.00, 最大值: 30.00, 平均值: 15.07\n\n范围                  数量        占比        \n----------------------------------------\n0.0-6.0             1461      20.29%\n6.0-12.0            1402      19.47%\n12.0-18.0           1407      19.54%\n18.0-24.0           1468      20.39%\n24.0-30.0           1462      20.31%\n\n================================================================================\ndownlink_throughput_mbps 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 50.33, 最大值: 1499.85, 平均值: 713.37\n\n范围                  数量        占比        \n----------------------------------------\n50.3-340.2          1541      21.40%\n340.2-630.1         1697      23.57%\n630.1-920.0         1749      24.29%\n920.0-1209.9        1197      16.62%\n1209.9-1499.8       1016      14.11%\n\n================================================================================\nuplink_throughput_mbps 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 10.03, 最大值: 199.98, 平均值: 91.60\n\n范围                  数量        占比        \n----------------------------------------\n10.0-48.0           1743      24.21%\n48.0-86.0           2056      28.56%\n86.0-124.0          1397      19.40%\n124.0-162.0         983       13.65%\n162.0-200.0         1021      14.18%\n\n================================================================================\nlatency_ms 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 5.00, 最大值: 49.99, 平均值: 21.69\n\n范围                  数量        占比        \n----------------------------------------\n5.0-14.0            1943      26.99%\n14.0-23.0           2309      32.07%\n23.0-32.0           1887      26.21%\n32.0-41.0           506       7.03%\n41.0-50.0           555       7.71%\n\n================================================================================\npacket_loss_percent 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 0.00, 最大值: 5.00, 平均值: 2.51\n\n范围                  数量        占比        \n----------------------------------------\n0-20%               7200      100.00%\n20-40%              0         0.00%\n40-60%              0         0.00%\n60-80%              0         0.00%\n80-100%             0         0.00%\n>100%               0         0.00%\n\n================================================================================\nresource_block_usage_percent 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 20.00, 最大值: 99.00, 平均值: 56.26\n\n范围                  数量        占比        \n----------------------------------------\n0-20%               116       1.61%\n20-40%              2366      32.86%\n40-60%              2318      32.19%\n60-80%              115       1.60%\n80-100%             2285      31.74%\n>100%               0         0.00%\n\n================================================================================\ncpu_usage_percent 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 10.04, 最大值: 109.00, 平均值: 56.22\n\n范围                  数量        占比        \n----------------------------------------\n0-20%               313       4.35%\n20-40%              2140      29.72%\n40-60%              2062      28.64%\n60-80%              605       8.40%\n80-100%             1816      25.22%\n>100%               264       3.67%\n\n================================================================================\nmemory_usage_percent 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 5.04, 最大值: 113.70, 平均值: 56.24\n\n范围                  数量        占比        \n----------------------------------------\n0-20%               461       6.40%\n20-40%              1933      26.85%\n40-60%              1974      27.42%\n60-80%              935       12.99%\n80-100%             1485      20.62%\n>100%               412       5.72%\n\n================================================================================\ntemperature_celsius 范围分布分析\n================================================================================\n总记录数: 7200\n最小值: 25.00, 最大值: 45.00, 平均值: 35.03\n\n范围                  数量        占比        \n----------------------------------------\n25.0-29.0           1427      19.82%\n29.0-33.0           1382      19.19%\n33.0-37.0           1484      20.61%\n37.0-41.0           1467      20.38%\n41.0-45.0           1440      20.00%\n",
      "report_file": "reports\\比例分析_20250317_152922.md"
    },
    "时间趋势分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport os\n\ndef read_and_process_csv(file_path):\n    try:\n        df = pd.read_csv(file_path)\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        df.set_index('timestamp', inplace=True)\n        return df\n    except Exception as e:\n        print(f\"Error reading CSV file: {e}\")\n        return None\n\ndef analyze_time_series(df):\n    results = []\n    \n    # 获取数值型列\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    \n    if len(numeric_columns) == 0:\n        return \"No numeric columns found for analysis.\"\n    \n    # Overall trends\n    results.append(\"Overall Trends:\")\n    for column in numeric_columns:\n        # 确保没有NaN值\n        valid_data = df[column].dropna()\n        if len(valid_data) > 1:  # 至少需要两个点来计算趋势\n            trend = stats.linregress(range(len(valid_data)), valid_data.values)\n            trend_direction = \"increasing\" if trend.slope > 0 else \"decreasing\"\n            results.append(f\"  - {column}: {trend_direction} trend (slope: {trend.slope:.4f})\")\n        else:\n            results.append(f\"  - {column}: Insufficient data for trend analysis\")\n    \n    # Daily patterns\n    results.append(\"\\nDaily Patterns:\")\n    try:\n        daily_avg = df[numeric_columns].groupby(df.index.hour).mean()\n        for column in daily_avg.columns:\n            if not daily_avg[column].isna().all():  # 确保不全是NaN\n                peak_hour = daily_avg[column].idxmax()\n                trough_hour = daily_avg[column].idxmin()\n                results.append(f\"  - {column}: Peak at {peak_hour}:00, Trough at {trough_hour}:00\")\n            else:\n                results.append(f\"  - {column}: No valid data for daily pattern analysis\")\n    except Exception as e:\n        results.append(f\"  Error analyzing daily patterns: {e}\")\n    \n    # Weekly patterns\n    results.append(\"\\nWeekly Patterns:\")\n    try:\n        weekly_avg = df[numeric_columns].groupby(df.index.dayofweek).mean()\n        days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n        for column in weekly_avg.columns:\n            if not weekly_avg[column].isna().all():  # 确保不全是NaN\n                peak_day = weekly_avg[column].idxmax()\n                trough_day = weekly_avg[column].idxmin()\n                results.append(f\"  - {column}: Peak on {days[peak_day]}, Trough on {days[trough_day]}\")\n            else:\n                results.append(f\"  - {column}: No valid data for weekly pattern analysis\")\n    except Exception as e:\n        results.append(f\"  Error analyzing weekly patterns: {e}\")\n    \n    # Anomalies\n    results.append(\"\\nAnomalies (Z-score > 3):\")\n    for column in numeric_columns:\n        try:\n            # 确保没有NaN值\n            valid_data = df[column].dropna()\n            if len(valid_data) > 1:  # 需要至少两个点来计算z-score\n                z_scores = np.abs(stats.zscore(valid_data))\n                anomalies = valid_data[z_scores > 3]\n                if not anomalies.empty:\n                    results.append(f\"  - {column}:\")\n                    for idx, value in anomalies.items():\n                        results.append(f\"    {idx}: {value:.2f}\")\n                else:\n                    results.append(f\"  - {column}: No anomalies detected\")\n            else:\n                results.append(f\"  - {column}: Insufficient data for anomaly detection\")\n        except Exception as e:\n            results.append(f\"  - {column}: Error detecting anomalies: {e}\")\n    \n    return \"\\n\".join(results)\n\ndef save_results(results, output_file):\n    try:\n        os.makedirs(os.path.dirname(output_file), exist_ok=True)\n        with open(output_file, 'w', encoding='utf-8') as f:\n            f.write(results)\n        print(f\"Results saved to {output_file}\")\n    except Exception as e:\n        print(f\"Error saving results: {e}\")\n\ndef main():\n    input_file = \"temp_csv/excel_data_20250317152243.csv\"\n    output_file = \"pngs/time_trend_results.txt\"\n    \n    df = read_and_process_csv(input_file)\n    if df is not None:\n        # 打印数据集信息，帮助调试\n        print(f\"DataFrame shape: {df.shape}\")\n        print(f\"DataFrame columns: {df.columns.tolist()}\")\n        print(f\"DataFrame dtypes:\\n{df.dtypes}\")\n        \n        # 只保留数值型列进行分析\n        results = analyze_time_series(df)\n        save_results(results, output_file)\n    else:\n        print(\"Failed to read data file.\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": "DataFrame shape: (7200, 19)\nDataFrame columns: ['base_station_id', 'base_station_name', 'signal_type', 'status', 'success_rate', 'failure_rate', 'call_attempts', 'active_users', 'signal_strength_dbm', 'signal_quality_db', 'downlink_throughput_mbps', 'uplink_throughput_mbps', 'latency_ms', 'jitter_ms', 'packet_loss_percent', 'resource_block_usage_percent', 'cpu_usage_percent', 'memory_usage_percent', 'temperature_celsius']\nDataFrame dtypes:\nbase_station_id                  object\nbase_station_name                object\nsignal_type                      object\nstatus                           object\nsuccess_rate                    float64\nfailure_rate                    float64\ncall_attempts                     int64\nactive_users                      int64\nsignal_strength_dbm             float64\nsignal_quality_db               float64\ndownlink_throughput_mbps        float64\nuplink_throughput_mbps          float64\nlatency_ms                      float64\njitter_ms                       float64\npacket_loss_percent             float64\nresource_block_usage_percent    float64\ncpu_usage_percent               float64\nmemory_usage_percent            float64\ntemperature_celsius             float64\ndtype: object\nResults saved to pngs/time_trend_results.txt\n",
      "txt_results": "Overall Trends:\n  - success_rate: increasing trend (slope: 0.0000)\n  - failure_rate: decreasing trend (slope: -0.0000)\n  - call_attempts: increasing trend (slope: 0.0041)\n  - active_users: increasing trend (slope: 0.0189)\n  - signal_strength_dbm: increasing trend (slope: 0.0001)\n  - signal_quality_db: decreasing trend (slope: -0.0000)\n  - downlink_throughput_mbps: decreasing trend (slope: -0.0225)\n  - uplink_throughput_mbps: decreasing trend (slope: -0.0046)\n  - latency_ms: increasing trend (slope: 0.0010)\n  - jitter_ms: decreasing trend (slope: -0.0000)\n  - packet_loss_percent: increasing trend (slope: 0.0000)\n  - resource_block_usage_percent: increasing trend (slope: 0.0040)\n  - cpu_usage_percent: increasing trend (slope: 0.0040)\n  - memory_usage_percent: increasing trend (slope: 0.0040)\n  - temperature_celsius: increasing trend (slope: 0.0000)\n\nDaily Patterns:\n  - success_rate: Peak at 20:00, Trough at 1:00\n  - failure_rate: Peak at 1:00, Trough at 20:00\n  - call_attempts: Peak at 19:00, Trough at 16:00\n  - active_users: Peak at 13:00, Trough at 1:00\n  - signal_strength_dbm: Peak at 22:00, Trough at 3:00\n  - signal_quality_db: Peak at 9:00, Trough at 17:00\n  - downlink_throughput_mbps: Peak at 4:00, Trough at 9:00\n  - uplink_throughput_mbps: Peak at 10:00, Trough at 18:00\n  - latency_ms: Peak at 19:00, Trough at 10:00\n  - jitter_ms: Peak at 1:00, Trough at 16:00\n  - packet_loss_percent: Peak at 18:00, Trough at 0:00\n  - resource_block_usage_percent: Peak at 8:00, Trough at 4:00\n  - cpu_usage_percent: Peak at 12:00, Trough at 10:00\n  - memory_usage_percent: Peak at 8:00, Trough at 6:00\n  - temperature_celsius: Peak at 4:00, Trough at 1:00\n\nWeekly Patterns:\n  - success_rate: Peak on Saturday, Trough on Saturday\n  - failure_rate: Peak on Saturday, Trough on Saturday\n  - call_attempts: Peak on Saturday, Trough on Saturday\n  - active_users: Peak on Saturday, Trough on Saturday\n  - signal_strength_dbm: Peak on Saturday, Trough on Saturday\n  - signal_quality_db: Peak on Saturday, Trough on Saturday\n  - downlink_throughput_mbps: Peak on Saturday, Trough on Saturday\n  - uplink_throughput_mbps: Peak on Saturday, Trough on Saturday\n  - latency_ms: Peak on Saturday, Trough on Saturday\n  - jitter_ms: Peak on Saturday, Trough on Saturday\n  - packet_loss_percent: Peak on Saturday, Trough on Saturday\n  - resource_block_usage_percent: Peak on Saturday, Trough on Saturday\n  - cpu_usage_percent: Peak on Saturday, Trough on Saturday\n  - memory_usage_percent: Peak on Saturday, Trough on Saturday\n  - temperature_celsius: Peak on Saturday, Trough on Saturday\n\nAnomalies (Z-score > 3):\n  - success_rate:\n    2025-03-01 00:18:00: 0.50\n    2025-03-01 00:20:00: 0.52\n    2025-03-01 00:28:00: 0.54\n    2025-03-01 00:36:00: 0.54\n    2025-03-01 00:47:00: 0.52\n    2025-03-01 00:50:00: 0.50\n    2025-03-01 01:01:00: 0.51\n    2025-03-01 01:04:00: 0.50\n    2025-03-01 01:36:00: 0.50\n    2025-03-01 01:41:00: 0.52\n    2025-03-01 01:59:00: 0.52\n    2025-03-01 02:14:00: 0.52\n    2025-03-01 02:16:00: 0.50\n    2025-03-01 02:55:00: 0.53\n    2025-03-01 02:56:00: 0.51\n    2025-03-01 03:11:00: 0.51\n    2025-03-01 03:25:00: 0.53\n    2025-03-01 04:14:00: 0.51\n    2025-03-01 04:21:00: 0.51\n    2025-03-01 04:23:00: 0.54\n    2025-03-01 04:48:00: 0.53\n    2025-03-01 05:04:00: 0.50\n    2025-03-01 05:06:00: 0.50\n    2025-03-01 05:45:00: 0.50\n    2025-03-01 05:46:00: 0.54\n    2025-03-01 05:47:00: 0.53\n    2025-03-01 05:51:00: 0.52\n    2025-03-01 06:10:00: 0.50\n    2025-03-01 06:23:00: 0.53\n    2025-03-01 06:24:00: 0.53\n    2025-03-01 06:29:00: 0.53\n    2025-03-01 06:37:00: 0.52\n    2025-03-01 07:32:00: 0.51\n    2025-03-01 07:42:00: 0.52\n    2025-03-01 07:57:00: 0.52\n    2025-03-01 07:58:00: 0.53\n    2025-03-01 08:14:00: 0.51\n    2025-03-01 08:30:00: 0.51\n    2025-03-01 08:36:00: 0.51\n    2025-03-01 08:45:00: 0.51\n    2025-03-01 08:57:00: 0.51\n    2025-03-01 08:58:00: 0.51\n    2025-03-01 09:02:00: 0.52\n    2025-03-01 09:10:00: 0.51\n    2025-03-01 09:27:00: 0.53\n    2025-03-01 09:34:00: 0.50\n    2025-03-01 09:46:00: 0.53\n    2025-03-01 09:57:00: 0.51\n    2025-03-01 10:03:00: 0.53\n    2025-03-01 10:10:00: 0.52\n    2025-03-01 10:12:00: 0.54\n    2025-03-01 10:54:00: 0.51\n    2025-03-01 11:06:00: 0.50\n    2025-03-01 11:07:00: 0.53\n    2025-03-01 11:21:00: 0.52\n    2025-03-01 11:26:00: 0.51\n    2025-03-01 11:34:00: 0.53\n    2025-03-01 11:38:00: 0.50\n    2025-03-01 11:42:00: 0.51\n    2025-03-01 11:46:00: 0.52\n    2025-03-01 12:02:00: 0.52\n    2025-03-01 12:36:00: 0.53\n    2025-03-01 13:02:00: 0.50\n    2025-03-01 13:18:00: 0.53\n    2025-03-01 13:40:00: 0.52\n    2025-03-01 13:55:00: 0.52\n    2025-03-01 13:59:00: 0.50\n    2025-03-01 14:09:00: 0.51\n    2025-03-01 14:15:00: 0.51\n    2025-03-01 14:32:00: 0.51\n    2025-03-01 14:48:00: 0.52\n    2025-03-01 14:48:00: 0.52\n    2025-03-01 15:03:00: 0.51\n    2025-03-01 15:10:00: 0.52\n    2025-03-01 15:21:00: 0.54\n    2025-03-01 15:52:00: 0.50\n    2025-03-01 15:53:00: 0.51\n    2025-03-01 15:58:00: 0.51\n    2025-03-01 16:22:00: 0.53\n    2025-03-01 16:25:00: 0.52\n    2025-03-01 16:28:00: 0.51\n    2025-03-01 16:47:00: 0.51\n    2025-03-01 16:50:00: 0.52\n    2025-03-01 17:03:00: 0.52\n    2025-03-01 17:04:00: 0.53\n    2025-03-01 17:16:00: 0.51\n    2025-03-01 17:23:00: 0.50\n    2025-03-01 17:28:00: 0.52\n    2025-03-01 17:43:00: 0.52\n    2025-03-01 17:53:00: 0.51\n    2025-03-01 18:13:00: 0.53\n    2025-03-01 18:22:00: 0.52\n    2025-03-01 18:24:00: 0.51\n    2025-03-01 18:52:00: 0.52\n    2025-03-01 18:52:00: 0.52\n    2025-03-01 18:57:00: 0.54\n    2025-03-01 19:00:00: 0.53\n    2025-03-01 19:05:00: 0.53\n    2025-03-01 19:25:00: 0.53\n    2025-03-01 19:27:00: 0.51\n    2025-03-01 19:33:00: 0.53\n    2025-03-01 19:38:00: 0.51\n    2025-03-01 19:54:00: 0.53\n    2025-03-01 19:57:00: 0.52\n    2025-03-01 20:18:00: 0.51\n    2025-03-01 20:30:00: 0.50\n    2025-03-01 20:41:00: 0.54\n    2025-03-01 21:28:00: 0.52\n    2025-03-01 21:29:00: 0.51\n    2025-03-01 21:42:00: 0.50\n    2025-03-01 21:48:00: 0.52\n    2025-03-01 22:02:00: 0.52\n    2025-03-01 22:06:00: 0.52\n    2025-03-01 22:18:00: 0.52\n    2025-03-01 22:19:00: 0.54\n    2025-03-01 22:24:00: 0.53\n    2025-03-01 22:47:00: 0.52\n    2025-03-01 23:05:00: 0.52\n    2025-03-01 23:06:00: 0.53\n    2025-03-01 23:13:00: 0.54\n    2025-03-01 23:31:00: 0.53\n    2025-03-01 23:35:00: 0.53\n    2025-03-01 23:52:00: 0.50\n  - failure_rate:\n    2025-03-01 00:18:00: 0.50\n    2025-03-01 00:20:00: 0.48\n    2025-03-01 00:28:00: 0.46\n    2025-03-01 00:36:00: 0.46\n    2025-03-01 00:47:00: 0.48\n    2025-03-01 00:50:00: 0.50\n    2025-03-01 01:01:00: 0.49\n    2025-03-01 01:04:00: 0.50\n    2025-03-01 01:36:00: 0.50\n    2025-03-01 01:41:00: 0.48\n    2025-03-01 01:59:00: 0.48\n    2025-03-01 02:14:00: 0.48\n    2025-03-01 02:16:00: 0.50\n    2025-03-01 02:55:00: 0.47\n    2025-03-01 02:56:00: 0.49\n    2025-03-01 03:11:00: 0.49\n    2025-03-01 03:25:00: 0.47\n    2025-03-01 04:14:00: 0.49\n    2025-03-01 04:21:00: 0.49\n    2025-03-01 04:23:00: 0.46\n    2025-03-01 04:48:00: 0.47\n    2025-03-01 05:04:00: 0.50\n    2025-03-01 05:06:00: 0.50\n    2025-03-01 05:45:00: 0.50\n    2025-03-01 05:46:00: 0.46\n    2025-03-01 05:47:00: 0.47\n    2025-03-01 05:51:00: 0.48\n    2025-03-01 06:10:00: 0.50\n    2025-03-01 06:23:00: 0.47\n    2025-03-01 06:24:00: 0.47\n    2025-03-01 06:29:00: 0.47\n    2025-03-01 06:37:00: 0.48\n    2025-03-01 07:32:00: 0.49\n    2025-03-01 07:42:00: 0.48\n    2025-03-01 07:57:00: 0.48\n    2025-03-01 07:58:00: 0.47\n    2025-03-01 08:14:00: 0.49\n    2025-03-01 08:30:00: 0.49\n    2025-03-01 08:36:00: 0.49\n    2025-03-01 08:45:00: 0.49\n    2025-03-01 08:57:00: 0.49\n    2025-03-01 08:58:00: 0.49\n    2025-03-01 09:02:00: 0.48\n    2025-03-01 09:10:00: 0.49\n    2025-03-01 09:27:00: 0.47\n    2025-03-01 09:34:00: 0.50\n    2025-03-01 09:46:00: 0.47\n    2025-03-01 09:57:00: 0.49\n    2025-03-01 10:03:00: 0.47\n    2025-03-01 10:10:00: 0.48\n    2025-03-01 10:12:00: 0.46\n    2025-03-01 10:54:00: 0.49\n    2025-03-01 11:06:00: 0.50\n    2025-03-01 11:07:00: 0.47\n    2025-03-01 11:21:00: 0.48\n    2025-03-01 11:26:00: 0.49\n    2025-03-01 11:34:00: 0.47\n    2025-03-01 11:38:00: 0.50\n    2025-03-01 11:42:00: 0.49\n    2025-03-01 11:46:00: 0.48\n    2025-03-01 12:02:00: 0.48\n    2025-03-01 12:36:00: 0.47\n    2025-03-01 13:02:00: 0.50\n    2025-03-01 13:18:00: 0.47\n    2025-03-01 13:40:00: 0.48\n    2025-03-01 13:55:00: 0.48\n    2025-03-01 13:59:00: 0.50\n    2025-03-01 14:09:00: 0.49\n    2025-03-01 14:15:00: 0.49\n    2025-03-01 14:32:00: 0.49\n    2025-03-01 14:48:00: 0.48\n    2025-03-01 14:48:00: 0.48\n    2025-03-01 15:03:00: 0.49\n    2025-03-01 15:10:00: 0.48\n    2025-03-01 15:21:00: 0.46\n    2025-03-01 15:52:00: 0.50\n    2025-03-01 15:53:00: 0.49\n    2025-03-01 15:58:00: 0.49\n    2025-03-01 16:22:00: 0.47\n    2025-03-01 16:25:00: 0.48\n    2025-03-01 16:28:00: 0.49\n    2025-03-01 16:47:00: 0.49\n    2025-03-01 16:50:00: 0.48\n    2025-03-01 17:03:00: 0.48\n    2025-03-01 17:04:00: 0.47\n    2025-03-01 17:16:00: 0.49\n    2025-03-01 17:23:00: 0.50\n    2025-03-01 17:28:00: 0.48\n    2025-03-01 17:43:00: 0.48\n    2025-03-01 17:53:00: 0.49\n    2025-03-01 18:13:00: 0.47\n    2025-03-01 18:22:00: 0.48\n    2025-03-01 18:24:00: 0.49\n    2025-03-01 18:52:00: 0.48\n    2025-03-01 18:52:00: 0.48\n    2025-03-01 18:57:00: 0.46\n    2025-03-01 19:00:00: 0.47\n    2025-03-01 19:05:00: 0.47\n    2025-03-01 19:25:00: 0.47\n    2025-03-01 19:27:00: 0.49\n    2025-03-01 19:33:00: 0.47\n    2025-03-01 19:38:00: 0.49\n    2025-03-01 19:54:00: 0.47\n    2025-03-01 19:57:00: 0.48\n    2025-03-01 20:18:00: 0.49\n    2025-03-01 20:30:00: 0.50\n    2025-03-01 20:41:00: 0.46\n    2025-03-01 21:28:00: 0.48\n    2025-03-01 21:29:00: 0.49\n    2025-03-01 21:42:00: 0.50\n    2025-03-01 21:48:00: 0.48\n    2025-03-01 22:02:00: 0.48\n    2025-03-01 22:06:00: 0.48\n    2025-03-01 22:18:00: 0.48\n    2025-03-01 22:19:00: 0.46\n    2025-03-01 22:24:00: 0.47\n    2025-03-01 22:47:00: 0.48\n    2025-03-01 23:05:00: 0.48\n    2025-03-01 23:06:00: 0.47\n    2025-03-01 23:13:00: 0.46\n    2025-03-01 23:31:00: 0.47\n    2025-03-01 23:35:00: 0.47\n    2025-03-01 23:52:00: 0.50\n  - call_attempts: No anomalies detected\n  - active_users: No anomalies detected\n  - signal_strength_dbm: No anomalies detected\n  - signal_quality_db: No anomalies detected\n  - downlink_throughput_mbps: No anomalies detected\n  - uplink_throughput_mbps: No anomalies detected\n  - latency_ms: No anomalies detected\n  - jitter_ms: No anomalies detected\n  - packet_loss_percent: No anomalies detected\n  - resource_block_usage_percent: No anomalies detected\n  - cpu_usage_percent: No anomalies detected\n  - memory_usage_percent: No anomalies detected\n  - temperature_celsius: No anomalies detected",
      "report_file": "reports\\时间趋势分析_20250317_153137.md"
    }
  }
}
{
  "timestamp": "20250317_155431",
  "structure_analysis": {
    "file_path": "temp_csv/excel_data_20250317154509.csv",
    "row_count": 2000,
    "column_count": 12,
    "columns": {
      "Complaint_ID": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 2000,
        "most_common": {
          "value": "COMP-01984",
          "count": 1
        }
      },
      "Date_Reported": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 90,
        "most_common": {
          "value": "2025-03-28",
          "count": 37
        }
      },
      "Customer_ID": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 1769,
        "most_common": {
          "value": "CUST-8483",
          "count": 3
        }
      },
      "Region": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 5,
        "most_common": {
          "value": "North",
          "count": 417
        }
      },
      "Complaint_Type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 7,
        "most_common": {
          "value": "Call Drop",
          "count": 296
        }
      },
      "Service_Type": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 4,
        "most_common": {
          "value": "Mobile",
          "count": 508
        }
      },
      "Description": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 7,
        "most_common": {
          "value": "Customer reported call drop issue",
          "count": 320
        }
      },
      "Priority": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 4,
        "most_common": {
          "value": "Critical",
          "count": 526
        }
      },
      "Status": {
        "type": "object",
        "missing_values": 0,
        "unique_values": 4,
        "most_common": {
          "value": "Closed",
          "count": 1702
        }
      },
      "Resolution_Date": {
        "type": "object",
        "missing_values": 430,
        "unique_values": 103,
        "most_common": {
          "value": "2025-03-12",
          "count": 28
        }
      },
      "Resolution_Time_Days": {
        "type": "float64",
        "missing_values": 430,
        "unique_values": 15,
        "min": 0.0,
        "max": 14.0,
        "mean": 7.153503184713376,
        "median": 7.0
      },
      "Customer_Satisfaction": {
        "type": "float64",
        "missing_values": 298,
        "unique_values": 5,
        "min": 1.0,
        "max": 5.0,
        "mean": 3.0158636897767335,
        "median": 3.0
      }
    }
  },
  "column_names": [
    "Complaint_ID",
    "Date_Reported",
    "Customer_ID",
    "Region",
    "Complaint_Type",
    "Service_Type",
    "Description",
    "Priority",
    "Status",
    "Resolution_Date",
    "Resolution_Time_Days",
    "Customer_Satisfaction"
  ],
  "results": {
    "总体数据统计分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\n\ndef analyze_csv_data(file_path, output_path):\n    \"\"\"\n    分析CSV文件数据并生成统计报告\n    \n    参数:\n        file_path: CSV文件路径\n        output_path: 输出结果文件路径\n    \"\"\"\n    try:\n        # 确保输出目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        # 读取CSV文件\n        print(f\"正在读取文件: {file_path}\")\n        df = pd.read_csv(file_path)\n        \n        # 准备分析结果文本\n        result = []\n        \n        # 添加标题和基本信息\n        result.append(\"=\" * 80)\n        result.append(\"客户投诉数据分析报告\")\n        result.append(\"=\" * 80)\n        result.append(f\"分析时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n        result.append(f\"数据文件: {file_path}\")\n        result.append(f\"记录数量: {len(df)}\")\n        result.append(f\"字段数量: {len(df.columns)}\")\n        result.append(\"\")\n        \n        # 1. 基本数据概览\n        result.append(\"-\" * 80)\n        result.append(\"1. 基本数据概览\")\n        result.append(\"-\" * 80)\n        \n        # 数据类型和缺失值信息\n        result.append(\"数据类型和缺失值:\")\n        dtype_info = []\n        for col in df.columns:\n            missing = df[col].isna().sum()\n            missing_percent = (missing / len(df)) * 100\n            dtype_info.append(f\"  {col}: 类型={df[col].dtype}, 缺失值={missing} ({missing_percent:.2f}%)\")\n        result.extend(dtype_info)\n        result.append(\"\")\n        \n        # 2. 数值列分析\n        result.append(\"-\" * 80)\n        result.append(\"2. 数值列分析\")\n        result.append(\"-\" * 80)\n        \n        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\n        if numeric_cols:\n            for col in numeric_cols:\n                result.append(f\"\\n{col} 统计分析:\")\n                stats = df[col].describe()\n                result.append(f\"  计数: {stats['count']:.0f}\")\n                result.append(f\"  均值: {stats['mean']:.2f}\")\n                result.append(f\"  标准差: {stats['std']:.2f}\")\n                result.append(f\"  最小值: {stats['min']:.2f}\")\n                result.append(f\"  25%分位数: {stats['25%']:.2f}\")\n                result.append(f\"  中位数: {stats['50%']:.2f}\")\n                result.append(f\"  75%分位数: {stats['75%']:.2f}\")\n                result.append(f\"  最大值: {stats['max']:.2f}\")\n                \n                # 计算分布情况\n                if not pd.isna(df[col]).all():\n                    value_counts = df[col].value_counts().sort_index()\n                    result.append(f\"  值分布:\")\n                    for val, count in value_counts.items():\n                        result.append(f\"    {val}: {count} ({count/len(df)*100:.2f}%)\")\n        else:\n            result.append(\"没有发现数值列\")\n        \n        # 3. 分类列分析\n        result.append(\"\\n\" + \"-\" * 80)\n        result.append(\"3. 分类列分析\")\n        result.append(\"-\" * 80)\n        \n        categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n        for col in categorical_cols:\n            result.append(f\"\\n{col} 分布:\")\n            value_counts = df[col].value_counts()\n            unique_count = len(value_counts)\n            result.append(f\"  唯一值数量: {unique_count}\")\n            \n            # 如果唯一值太多，只显示前10个\n            if unique_count > 10:\n                result.append(\"  前10个最常见值:\")\n                for val, count in value_counts.head(10).items():\n                    result.append(f\"    {val}: {count} ({count/len(df)*100:.2f}%)\")\n            else:\n                result.append(\"  所有值分布:\")\n                for val, count in value_counts.items():\n                    result.append(f\"    {val}: {count} ({count/len(df)*100:.2f}%)\")\n        \n        # 4. 特定业务分析\n        result.append(\"\\n\" + \"-\" * 80)\n        result.append(\"4. 业务特定分析\")\n        result.append(\"-\" * 80)\n        \n        # 按区域分析投诉类型\n        if 'Region' in df.columns and 'Complaint_Type' in df.columns:\n            result.append(\"\\n按区域分析投诉类型:\")\n            region_complaint = pd.crosstab(df['Region'], df['Complaint_Type'])\n            result.append(str(region_complaint))\n        \n        # 按服务类型分析优先级\n        if 'Service_Type' in df.columns and 'Priority' in df.columns:\n            result.append(\"\\n按服务类型分析优先级:\")\n            service_priority = pd.crosstab(df['Service_Type'], df['Priority'])\n            result.append(str(service_priority))\n        \n        # 分析解决时间\n        if 'Resolution_Time_Days' in df.columns:\n            result.append(\"\\n解决时间分析:\")\n            resolution_by_type = df.groupby('Complaint_Type')['Resolution_Time_Days'].agg(['mean', 'median', 'min', 'max']).round(2)\n            result.append(str(resolution_by_type))\n        \n        # 客户满意度分析\n        if 'Customer_Satisfaction' in df.columns:\n            result.append(\"\\n客户满意度分析:\")\n            satisfaction_by_type = df.groupby('Complaint_Type')['Customer_Satisfaction'].agg(['mean', 'median', 'min', 'max', 'count']).round(2)\n            result.append(str(satisfaction_by_type))\n        \n        # 5. 结论和建议\n        result.append(\"\\n\" + \"-\" * 80)\n        result.append(\"5. 结论和建议\")\n        result.append(\"-\" * 80)\n        \n        # 计算一些关键指标\n        if 'Status' in df.columns:\n            open_cases = df[df['Status'] != 'Closed'].shape[0]\n            open_percent = (open_cases / len(df)) * 100\n            result.append(f\"• 未关闭案例: {open_cases} ({open_percent:.2f}%)\")\n        \n        if 'Resolution_Time_Days' in df.columns:\n            avg_resolution = df['Resolution_Time_Days'].mean()\n            result.append(f\"• 平均解决时间: {avg_resolution:.2f} 天\")\n        \n        if 'Customer_Satisfaction' in df.columns:\n            low_satisfaction = df[df['Customer_Satisfaction'] <= 2].shape[0]\n            low_percent = (low_satisfaction / df['Customer_Satisfaction'].count()) * 100\n            result.append(f\"• 低满意度案例(≤2): {low_satisfaction} ({low_percent:.2f}%)\")\n        \n        # 写入结果到文件\n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write('\\n'.join(result))\n        \n        print(f\"分析完成，结果已保存到: {output_path}\")\n        return True\n        \n    except Exception as e:\n        print(f\"分析过程中出错: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    csv_file = \"temp_csv/excel_data_20250317154509.csv\"\n    output_file = \"pngs/analysis_results.txt\"\n    analyze_csv_data(csv_file, output_file)",
      "results": "正在读取文件: temp_csv/excel_data_20250317154509.csv\n分析完成，结果已保存到: pngs/analysis_results.txt\n",
      "txt_results": "================================================================================\n客户投诉数据分析报告\n================================================================================\n分析时间: 2025-03-17 15:46:04\n数据文件: temp_csv/excel_data_20250317154509.csv\n记录数量: 2000\n字段数量: 12\n\n--------------------------------------------------------------------------------\n1. 基本数据概览\n--------------------------------------------------------------------------------\n数据类型和缺失值:\n  Complaint_ID: 类型=object, 缺失值=0 (0.00%)\n  Date_Reported: 类型=object, 缺失值=0 (0.00%)\n  Customer_ID: 类型=object, 缺失值=0 (0.00%)\n  Region: 类型=object, 缺失值=0 (0.00%)\n  Complaint_Type: 类型=object, 缺失值=0 (0.00%)\n  Service_Type: 类型=object, 缺失值=0 (0.00%)\n  Description: 类型=object, 缺失值=0 (0.00%)\n  Priority: 类型=object, 缺失值=0 (0.00%)\n  Status: 类型=object, 缺失值=0 (0.00%)\n  Resolution_Date: 类型=object, 缺失值=430 (21.50%)\n  Resolution_Time_Days: 类型=float64, 缺失值=430 (21.50%)\n  Customer_Satisfaction: 类型=float64, 缺失值=298 (14.90%)\n\n--------------------------------------------------------------------------------\n2. 数值列分析\n--------------------------------------------------------------------------------\n\nResolution_Time_Days 统计分析:\n  计数: 1570\n  均值: 7.15\n  标准差: 4.40\n  最小值: 0.00\n  25%分位数: 3.00\n  中位数: 7.00\n  75%分位数: 11.00\n  最大值: 14.00\n  值分布:\n    0.0: 109 (5.45%)\n    1.0: 97 (4.85%)\n    2.0: 104 (5.20%)\n    3.0: 99 (4.95%)\n    4.0: 97 (4.85%)\n    5.0: 121 (6.05%)\n    6.0: 94 (4.70%)\n    7.0: 90 (4.50%)\n    8.0: 103 (5.15%)\n    9.0: 104 (5.20%)\n    10.0: 98 (4.90%)\n    11.0: 106 (5.30%)\n    12.0: 109 (5.45%)\n    13.0: 118 (5.90%)\n    14.0: 121 (6.05%)\n\nCustomer_Satisfaction 统计分析:\n  计数: 1702\n  均值: 3.02\n  标准差: 1.41\n  最小值: 1.00\n  25%分位数: 2.00\n  中位数: 3.00\n  75%分位数: 4.00\n  最大值: 5.00\n  值分布:\n    1.0: 339 (16.95%)\n    2.0: 319 (15.95%)\n    3.0: 360 (18.00%)\n    4.0: 344 (17.20%)\n    5.0: 340 (17.00%)\n\n--------------------------------------------------------------------------------\n3. 分类列分析\n--------------------------------------------------------------------------------\n\nComplaint_ID 分布:\n  唯一值数量: 2000\n  前10个最常见值:\n    COMP-01984: 1 (0.05%)\n    COMP-01983: 1 (0.05%)\n    COMP-01982: 1 (0.05%)\n    COMP-01981: 1 (0.05%)\n    COMP-01980: 1 (0.05%)\n    COMP-01979: 1 (0.05%)\n    COMP-01978: 1 (0.05%)\n    COMP-01977: 1 (0.05%)\n    COMP-01976: 1 (0.05%)\n    COMP-01975: 1 (0.05%)\n\nDate_Reported 分布:\n  唯一值数量: 90\n  前10个最常见值:\n    2025-03-28: 37 (1.85%)\n    2025-01-01: 33 (1.65%)\n    2025-03-07: 31 (1.55%)\n    2025-01-23: 30 (1.50%)\n    2025-01-06: 30 (1.50%)\n    2025-03-06: 29 (1.45%)\n    2025-03-20: 29 (1.45%)\n    2025-03-14: 29 (1.45%)\n    2025-03-16: 28 (1.40%)\n    2025-03-18: 28 (1.40%)\n\nCustomer_ID 分布:\n  唯一值数量: 1769\n  前10个最常见值:\n    CUST-8483: 3 (0.15%)\n    CUST-4227: 3 (0.15%)\n    CUST-1815: 3 (0.15%)\n    CUST-7950: 3 (0.15%)\n    CUST-2704: 3 (0.15%)\n    CUST-8470: 3 (0.15%)\n    CUST-1091: 3 (0.15%)\n    CUST-3819: 3 (0.15%)\n    CUST-4605: 3 (0.15%)\n    CUST-1709: 3 (0.15%)\n\nRegion 分布:\n  唯一值数量: 5\n  所有值分布:\n    North: 417 (20.85%)\n    Central: 405 (20.25%)\n    South: 403 (20.15%)\n    West: 396 (19.80%)\n    East: 379 (18.95%)\n\nComplaint_Type 分布:\n  唯一值数量: 7\n  所有值分布:\n    Call Drop: 296 (14.80%)\n    SMS Failure: 289 (14.45%)\n    Service Outage: 289 (14.45%)\n    Poor Voice Quality: 288 (14.40%)\n    No Signal: 280 (14.00%)\n    Slow Internet: 280 (14.00%)\n    Billing Issue: 278 (13.90%)\n\nService_Type 分布:\n  唯一值数量: 4\n  所有值分布:\n    Mobile: 508 (25.40%)\n    Broadband: 508 (25.40%)\n    Fixed Line: 494 (24.70%)\n    TV: 490 (24.50%)\n\nDescription 分布:\n  唯一值数量: 7\n  所有值分布:\n    Customer reported call drop issue: 320 (16.00%)\n    Customer reported slow internet issue: 294 (14.70%)\n    Customer reported service outage issue: 286 (14.30%)\n    Customer reported billing issue issue: 285 (14.25%)\n    Customer reported poor voice quality issue: 285 (14.25%)\n    Customer reported no signal issue: 269 (13.45%)\n    Customer reported sms failure issue: 261 (13.05%)\n\nPriority 分布:\n  唯一值数量: 4\n  所有值分布:\n    Critical: 526 (26.30%)\n    Medium: 500 (25.00%)\n    Low: 495 (24.75%)\n    High: 479 (23.95%)\n\nStatus 分布:\n  唯一值数量: 4\n  所有值分布:\n    Closed: 1702 (85.10%)\n    In Progress: 111 (5.55%)\n    Resolved: 99 (4.95%)\n    Open: 88 (4.40%)\n\nResolution_Date 分布:\n  唯一值数量: 103\n  前10个最常见值:\n    2025-03-12: 28 (1.40%)\n    2025-03-26: 25 (1.25%)\n    2025-03-23: 24 (1.20%)\n    2025-02-17: 23 (1.15%)\n    2025-02-21: 23 (1.15%)\n    2025-03-08: 23 (1.15%)\n    2025-03-11: 22 (1.10%)\n    2025-02-23: 22 (1.10%)\n    2025-02-19: 21 (1.05%)\n    2025-02-03: 21 (1.05%)\n\n--------------------------------------------------------------------------------\n4. 业务特定分析\n--------------------------------------------------------------------------------\n\n按区域分析投诉类型:\nComplaint_Type  Billing Issue  Call Drop  ...  Service Outage  Slow Internet\nRegion                                    ...                               \nCentral                    55         68  ...              55             52\nEast                       56         53  ...              63             49\nNorth                      49         61  ...              56             65\nSouth                      62         59  ...              51             62\nWest                       56         55  ...              64             52\n\n[5 rows x 7 columns]\n\n按服务类型分析优先级:\nPriority      Critical  High  Low  Medium\nService_Type                             \nBroadband          141   124  118     125\nFixed Line         128   120  118     128\nMobile             133   114  130     131\nTV                 124   121  129     116\n\n解决时间分析:\n                    mean  median  min   max\nComplaint_Type                             \nBilling Issue       7.08     7.0  0.0  14.0\nCall Drop           6.82     6.0  0.0  14.0\nNo Signal           6.83     6.5  0.0  14.0\nPoor Voice Quality  7.50     8.0  0.0  14.0\nSMS Failure         7.46     8.0  0.0  14.0\nService Outage      7.30     7.0  0.0  14.0\nSlow Internet       7.06     7.0  0.0  14.0\n\n客户满意度分析:\n                    mean  median  min  max  count\nComplaint_Type                                   \nBilling Issue       3.04     3.0  1.0  5.0    237\nCall Drop           3.10     3.0  1.0  5.0    253\nNo Signal           3.07     3.0  1.0  5.0    234\nPoor Voice Quality  3.03     3.0  1.0  5.0    252\nSMS Failure         3.11     3.0  1.0  5.0    236\nService Outage      2.94     3.0  1.0  5.0    244\nSlow Internet       2.82     3.0  1.0  5.0    246\n\n--------------------------------------------------------------------------------\n5. 结论和建议\n--------------------------------------------------------------------------------\n• 未关闭案例: 298 (14.90%)\n• 平均解决时间: 7.15 天\n• 低满意度案例(≤2): 658 (38.66%)",
      "report_file": "reports\\总体数据统计分析_20250317_154621.md"
    },
    "分组对比分析单元": {
      "status": "failed",
      "error": "代码执行超时（超过60秒）",
      "code": "import pandas as pd\nimport numpy as np\nimport os\nimport time\nfrom datetime import datetime\n\ndef load_data(file_path):\n    \"\"\"加载CSV文件数据\"\"\"\n    try:\n        # 添加低内存模式选项，适用于大文件\n        df = pd.read_csv(file_path, low_memory=False)\n        print(f\"成功加载数据，共{len(df)}行，{len(df.columns)}列\")\n        return df\n    except Exception as e:\n        print(f\"加载数据失败: {e}\")\n        return None\n\ndef analyze_column_distribution(df, sample_size=None):\n    \"\"\"分析数值列和分类列的分布，可选择使用样本数据\"\"\"\n    start_time = time.time()\n    result = []\n    result.append(\"=\" * 80)\n    result.append(\"列分布分析\")\n    result.append(\"=\" * 80)\n    \n    # 如果数据量大，使用样本\n    if sample_size and len(df) > sample_size:\n        df_sample = df.sample(sample_size, random_state=42)\n        result.append(f\"\\n注意: 使用{sample_size}行样本数据进行分析\")\n    else:\n        df_sample = df\n    \n    # 分析分类列\n    categorical_cols = df_sample.select_dtypes(include=['object']).columns\n    result.append(\"\\n分类列分析:\")\n    for col in categorical_cols:\n        # 检查处理时间，防止单列分析时间过长\n        if time.time() - start_time > 30:\n            result.append(\"\\n警告: 分析时间过长，部分列分析被跳过\")\n            break\n            \n        result.append(f\"\\n列名: {col}\")\n        # 使用value_counts()的dropna参数处理缺失值\n        value_counts = df_sample[col].value_counts(dropna=False)\n        total = len(df_sample)\n        result.append(f\"  唯一值数量: {df_sample[col].nunique()}\")\n        result.append(f\"  缺失值数量: {df_sample[col].isna().sum()}\")\n        result.append(\"  前5个最常见值:\")\n        # 限制处理的项目数\n        for i, (val, count) in enumerate(value_counts.head(5).items()):\n            val_str = str(val) if pd.notna(val) else \"NaN\"\n            result.append(f\"    - {val_str}: {count} ({count/total*100:.2f}%)\")\n    \n    # 分析数值列\n    numeric_cols = df_sample.select_dtypes(include=['int64', 'float64']).columns\n    result.append(\"\\n数值列分析:\")\n    for col in numeric_cols:\n        # 检查处理时间\n        if time.time() - start_time > 45:\n            result.append(\"\\n警告: 分析时间过长，部分列分析被跳过\")\n            break\n            \n        result.append(f\"\\n列名: {col}\")\n        result.append(f\"  缺失值数量: {df_sample[col].isna().sum()}\")\n        # 使用try-except处理可能的错误\n        try:\n            result.append(f\"  最小值: {df_sample[col].min()}\")\n            result.append(f\"  最大值: {df_sample[col].max()}\")\n            result.append(f\"  平均值: {df_sample[col].mean():.2f}\")\n            result.append(f\"  中位数: {df_sample[col].median()}\")\n            result.append(f\"  标准差: {df_sample[col].std():.2f}\")\n        except Exception as e:\n            result.append(f\"  计算统计数据时出错: {e}\")\n        \n    return \"\\n\".join(result)\n\ndef group_comparison(df, max_groups=10):\n    \"\"\"对数据进行分组统计，比较不同组之间的差异\"\"\"\n    start_time = time.time()\n    result = []\n    result.append(\"\\n\" + \"=\" * 80)\n    result.append(\"分组对比分析\")\n    result.append(\"=\" * 80)\n    \n    # 检查必要的列是否存在\n    required_columns = ['Region', 'Complaint_Type', 'Resolution_Time_Days', 'Customer_Satisfaction']\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        result.append(f\"\\n警告：缺少必要的列: {', '.join(missing_columns)}\")\n        return \"\\n\".join(result)\n    \n    # 按区域分组分析\n    result.append(\"\\n按区域(Region)分组分析:\")\n    try:\n        # 获取唯一区域值并限制数量\n        unique_regions = df['Region'].value_counts().head(max_groups).index\n        filtered_df = df[df['Region'].isin(unique_regions)]\n        \n        region_group = filtered_df.groupby('Region')\n        region_stats = region_group[['Resolution_Time_Days', 'Customer_Satisfaction']].agg(['count', 'mean', 'median'])\n        \n        result.append(\"\\n解决时间(天)统计:\")\n        for region in region_stats.index:\n            count = region_stats.loc[region, ('Resolution_Time_Days', 'count')]\n            mean = region_stats.loc[region, ('Resolution_Time_Days', 'mean')]\n            median = region_stats.loc[region, ('Resolution_Time_Days', 'median')]\n            result.append(f\"  {region}: 数量={count}, 平均={mean:.2f}, 中位数={median:.2f}\")\n        \n        result.append(\"\\n客户满意度统计:\")\n        for region in region_stats.index:\n            count = region_stats.loc[region, ('Customer_Satisfaction', 'count')]\n            mean = region_stats.loc[region, ('Customer_Satisfaction', 'mean')]\n            median = region_stats.loc[region, ('Customer_Satisfaction', 'median')]\n            result.append(f\"  {region}: 数量={count}, 平均={mean:.2f}, 中位数={median:.2f}\")\n    except Exception as e:\n        result.append(f\"\\n区域分组分析出错: {e}\")\n    \n    # 检查是否超时\n    if time.time() - start_time > 30:\n        result.append(\"\\n警告: 分析时间过长，跳过投诉类型分析\")\n        return \"\\n\".join(result)\n    \n    # 按投诉类型分组分析\n    result.append(\"\\n按投诉类型(Complaint_Type)分组分析:\")\n    try:\n        # 获取唯一投诉类型并限制数量\n        unique_complaints = df['Complaint_Type'].value_counts().head(max_groups).index\n        filtered_df = df[df['Complaint_Type'].isin(unique_complaints)]\n        \n        complaint_group = filtered_df.groupby('Complaint_Type')\n        complaint_stats = complaint_group[['Resolution_Time_Days', 'Customer_Satisfaction']].agg(['count', 'mean', 'median'])\n        \n        result.append(\"\\n解决时间(天)统计:\")\n        for complaint in complaint_stats.index:\n            count = complaint_stats.loc[complaint, ('Resolution_Time_Days', 'count')]\n            mean = complaint_stats.loc[complaint, ('Resolution_Time_Days', 'mean')]\n            median = complaint_stats.loc[complaint, ('Resolution_Time_Days', 'median')]\n            result.append(f\"  {complaint}: 数量={count}, 平均={mean:.2f}, 中位数={median:.2f}\")\n        \n        result.append(\"\\n客户满意度统计:\")\n        for complaint in complaint_stats.index:\n            count = complaint_stats.loc[complaint, ('Customer_Satisfaction', 'count')]\n            mean = complaint_stats.loc[complaint, ('Customer_Satisfaction', 'mean')]\n            median = complaint_stats.loc[complaint, ('Customer_Satisfaction', 'median')]\n            result.append(f\"  {complaint}: 数量={count}, 平均={mean:.2f}, 中位数={median:.2f}\")\n    except Exception as e:\n        result.append(f\"\\n投诉类型分组分析出错: {e}\")\n    \n    return \"\\n\".join(result)\n\ndef main():\n    \"\"\"主函数\"\"\"\n    # 设置全局超时\n    global_start_time = time.time()\n    max_execution_time = 55  # 设置最大执行时间为55秒\n    \n    # 示例用法\n    file_path = input(\"请输入CSV文件路径: \")\n    if os.path.exists(file_path):\n        df = load_data(file_path)\n        if df is not None:\n            # 检查数据大小，决定是否使用样本\n            sample_size = 10000 if len(df) > 10000 else None\n            \n            # 检查是否超时\n            if time.time() - global_start_time < max_execution_time:\n                print(analyze_column_distribution(df, sample_size))\n            else:\n                print(\"警告: 执行时间过长，跳过列分布分析\")\n            \n            # 再次检查是否超时\n            if time.time() - global_start_time < max_execution_time:\n                print(group_comparison(df))\n            else:\n                print(\"警告: 执行时间过长，跳过分组对比分析\")\n    else:\n        print(\"文件不存在，请检查路径\")\n\nif __name__ == \"__main__\":\n    main()",
      "results": null
    },
    "比例分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport os\nimport numpy as np\nfrom datetime import datetime\n\ndef read_csv_file(file_path):\n    \"\"\"读取CSV文件并返回DataFrame\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        print(f\"成功读取CSV文件，共{len(df)}行数据\")\n        return df\n    except Exception as e:\n        print(f\"读取CSV文件时出错: {e}\")\n        return None\n\ndef analyze_categorical_columns(df):\n    \"\"\"分析分类列的分布情况\"\"\"\n    results = []\n    \n    # 确定哪些列是分类列\n    categorical_columns = [\n        'Region', 'Complaint_Type', 'Service_Type', \n        'Priority', 'Status', 'Customer_Satisfaction'\n    ]\n    \n    for column in categorical_columns:\n        if column in df.columns:\n            # 处理可能的缺失值\n            valid_count = df[column].count()\n            missing_count = df[column].isna().sum()\n            \n            # 计算分布和占比\n            value_counts = df[column].value_counts()\n            percentages = df[column].value_counts(normalize=True) * 100\n            \n            # 将结果添加到列表中\n            results.append({\n                'column': column,\n                'valid_count': valid_count,\n                'missing_count': missing_count,\n                'distribution': {\n                    'counts': value_counts,\n                    'percentages': percentages\n                }\n            })\n    \n    return results\n\ndef format_results_as_text(results):\n    \"\"\"将分析结果格式化为纯文本\"\"\"\n    text = \"客户投诉数据分类分析报告\\n\"\n    text += \"=\" * 50 + \"\\n\"\n    text += f\"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\"\n    text += \"=\" * 50 + \"\\n\\n\"\n    \n    for result in results:\n        column = result['column']\n        valid_count = result['valid_count']\n        missing_count = result['missing_count']\n        \n        text += f\"{column} 分布分析\\n\"\n        text += \"-\" * 30 + \"\\n\"\n        text += f\"有效数据: {valid_count} 条\\n\"\n        text += f\"缺失数据: {missing_count} 条\\n\\n\"\n        \n        text += \"类别分布:\\n\"\n        \n        # 获取计数和百分比\n        counts = result['distribution']['counts']\n        percentages = result['distribution']['percentages']\n        \n        # 确保索引对齐\n        for category in counts.index:\n            count = counts[category]\n            percentage = percentages[category]\n            text += f\"  {category}: {count} 条 ({percentage:.2f}%)\\n\"\n        \n        text += \"\\n\" + \"=\" * 50 + \"\\n\\n\"\n    \n    return text\n\ndef save_results_to_file(text, output_path):\n    \"\"\"将结果保存到文件\"\"\"\n    try:\n        # 确保目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(text)\n        print(f\"分析结果已保存到 {output_path}\")\n        return True\n    except Exception as e:\n        print(f\"保存结果时出错: {e}\")\n        return False\n\ndef main():\n    # 文件路径\n    csv_file_path = \"temp_csv/excel_data_20250317154509.csv\"\n    output_path = \"pngs/category_distribution_results.txt\"\n    \n    # 读取CSV文件\n    df = read_csv_file(csv_file_path)\n    if df is None:\n        return\n    \n    # 分析分类列\n    results = analyze_categorical_columns(df)\n    \n    # 格式化结果为文本\n    text_results = format_results_as_text(results)\n    \n    # 保存结果\n    save_results_to_file(text_results, output_path)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "成功读取CSV文件，共2000行数据\n分析结果已保存到 pngs/category_distribution_results.txt\n",
      "txt_results": "客户投诉数据分类分析报告\n==================================================\n生成时间: 2025-03-17 15:51:38\n==================================================\n\nRegion 分布分析\n------------------------------\n有效数据: 2000 条\n缺失数据: 0 条\n\n类别分布:\n  North: 417 条 (20.85%)\n  Central: 405 条 (20.25%)\n  South: 403 条 (20.15%)\n  West: 396 条 (19.80%)\n  East: 379 条 (18.95%)\n\n==================================================\n\nComplaint_Type 分布分析\n------------------------------\n有效数据: 2000 条\n缺失数据: 0 条\n\n类别分布:\n  Call Drop: 296 条 (14.80%)\n  SMS Failure: 289 条 (14.45%)\n  Service Outage: 289 条 (14.45%)\n  Poor Voice Quality: 288 条 (14.40%)\n  No Signal: 280 条 (14.00%)\n  Slow Internet: 280 条 (14.00%)\n  Billing Issue: 278 条 (13.90%)\n\n==================================================\n\nService_Type 分布分析\n------------------------------\n有效数据: 2000 条\n缺失数据: 0 条\n\n类别分布:\n  Mobile: 508 条 (25.40%)\n  Broadband: 508 条 (25.40%)\n  Fixed Line: 494 条 (24.70%)\n  TV: 490 条 (24.50%)\n\n==================================================\n\nPriority 分布分析\n------------------------------\n有效数据: 2000 条\n缺失数据: 0 条\n\n类别分布:\n  Critical: 526 条 (26.30%)\n  Medium: 500 条 (25.00%)\n  Low: 495 条 (24.75%)\n  High: 479 条 (23.95%)\n\n==================================================\n\nStatus 分布分析\n------------------------------\n有效数据: 2000 条\n缺失数据: 0 条\n\n类别分布:\n  Closed: 1702 条 (85.10%)\n  In Progress: 111 条 (5.55%)\n  Resolved: 99 条 (4.95%)\n  Open: 88 条 (4.40%)\n\n==================================================\n\nCustomer_Satisfaction 分布分析\n------------------------------\n有效数据: 1702 条\n缺失数据: 298 条\n\n类别分布:\n  3.0: 360 条 (21.15%)\n  4.0: 344 条 (20.21%)\n  5.0: 340 条 (19.98%)\n  1.0: 339 条 (19.92%)\n  2.0: 319 条 (18.74%)\n\n==================================================\n\n",
      "report_file": "reports\\比例分析_20250317_155238.md"
    },
    "时间趋势分析单元": {
      "status": "success",
      "error": null,
      "code": "import pandas as pd\nimport numpy as np\nimport os\nfrom datetime import datetime\nfrom collections import Counter\n\ndef load_csv_data(file_path):\n    \"\"\"加载CSV文件数据\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        print(f\"成功加载CSV文件，共{len(df)}行数据\")\n        return df\n    except Exception as e:\n        print(f\"加载CSV文件时出错: {e}\")\n        return None\n\ndef convert_date_columns(df):\n    \"\"\"将日期列转换为datetime格式\"\"\"\n    try:\n        # 转换日期列\n        date_columns = ['Date_Reported', 'Resolution_Date']\n        for col in date_columns:\n            if col in df.columns:\n                df[col] = pd.to_datetime(df[col], errors='coerce')\n        \n        # 计算每周和每月\n        if 'Date_Reported' in df.columns:\n            df['Year_Week'] = df['Date_Reported'].dt.strftime('%Y-%U')\n            df['Year_Month'] = df['Date_Reported'].dt.strftime('%Y-%m')\n        \n        return df\n    except Exception as e:\n        print(f\"转换日期列时出错: {e}\")\n        return df\n\ndef analyze_time_trends(df):\n    \"\"\"分析时间趋势\"\"\"\n    results = []\n    \n    try:\n        # 1. 按日期统计投诉数量\n        daily_counts = df.groupby('Date_Reported').size()\n        \n        # 计算每日投诉的基本统计信息\n        results.append(\"===== 每日投诉统计 =====\")\n        results.append(f\"总投诉数: {len(df)}\")\n        results.append(f\"日均投诉数: {daily_counts.mean():.2f}\")\n        results.append(f\"最高单日投诉数: {daily_counts.max()} (日期: {daily_counts.idxmax().strftime('%Y-%m-%d')})\")\n        results.append(f\"最低单日投诉数: {daily_counts.min()} (日期: {daily_counts.idxmin().strftime('%Y-%m-%d')})\")\n        results.append(f\"投诉数标准差: {daily_counts.std():.2f}\")\n        \n        # 2. 按周统计投诉趋势\n        weekly_counts = df.groupby('Year_Week').size()\n        results.append(\"\\n===== 每周投诉趋势 =====\")\n        results.append(f\"周均投诉数: {weekly_counts.mean():.2f}\")\n        results.append(f\"投诉量最高的一周: {weekly_counts.idxmax()} (数量: {weekly_counts.max()})\")\n        results.append(f\"投诉量最低的一周: {weekly_counts.idxmin()} (数量: {weekly_counts.min()})\")\n        \n        # 计算周环比变化\n        weekly_change = weekly_counts.pct_change() * 100\n        results.append(f\"周环比平均变化率: {weekly_change.mean():.2f}%\")\n        \n        # 3. 按月统计投诉趋势\n        monthly_counts = df.groupby('Year_Month').size()\n        results.append(\"\\n===== 每月投诉趋势 =====\")\n        results.append(f\"月均投诉数: {monthly_counts.mean():.2f}\")\n        results.append(f\"投诉量最高的月份: {monthly_counts.idxmax()} (数量: {monthly_counts.max()})\")\n        results.append(f\"投诉量最低的月份: {monthly_counts.idxmin()} (数量: {monthly_counts.min()})\")\n        \n        # 4. 分析投诉类型随时间的变化\n        results.append(\"\\n===== 投诉类型随时间变化 =====\")\n        complaint_type_monthly = df.groupby(['Year_Month', 'Complaint_Type']).size().unstack(fill_value=0)\n        \n        # 获取最近三个月的数据\n        recent_months = sorted(df['Year_Month'].unique())[-3:]\n        for month in recent_months:\n            if month in complaint_type_monthly.index:\n                results.append(f\"\\n月份: {month}\")\n                for complaint_type, count in complaint_type_monthly.loc[month].sort_values(ascending=False).items():\n                    results.append(f\"  {complaint_type}: {count}件\")\n        \n        # 5. 分析解决时间趋势\n        results.append(\"\\n===== 解决时间趋势分析 =====\")\n        # 按月计算平均解决时间\n        resolution_time_monthly = df.groupby('Year_Month')['Resolution_Time_Days'].mean()\n        \n        results.append(\"月度平均解决时间(天):\")\n        for month, avg_time in resolution_time_monthly.items():\n            results.append(f\"  {month}: {avg_time:.2f}天\")\n        \n        # 计算解决时间趋势\n        resolution_change = resolution_time_monthly.pct_change() * 100\n        avg_change = resolution_change.mean()\n        results.append(f\"解决时间月环比平均变化率: {avg_change:.2f}%\")\n        \n        if avg_change < 0:\n            results.append(\"解决时间呈下降趋势，服务效率有所提高\")\n        elif avg_change > 0:\n            results.append(\"解决时间呈上升趋势，服务效率有所下降\")\n        else:\n            results.append(\"解决时间保持稳定\")\n        \n        # 6. 分析客户满意度趋势\n        results.append(\"\\n===== 客户满意度趋势分析 =====\")\n        satisfaction_monthly = df.groupby('Year_Month')['Customer_Satisfaction'].mean()\n        \n        results.append(\"月度平均客户满意度(1-5分):\")\n        for month, avg_satisfaction in satisfaction_monthly.items():\n            results.append(f\"  {month}: {avg_satisfaction:.2f}\")\n        \n        # 计算满意度趋势\n        satisfaction_change = satisfaction_monthly.pct_change() * 100\n        avg_satisfaction_change = satisfaction_change.mean()\n        results.append(f\"客户满意度月环比平均变化率: {avg_satisfaction_change:.2f}%\")\n        \n        # 7. 识别异常点\n        results.append(\"\\n===== 异常点分析 =====\")\n        # 使用Z-score方法识别异常的日投诉量\n        z_scores = (daily_counts - daily_counts.mean()) / daily_counts.std()\n        outliers = daily_counts[abs(z_scores) > 2]\n        \n        if len(outliers) > 0:\n            results.append(f\"发现{len(outliers)}个异常日期(投诉量异常):\")\n            for date, count in outliers.items():\n                z = z_scores[date]\n                direction = \"高于\" if z > 0 else \"低于\"\n                results.append(f\"  {date.strftime('%Y-%m-%d')}: {count}件投诉 ({direction}平均值{abs(z):.2f}个标准差)\")\n        else:\n            results.append(\"未发现明显的投诉量异常日期\")\n        \n        return results\n    except Exception as e:\n        print(f\"分析时间趋势时出错: {e}\")\n        return [\"分析过程中出现错误，请检查数据格式和完整性\"]\n\ndef save_results(results, output_path):\n    \"\"\"保存分析结果到文本文件\"\"\"\n    try:\n        # 确保目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        \n        with open(output_path, 'w', encoding='utf-8') as f:\n            f.write(\"投诉数据时间趋势分析报告\\n\")\n            f.write(\"=\" * 50 + \"\\n\\n\")\n            f.write(\"生成时间: \" + datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") + \"\\n\\n\")\n            \n            for line in results:\n                f.write(line + \"\\n\")\n                \n        print(f\"分析结果已保存到: {output_path}\")\n        return True\n    except Exception as e:\n        print(f\"保存结果时出错: {e}\")\n        return False\n\ndef main():\n    # 文件路径\n    csv_path = \"temp_csv/excel_data_20250317154509.csv\"\n    output_path = \"pngs/time_trend_results.txt\"\n    \n    # 1. 加载数据\n    df = load_csv_data(csv_path)\n    if df is None:\n        return\n    \n    # 2. 转换日期列\n    df = convert_date_columns(df)\n    \n    # 3. 分析时间趋势\n    results = analyze_time_trends(df)\n    \n    # 4. 保存结果\n    save_results(results, output_path)\n\nif __name__ == \"__main__\":\n    main()",
      "results": "成功加载CSV文件，共2000行数据\n分析结果已保存到: pngs/time_trend_results.txt\n",
      "txt_results": "投诉数据时间趋势分析报告\n==================================================\n\n生成时间: 2025-03-17 15:53:45\n\n===== 每日投诉统计 =====\n总投诉数: 2000\n日均投诉数: 22.22\n最高单日投诉数: 37 (日期: 2025-03-28)\n最低单日投诉数: 12 (日期: 2025-01-13)\n投诉数标准差: 4.81\n\n===== 每周投诉趋势 =====\n周均投诉数: 142.86\n投诉量最高的一周: 2025-11 (数量: 171)\n投诉量最低的一周: 2025-13 (数量: 38)\n周环比平均变化率: 0.38%\n\n===== 每月投诉趋势 =====\n月均投诉数: 666.67\n投诉量最高的月份: 2025-03 (数量: 705)\n投诉量最低的月份: 2025-02 (数量: 621)\n\n===== 投诉类型随时间变化 =====\n\n月份: 2025-01\n  Call Drop: 106件\n  SMS Failure: 104件\n  Slow Internet: 99件\n  Billing Issue: 98件\n  Service Outage: 91件\n  No Signal: 88件\n  Poor Voice Quality: 88件\n\n月份: 2025-02\n  Call Drop: 97件\n  Billing Issue: 90件\n  Slow Internet: 90件\n  Service Outage: 89件\n  Poor Voice Quality: 89件\n  SMS Failure: 87件\n  No Signal: 79件\n\n月份: 2025-03\n  No Signal: 113件\n  Poor Voice Quality: 111件\n  Service Outage: 109件\n  SMS Failure: 98件\n  Call Drop: 93件\n  Slow Internet: 91件\n  Billing Issue: 90件\n\n===== 解决时间趋势分析 =====\n月度平均解决时间(天):\n  2025-01: 6.88天\n  2025-02: 7.45天\n  2025-03: 7.14天\n解决时间月环比平均变化率: 2.09%\n解决时间呈上升趋势，服务效率有所下降\n\n===== 客户满意度趋势分析 =====\n月度平均客户满意度(1-5分):\n  2025-01: 2.98\n  2025-02: 3.14\n  2025-03: 2.93\n客户满意度月环比平均变化率: -0.69%\n\n===== 异常点分析 =====\n发现5个异常日期(投诉量异常):\n  2025-01-01: 33件投诉 (高于平均值2.24个标准差)\n  2025-01-13: 12件投诉 (低于平均值2.13个标准差)\n  2025-01-20: 12件投诉 (低于平均值2.13个标准差)\n  2025-02-22: 12件投诉 (低于平均值2.13个标准差)\n  2025-03-28: 37件投诉 (高于平均值3.07个标准差)\n",
      "report_file": "reports\\时间趋势分析_20250317_155431.md"
    }
  }
}